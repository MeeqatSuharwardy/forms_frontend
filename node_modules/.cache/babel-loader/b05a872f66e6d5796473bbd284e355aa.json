{"ast":null,"code":"// tslint:disable radix\n/**\n * Converts a number to its string representation in decimal. This function\n * differs from simply converting a number to a string with `.toString()`\n * because this function's output string will **not** contain exponential\n * notation.\n *\n * Credit: https://stackoverflow.com/a/46545519\n */\nexport var numberToString = function (num) {\n  var numStr = String(num);\n  if (Math.abs(num) < 1.0) {\n    var e = parseInt(num.toString().split('e-')[1]);\n    if (e) {\n      var negative = num < 0;\n      if (negative) num *= -1;\n      num *= Math.pow(10, e - 1);\n      numStr = '0.' + new Array(e).join('0') + num.toString().substring(2);\n      if (negative) numStr = '-' + numStr;\n    }\n  } else {\n    var e = parseInt(num.toString().split('+')[1]);\n    if (e > 20) {\n      e -= 20;\n      num /= Math.pow(10, e);\n      numStr = num.toString() + new Array(e + 1).join('0');\n    }\n  }\n  return numStr;\n};\nexport var sizeInBytes = function (n) {\n  return Math.ceil(n.toString(2).length / 8);\n};\n/**\n * Converts a number into its constituent bytes and returns them as\n * a number[].\n *\n * Returns most significant byte as first element in array. It may be necessary\n * to call .reverse() to get the bits in the desired order.\n *\n * Example:\n *   bytesFor(0x02A41E) => [ 0b10, 0b10100100, 0b11110 ]\n *\n * Credit for algorithm: https://stackoverflow.com/a/1936865\n */\nexport var bytesFor = function (n) {\n  var bytes = new Uint8Array(sizeInBytes(n));\n  for (var i = 1; i <= bytes.length; i++) {\n    bytes[i - 1] = n >> (bytes.length - i) * 8;\n  }\n  return bytes;\n};","map":{"version":3,"sources":["../../src/utils/numbers.ts"],"names":[],"mappings":"AAAA;AAEA;;;;;;;AAOG;AACH,OAAO,IAAM,cAAc,GAAG,SAAA,CAAC,GAAW,EAAA;EACxC,IAAI,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC;EAExB,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE;IACvB,IAAM,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAA,CAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACjD,IAAI,CAAC,EAAE;MACL,IAAM,QAAQ,GAAG,GAAG,GAAG,CAAC;MACxB,IAAI,QAAQ,EAAE,GAAG,IAAI,CAAC,CAAC;MACvB,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;MAC1B,MAAM,GAAG,IAAI,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,QAAQ,CAAA,CAAE,CAAC,SAAS,CAAC,CAAC,CAAC;MACpE,IAAI,QAAQ,EAAE,MAAM,GAAG,GAAG,GAAG,MAAM;IACpC;GACF,MAAM;IACL,IAAI,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAA,CAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9C,IAAI,CAAC,GAAG,EAAE,EAAE;MACV,CAAC,IAAI,EAAE;MACP,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;MACtB,MAAM,GAAG,GAAG,CAAC,QAAQ,CAAA,CAAE,GAAG,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;IACrD;EACF;EAED,OAAO,MAAM;AACf,CAAC;AAED,OAAO,IAAM,WAAW,GAAG,SAAA,CAAC,CAAS,EAAA;EAAK,OAAA,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;AAAnC,CAAmC;AAE7E;;;;;;;;;;;AAWG;AACH,OAAO,IAAM,QAAQ,GAAG,SAAA,CAAC,CAAS,EAAA;EAChC,IAAM,KAAK,GAAG,IAAI,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;EAC5C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACtC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,CAAE;EAC7C;EACD,OAAO,KAAK;AACd,CAAC","sourceRoot":"","sourcesContent":["// tslint:disable radix\n/**\n * Converts a number to its string representation in decimal. This function\n * differs from simply converting a number to a string with `.toString()`\n * because this function's output string will **not** contain exponential\n * notation.\n *\n * Credit: https://stackoverflow.com/a/46545519\n */\nexport var numberToString = function (num) {\n    var numStr = String(num);\n    if (Math.abs(num) < 1.0) {\n        var e = parseInt(num.toString().split('e-')[1]);\n        if (e) {\n            var negative = num < 0;\n            if (negative)\n                num *= -1;\n            num *= Math.pow(10, e - 1);\n            numStr = '0.' + new Array(e).join('0') + num.toString().substring(2);\n            if (negative)\n                numStr = '-' + numStr;\n        }\n    }\n    else {\n        var e = parseInt(num.toString().split('+')[1]);\n        if (e > 20) {\n            e -= 20;\n            num /= Math.pow(10, e);\n            numStr = num.toString() + new Array(e + 1).join('0');\n        }\n    }\n    return numStr;\n};\nexport var sizeInBytes = function (n) { return Math.ceil(n.toString(2).length / 8); };\n/**\n * Converts a number into its constituent bytes and returns them as\n * a number[].\n *\n * Returns most significant byte as first element in array. It may be necessary\n * to call .reverse() to get the bits in the desired order.\n *\n * Example:\n *   bytesFor(0x02A41E) => [ 0b10, 0b10100100, 0b11110 ]\n *\n * Credit for algorithm: https://stackoverflow.com/a/1936865\n */\nexport var bytesFor = function (n) {\n    var bytes = new Uint8Array(sizeInBytes(n));\n    for (var i = 1; i <= bytes.length; i++) {\n        bytes[i - 1] = n >> ((bytes.length - i) * 8);\n    }\n    return bytes;\n};\n//# sourceMappingURL=numbers.js.map"]},"metadata":{},"sourceType":"module"}