{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { PDFName, PDFArray, PDFDict, PDFHexString } from \"../core\";\n/**\n * Represents JavaScript that has been embedded in a [[PDFDocument]].\n */\nvar PDFJavaScript = /** @class */function () {\n  function PDFJavaScript(ref, doc, embedder) {\n    this.alreadyEmbedded = false;\n    this.ref = ref;\n    this.doc = doc;\n    this.embedder = embedder;\n  }\n  /**\n   * > **NOTE:** You probably don't need to call this method directly. The\n   * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n   * > automatically ensure all JavaScripts get embedded.\n   *\n   * Embed this JavaScript in its document.\n   *\n   * @returns Resolves when the embedding is complete.\n   */\n  PDFJavaScript.prototype.embed = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, catalog, context, ref, Names, Javascript, JSNames;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!!this.alreadyEmbedded) return [3 /*break*/, 2];\n            _a = this.doc, catalog = _a.catalog, context = _a.context;\n            return [4 /*yield*/, this.embedder.embedIntoContext(this.doc.context, this.ref)];\n          case 1:\n            ref = _b.sent();\n            if (!catalog.has(PDFName.of('Names'))) {\n              catalog.set(PDFName.of('Names'), context.obj({}));\n            }\n            Names = catalog.lookup(PDFName.of('Names'), PDFDict);\n            if (!Names.has(PDFName.of('JavaScript'))) {\n              Names.set(PDFName.of('JavaScript'), context.obj({}));\n            }\n            Javascript = Names.lookup(PDFName.of('JavaScript'), PDFDict);\n            if (!Javascript.has(PDFName.of('Names'))) {\n              Javascript.set(PDFName.of('Names'), context.obj([]));\n            }\n            JSNames = Javascript.lookup(PDFName.of('Names'), PDFArray);\n            JSNames.push(PDFHexString.fromText(this.embedder.scriptName));\n            JSNames.push(ref);\n            this.alreadyEmbedded = true;\n            _b.label = 2;\n          case 2:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.addJavaScript]] method, which will\n   * create instances of [[PDFJavaScript]] for you.\n   *\n   * Create an instance of [[PDFJavaScript]] from an existing ref and script\n   *\n   * @param ref The unique reference for this script.\n   * @param doc The document to which the script will belong.\n   * @param embedder The embedder that will be used to embed the script.\n   */\n  PDFJavaScript.of = function (ref, doc, embedder) {\n    return new PDFJavaScript(ref, doc, embedder);\n  };\n  return PDFJavaScript;\n}();\nexport default PDFJavaScript;","map":{"version":3,"sources":["../../src/api/PDFJavaScript.ts"],"names":[],"mappings":";AAGA,SAAS,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,YAAY,QAAU,SAAA;AAE3D;;AAEG;AACH,IAAA,aAAA,GAAA,aAAA,YAAA;EAwBE,SAAA,aAAA,CACE,GAAW,EACX,GAAgB,EAChB,QAA4B,EAAA;IANtB,IAAA,CAAA,eAAe,GAAG,KAAK;IAQ7B,IAAI,CAAC,GAAG,GAAG,GAAG;IACd,IAAI,CAAC,GAAG,GAAG,GAAG;IACd,IAAI,CAAC,QAAQ,GAAG,QAAQ;EAC1B;EAEA;;;;;;;;AAQG;EACG,aAAA,CAAA,SAAA,CAAA,KAAK,GAAX,YAAA;;;;;;iBACM,CAAC,IAAI,CAAC,eAAe,EAArB,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;YACI,EAAA,GAAuB,IAAI,CAAC,GAAG,EAA7B,OAAO,GAAA,EAAA,CAAA,OAAA,EAAE,OAAO,GAAA,EAAA,CAAA,OAAA;YAEZ,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAC9C,IAAI,CAAC,GAAG,CAAC,OAAO,EAChB,IAAI,CAAC,GAAG,CACT,CAAA;;YAHK,GAAG,GAAG,EAAA,CAAA,IAAA,CAAA,CAGX;YAED,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,EAAE;cACrC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAA,CAAE,CAAC,CAAC;YAClD;YACK,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC;YAE1D,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC,EAAE;cACxC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,YAAY,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAA,CAAE,CAAC,CAAC;YACrD;YACK,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,YAAY,CAAC,EAAE,OAAO,CAAC;YAElE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,EAAE;cACxC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YACrD;YACK,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,QAAQ,CAAC;YAEhE,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YAC7D,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC;YAEjB,IAAI,CAAC,eAAe,GAAG,IAAI;;;;;;;GAE9B;EAvED;;;;;;;;;;AAUG;EACI,aAAA,CAAA,EAAE,GAAG,UAAC,GAAW,EAAE,GAAgB,EAAE,QAA4B,EAAA;IACtE,OAAA,IAAI,aAAa,CAAC,GAAG,EAAE,GAAG,EAAE,QAAQ,CAAC;EAArC,CAAqC;EA4DzC,OAAA,aAAC;CAAA,CAAA,CAAA;eAzEoB,aAAa","sourceRoot":"","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport { PDFName, PDFArray, PDFDict, PDFHexString } from \"../core\";\n/**\n * Represents JavaScript that has been embedded in a [[PDFDocument]].\n */\nvar PDFJavaScript = /** @class */ (function () {\n    function PDFJavaScript(ref, doc, embedder) {\n        this.alreadyEmbedded = false;\n        this.ref = ref;\n        this.doc = doc;\n        this.embedder = embedder;\n    }\n    /**\n     * > **NOTE:** You probably don't need to call this method directly. The\n     * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n     * > automatically ensure all JavaScripts get embedded.\n     *\n     * Embed this JavaScript in its document.\n     *\n     * @returns Resolves when the embedding is complete.\n     */\n    PDFJavaScript.prototype.embed = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, catalog, context, ref, Names, Javascript, JSNames;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!!this.alreadyEmbedded) return [3 /*break*/, 2];\n                        _a = this.doc, catalog = _a.catalog, context = _a.context;\n                        return [4 /*yield*/, this.embedder.embedIntoContext(this.doc.context, this.ref)];\n                    case 1:\n                        ref = _b.sent();\n                        if (!catalog.has(PDFName.of('Names'))) {\n                            catalog.set(PDFName.of('Names'), context.obj({}));\n                        }\n                        Names = catalog.lookup(PDFName.of('Names'), PDFDict);\n                        if (!Names.has(PDFName.of('JavaScript'))) {\n                            Names.set(PDFName.of('JavaScript'), context.obj({}));\n                        }\n                        Javascript = Names.lookup(PDFName.of('JavaScript'), PDFDict);\n                        if (!Javascript.has(PDFName.of('Names'))) {\n                            Javascript.set(PDFName.of('Names'), context.obj([]));\n                        }\n                        JSNames = Javascript.lookup(PDFName.of('Names'), PDFArray);\n                        JSNames.push(PDFHexString.fromText(this.embedder.scriptName));\n                        JSNames.push(ref);\n                        this.alreadyEmbedded = true;\n                        _b.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * > **NOTE:** You probably don't want to call this method directly. Instead,\n     * > consider using the [[PDFDocument.addJavaScript]] method, which will\n     * create instances of [[PDFJavaScript]] for you.\n     *\n     * Create an instance of [[PDFJavaScript]] from an existing ref and script\n     *\n     * @param ref The unique reference for this script.\n     * @param doc The document to which the script will belong.\n     * @param embedder The embedder that will be used to embed the script.\n     */\n    PDFJavaScript.of = function (ref, doc, embedder) {\n        return new PDFJavaScript(ref, doc, embedder);\n    };\n    return PDFJavaScript;\n}());\nexport default PDFJavaScript;\n//# sourceMappingURL=PDFJavaScript.js.map"]},"metadata":{},"sourceType":"module"}