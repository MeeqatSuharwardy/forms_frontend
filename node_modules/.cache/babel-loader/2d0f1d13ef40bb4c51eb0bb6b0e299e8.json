{"ast":null,"code":"import { setFillingCmykColor, setFillingGrayscaleColor, setFillingRgbColor, setStrokingCmykColor, setStrokingGrayscaleColor, setStrokingRgbColor } from \"./operators\";\nimport { assertRange, error } from \"../utils\";\nexport var ColorTypes;\n(function (ColorTypes) {\n  ColorTypes[\"Grayscale\"] = \"Grayscale\";\n  ColorTypes[\"RGB\"] = \"RGB\";\n  ColorTypes[\"CMYK\"] = \"CMYK\";\n})(ColorTypes || (ColorTypes = {}));\nexport var grayscale = function (gray) {\n  assertRange(gray, 'gray', 0.0, 1.0);\n  return {\n    type: ColorTypes.Grayscale,\n    gray: gray\n  };\n};\nexport var rgb = function (red, green, blue) {\n  assertRange(red, 'red', 0, 1);\n  assertRange(green, 'green', 0, 1);\n  assertRange(blue, 'blue', 0, 1);\n  return {\n    type: ColorTypes.RGB,\n    red: red,\n    green: green,\n    blue: blue\n  };\n};\nexport var cmyk = function (cyan, magenta, yellow, key) {\n  assertRange(cyan, 'cyan', 0, 1);\n  assertRange(magenta, 'magenta', 0, 1);\n  assertRange(yellow, 'yellow', 0, 1);\n  assertRange(key, 'key', 0, 1);\n  return {\n    type: ColorTypes.CMYK,\n    cyan: cyan,\n    magenta: magenta,\n    yellow: yellow,\n    key: key\n  };\n};\nvar Grayscale = ColorTypes.Grayscale,\n  RGB = ColorTypes.RGB,\n  CMYK = ColorTypes.CMYK;\n// prettier-ignore\nexport var setFillingColor = function (color) {\n  return color.type === Grayscale ? setFillingGrayscaleColor(color.gray) : color.type === RGB ? setFillingRgbColor(color.red, color.green, color.blue) : color.type === CMYK ? setFillingCmykColor(color.cyan, color.magenta, color.yellow, color.key) : error(\"Invalid color: \" + JSON.stringify(color));\n};\n// prettier-ignore\nexport var setStrokingColor = function (color) {\n  return color.type === Grayscale ? setStrokingGrayscaleColor(color.gray) : color.type === RGB ? setStrokingRgbColor(color.red, color.green, color.blue) : color.type === CMYK ? setStrokingCmykColor(color.cyan, color.magenta, color.yellow, color.key) : error(\"Invalid color: \" + JSON.stringify(color));\n};\n// prettier-ignore\nexport var componentsToColor = function (comps, scale) {\n  if (scale === void 0) {\n    scale = 1;\n  }\n  return (comps === null || comps === void 0 ? void 0 : comps.length) === 1 ? grayscale(comps[0] * scale) : (comps === null || comps === void 0 ? void 0 : comps.length) === 3 ? rgb(comps[0] * scale, comps[1] * scale, comps[2] * scale) : (comps === null || comps === void 0 ? void 0 : comps.length) === 4 ? cmyk(comps[0] * scale, comps[1] * scale, comps[2] * scale, comps[3] * scale) : undefined;\n};\n// prettier-ignore\nexport var colorToComponents = function (color) {\n  return color.type === Grayscale ? [color.gray] : color.type === RGB ? [color.red, color.green, color.blue] : color.type === CMYK ? [color.cyan, color.magenta, color.yellow, color.key] : error(\"Invalid color: \" + JSON.stringify(color));\n};","map":{"version":3,"sources":["../../src/api/colors.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { setFillingCmykColor, setFillingGrayscaleColor, setFillingRgbColor, setStrokingCmykColor, setStrokingGrayscaleColor, setStrokingRgbColor, } from \"./operators\";\nimport { assertRange, error } from \"../utils\";\nexport var ColorTypes;\n(function (ColorTypes) {\n    ColorTypes[\"Grayscale\"] = \"Grayscale\";\n    ColorTypes[\"RGB\"] = \"RGB\";\n    ColorTypes[\"CMYK\"] = \"CMYK\";\n})(ColorTypes || (ColorTypes = {}));\nexport var grayscale = function (gray) {\n    assertRange(gray, 'gray', 0.0, 1.0);\n    return { type: ColorTypes.Grayscale, gray: gray };\n};\nexport var rgb = function (red, green, blue) {\n    assertRange(red, 'red', 0, 1);\n    assertRange(green, 'green', 0, 1);\n    assertRange(blue, 'blue', 0, 1);\n    return { type: ColorTypes.RGB, red: red, green: green, blue: blue };\n};\nexport var cmyk = function (cyan, magenta, yellow, key) {\n    assertRange(cyan, 'cyan', 0, 1);\n    assertRange(magenta, 'magenta', 0, 1);\n    assertRange(yellow, 'yellow', 0, 1);\n    assertRange(key, 'key', 0, 1);\n    return { type: ColorTypes.CMYK, cyan: cyan, magenta: magenta, yellow: yellow, key: key };\n};\nvar Grayscale = ColorTypes.Grayscale, RGB = ColorTypes.RGB, CMYK = ColorTypes.CMYK;\n// prettier-ignore\nexport var setFillingColor = function (color) {\n    return color.type === Grayscale ? setFillingGrayscaleColor(color.gray)\n        : color.type === RGB ? setFillingRgbColor(color.red, color.green, color.blue)\n            : color.type === CMYK ? setFillingCmykColor(color.cyan, color.magenta, color.yellow, color.key)\n                : error(\"Invalid color: \" + JSON.stringify(color));\n};\n// prettier-ignore\nexport var setStrokingColor = function (color) {\n    return color.type === Grayscale ? setStrokingGrayscaleColor(color.gray)\n        : color.type === RGB ? setStrokingRgbColor(color.red, color.green, color.blue)\n            : color.type === CMYK ? setStrokingCmykColor(color.cyan, color.magenta, color.yellow, color.key)\n                : error(\"Invalid color: \" + JSON.stringify(color));\n};\n// prettier-ignore\nexport var componentsToColor = function (comps, scale) {\n    if (scale === void 0) { scale = 1; }\n    return ((comps === null || comps === void 0 ? void 0 : comps.length) === 1 ? grayscale(comps[0] * scale)\n        : (comps === null || comps === void 0 ? void 0 : comps.length) === 3 ? rgb(comps[0] * scale, comps[1] * scale, comps[2] * scale)\n            : (comps === null || comps === void 0 ? void 0 : comps.length) === 4 ? cmyk(comps[0] * scale, comps[1] * scale, comps[2] * scale, comps[3] * scale)\n                : undefined);\n};\n// prettier-ignore\nexport var colorToComponents = function (color) {\n    return color.type === Grayscale ? [color.gray]\n        : color.type === RGB ? [color.red, color.green, color.blue]\n            : color.type === CMYK ? [color.cyan, color.magenta, color.yellow, color.key]\n                : error(\"Invalid color: \" + JSON.stringify(color));\n};\n//# sourceMappingURL=colors.js.map"]},"metadata":{},"sourceType":"module"}