{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFRef from \"../objects/PDFRef\";\nimport PDFFlateStream from \"./PDFFlateStream\";\nimport { bytesFor, Cache, reverseArray, sizeInBytes, sum } from \"../../utils\";\nexport var EntryType;\n(function (EntryType) {\n  EntryType[EntryType[\"Deleted\"] = 0] = \"Deleted\";\n  EntryType[EntryType[\"Uncompressed\"] = 1] = \"Uncompressed\";\n  EntryType[EntryType[\"Compressed\"] = 2] = \"Compressed\";\n})(EntryType || (EntryType = {}));\n/**\n * Entries should be added using the [[addDeletedEntry]],\n * [[addUncompressedEntry]], and [[addCompressedEntry]] methods\n * **in order of ascending object number**.\n */\nvar PDFCrossRefStream = /** @class */function (_super) {\n  __extends(PDFCrossRefStream, _super);\n  function PDFCrossRefStream(dict, entries, encode) {\n    if (encode === void 0) {\n      encode = true;\n    }\n    var _this = _super.call(this, dict, encode) || this;\n    // Returns an array of integer pairs for each subsection of the cross ref\n    // section, where each integer pair represents:\n    //   firstObjectNumber(OfSection), length(OfSection)\n    _this.computeIndex = function () {\n      var subsections = [];\n      var subsectionLength = 0;\n      for (var idx = 0, len = _this.entries.length; idx < len; idx++) {\n        var currEntry = _this.entries[idx];\n        var prevEntry = _this.entries[idx - 1];\n        if (idx === 0) {\n          subsections.push(currEntry.ref.objectNumber);\n        } else if (currEntry.ref.objectNumber - prevEntry.ref.objectNumber > 1) {\n          subsections.push(subsectionLength);\n          subsections.push(currEntry.ref.objectNumber);\n          subsectionLength = 0;\n        }\n        subsectionLength += 1;\n      }\n      subsections.push(subsectionLength);\n      return subsections;\n    };\n    _this.computeEntryTuples = function () {\n      var entryTuples = new Array(_this.entries.length);\n      for (var idx = 0, len = _this.entries.length; idx < len; idx++) {\n        var entry = _this.entries[idx];\n        if (entry.type === EntryType.Deleted) {\n          var type = entry.type,\n            nextFreeObjectNumber = entry.nextFreeObjectNumber,\n            ref = entry.ref;\n          entryTuples[idx] = [type, nextFreeObjectNumber, ref.generationNumber];\n        }\n        if (entry.type === EntryType.Uncompressed) {\n          var type = entry.type,\n            offset = entry.offset,\n            ref = entry.ref;\n          entryTuples[idx] = [type, offset, ref.generationNumber];\n        }\n        if (entry.type === EntryType.Compressed) {\n          var type = entry.type,\n            objectStreamRef = entry.objectStreamRef,\n            index = entry.index;\n          entryTuples[idx] = [type, objectStreamRef.objectNumber, index];\n        }\n      }\n      return entryTuples;\n    };\n    _this.computeMaxEntryByteWidths = function () {\n      var entryTuples = _this.entryTuplesCache.access();\n      var widths = [0, 0, 0];\n      for (var idx = 0, len = entryTuples.length; idx < len; idx++) {\n        var _a = entryTuples[idx],\n          first = _a[0],\n          second = _a[1],\n          third = _a[2];\n        var firstSize = sizeInBytes(first);\n        var secondSize = sizeInBytes(second);\n        var thirdSize = sizeInBytes(third);\n        if (firstSize > widths[0]) widths[0] = firstSize;\n        if (secondSize > widths[1]) widths[1] = secondSize;\n        if (thirdSize > widths[2]) widths[2] = thirdSize;\n      }\n      return widths;\n    };\n    _this.entries = entries || [];\n    _this.entryTuplesCache = Cache.populatedBy(_this.computeEntryTuples);\n    _this.maxByteWidthsCache = Cache.populatedBy(_this.computeMaxEntryByteWidths);\n    _this.indexCache = Cache.populatedBy(_this.computeIndex);\n    dict.set(PDFName.of('Type'), PDFName.of('XRef'));\n    return _this;\n  }\n  PDFCrossRefStream.prototype.addDeletedEntry = function (ref, nextFreeObjectNumber) {\n    var type = EntryType.Deleted;\n    this.entries.push({\n      type: type,\n      ref: ref,\n      nextFreeObjectNumber: nextFreeObjectNumber\n    });\n    this.entryTuplesCache.invalidate();\n    this.maxByteWidthsCache.invalidate();\n    this.indexCache.invalidate();\n    this.contentsCache.invalidate();\n  };\n  PDFCrossRefStream.prototype.addUncompressedEntry = function (ref, offset) {\n    var type = EntryType.Uncompressed;\n    this.entries.push({\n      type: type,\n      ref: ref,\n      offset: offset\n    });\n    this.entryTuplesCache.invalidate();\n    this.maxByteWidthsCache.invalidate();\n    this.indexCache.invalidate();\n    this.contentsCache.invalidate();\n  };\n  PDFCrossRefStream.prototype.addCompressedEntry = function (ref, objectStreamRef, index) {\n    var type = EntryType.Compressed;\n    this.entries.push({\n      type: type,\n      ref: ref,\n      objectStreamRef: objectStreamRef,\n      index: index\n    });\n    this.entryTuplesCache.invalidate();\n    this.maxByteWidthsCache.invalidate();\n    this.indexCache.invalidate();\n    this.contentsCache.invalidate();\n  };\n  PDFCrossRefStream.prototype.clone = function (context) {\n    var _a = this,\n      dict = _a.dict,\n      entries = _a.entries,\n      encode = _a.encode;\n    return PDFCrossRefStream.of(dict.clone(context), entries.slice(), encode);\n  };\n  PDFCrossRefStream.prototype.getContentsString = function () {\n    var entryTuples = this.entryTuplesCache.access();\n    var byteWidths = this.maxByteWidthsCache.access();\n    var value = '';\n    for (var entryIdx = 0, entriesLen = entryTuples.length; entryIdx < entriesLen; entryIdx++) {\n      var _a = entryTuples[entryIdx],\n        first = _a[0],\n        second = _a[1],\n        third = _a[2];\n      var firstBytes = reverseArray(bytesFor(first));\n      var secondBytes = reverseArray(bytesFor(second));\n      var thirdBytes = reverseArray(bytesFor(third));\n      for (var idx = byteWidths[0] - 1; idx >= 0; idx--) {\n        value += (firstBytes[idx] || 0).toString(2);\n      }\n      for (var idx = byteWidths[1] - 1; idx >= 0; idx--) {\n        value += (secondBytes[idx] || 0).toString(2);\n      }\n      for (var idx = byteWidths[2] - 1; idx >= 0; idx--) {\n        value += (thirdBytes[idx] || 0).toString(2);\n      }\n    }\n    return value;\n  };\n  PDFCrossRefStream.prototype.getUnencodedContents = function () {\n    var entryTuples = this.entryTuplesCache.access();\n    var byteWidths = this.maxByteWidthsCache.access();\n    var buffer = new Uint8Array(this.getUnencodedContentsSize());\n    var offset = 0;\n    for (var entryIdx = 0, entriesLen = entryTuples.length; entryIdx < entriesLen; entryIdx++) {\n      var _a = entryTuples[entryIdx],\n        first = _a[0],\n        second = _a[1],\n        third = _a[2];\n      var firstBytes = reverseArray(bytesFor(first));\n      var secondBytes = reverseArray(bytesFor(second));\n      var thirdBytes = reverseArray(bytesFor(third));\n      for (var idx = byteWidths[0] - 1; idx >= 0; idx--) {\n        buffer[offset++] = firstBytes[idx] || 0;\n      }\n      for (var idx = byteWidths[1] - 1; idx >= 0; idx--) {\n        buffer[offset++] = secondBytes[idx] || 0;\n      }\n      for (var idx = byteWidths[2] - 1; idx >= 0; idx--) {\n        buffer[offset++] = thirdBytes[idx] || 0;\n      }\n    }\n    return buffer;\n  };\n  PDFCrossRefStream.prototype.getUnencodedContentsSize = function () {\n    var byteWidths = this.maxByteWidthsCache.access();\n    var entryWidth = sum(byteWidths);\n    return entryWidth * this.entries.length;\n  };\n  PDFCrossRefStream.prototype.updateDict = function () {\n    _super.prototype.updateDict.call(this);\n    var byteWidths = this.maxByteWidthsCache.access();\n    var index = this.indexCache.access();\n    var context = this.dict.context;\n    this.dict.set(PDFName.of('W'), context.obj(byteWidths));\n    this.dict.set(PDFName.of('Index'), context.obj(index));\n  };\n  PDFCrossRefStream.create = function (dict, encode) {\n    if (encode === void 0) {\n      encode = true;\n    }\n    var stream = new PDFCrossRefStream(dict, [], encode);\n    stream.addDeletedEntry(PDFRef.of(0, 65535), 0);\n    return stream;\n  };\n  PDFCrossRefStream.of = function (dict, entries, encode) {\n    if (encode === void 0) {\n      encode = true;\n    }\n    return new PDFCrossRefStream(dict, entries, encode);\n  };\n  return PDFCrossRefStream;\n}(PDFFlateStream);\nexport default PDFCrossRefStream;","map":{"version":3,"sources":["../../../src/core/structures/PDFCrossRefStream.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFRef from \"../objects/PDFRef\";\nimport PDFFlateStream from \"./PDFFlateStream\";\nimport { bytesFor, Cache, reverseArray, sizeInBytes, sum } from \"../../utils\";\nexport var EntryType;\n(function (EntryType) {\n    EntryType[EntryType[\"Deleted\"] = 0] = \"Deleted\";\n    EntryType[EntryType[\"Uncompressed\"] = 1] = \"Uncompressed\";\n    EntryType[EntryType[\"Compressed\"] = 2] = \"Compressed\";\n})(EntryType || (EntryType = {}));\n/**\n * Entries should be added using the [[addDeletedEntry]],\n * [[addUncompressedEntry]], and [[addCompressedEntry]] methods\n * **in order of ascending object number**.\n */\nvar PDFCrossRefStream = /** @class */ (function (_super) {\n    __extends(PDFCrossRefStream, _super);\n    function PDFCrossRefStream(dict, entries, encode) {\n        if (encode === void 0) { encode = true; }\n        var _this = _super.call(this, dict, encode) || this;\n        // Returns an array of integer pairs for each subsection of the cross ref\n        // section, where each integer pair represents:\n        //   firstObjectNumber(OfSection), length(OfSection)\n        _this.computeIndex = function () {\n            var subsections = [];\n            var subsectionLength = 0;\n            for (var idx = 0, len = _this.entries.length; idx < len; idx++) {\n                var currEntry = _this.entries[idx];\n                var prevEntry = _this.entries[idx - 1];\n                if (idx === 0) {\n                    subsections.push(currEntry.ref.objectNumber);\n                }\n                else if (currEntry.ref.objectNumber - prevEntry.ref.objectNumber > 1) {\n                    subsections.push(subsectionLength);\n                    subsections.push(currEntry.ref.objectNumber);\n                    subsectionLength = 0;\n                }\n                subsectionLength += 1;\n            }\n            subsections.push(subsectionLength);\n            return subsections;\n        };\n        _this.computeEntryTuples = function () {\n            var entryTuples = new Array(_this.entries.length);\n            for (var idx = 0, len = _this.entries.length; idx < len; idx++) {\n                var entry = _this.entries[idx];\n                if (entry.type === EntryType.Deleted) {\n                    var type = entry.type, nextFreeObjectNumber = entry.nextFreeObjectNumber, ref = entry.ref;\n                    entryTuples[idx] = [type, nextFreeObjectNumber, ref.generationNumber];\n                }\n                if (entry.type === EntryType.Uncompressed) {\n                    var type = entry.type, offset = entry.offset, ref = entry.ref;\n                    entryTuples[idx] = [type, offset, ref.generationNumber];\n                }\n                if (entry.type === EntryType.Compressed) {\n                    var type = entry.type, objectStreamRef = entry.objectStreamRef, index = entry.index;\n                    entryTuples[idx] = [type, objectStreamRef.objectNumber, index];\n                }\n            }\n            return entryTuples;\n        };\n        _this.computeMaxEntryByteWidths = function () {\n            var entryTuples = _this.entryTuplesCache.access();\n            var widths = [0, 0, 0];\n            for (var idx = 0, len = entryTuples.length; idx < len; idx++) {\n                var _a = entryTuples[idx], first = _a[0], second = _a[1], third = _a[2];\n                var firstSize = sizeInBytes(first);\n                var secondSize = sizeInBytes(second);\n                var thirdSize = sizeInBytes(third);\n                if (firstSize > widths[0])\n                    widths[0] = firstSize;\n                if (secondSize > widths[1])\n                    widths[1] = secondSize;\n                if (thirdSize > widths[2])\n                    widths[2] = thirdSize;\n            }\n            return widths;\n        };\n        _this.entries = entries || [];\n        _this.entryTuplesCache = Cache.populatedBy(_this.computeEntryTuples);\n        _this.maxByteWidthsCache = Cache.populatedBy(_this.computeMaxEntryByteWidths);\n        _this.indexCache = Cache.populatedBy(_this.computeIndex);\n        dict.set(PDFName.of('Type'), PDFName.of('XRef'));\n        return _this;\n    }\n    PDFCrossRefStream.prototype.addDeletedEntry = function (ref, nextFreeObjectNumber) {\n        var type = EntryType.Deleted;\n        this.entries.push({ type: type, ref: ref, nextFreeObjectNumber: nextFreeObjectNumber });\n        this.entryTuplesCache.invalidate();\n        this.maxByteWidthsCache.invalidate();\n        this.indexCache.invalidate();\n        this.contentsCache.invalidate();\n    };\n    PDFCrossRefStream.prototype.addUncompressedEntry = function (ref, offset) {\n        var type = EntryType.Uncompressed;\n        this.entries.push({ type: type, ref: ref, offset: offset });\n        this.entryTuplesCache.invalidate();\n        this.maxByteWidthsCache.invalidate();\n        this.indexCache.invalidate();\n        this.contentsCache.invalidate();\n    };\n    PDFCrossRefStream.prototype.addCompressedEntry = function (ref, objectStreamRef, index) {\n        var type = EntryType.Compressed;\n        this.entries.push({ type: type, ref: ref, objectStreamRef: objectStreamRef, index: index });\n        this.entryTuplesCache.invalidate();\n        this.maxByteWidthsCache.invalidate();\n        this.indexCache.invalidate();\n        this.contentsCache.invalidate();\n    };\n    PDFCrossRefStream.prototype.clone = function (context) {\n        var _a = this, dict = _a.dict, entries = _a.entries, encode = _a.encode;\n        return PDFCrossRefStream.of(dict.clone(context), entries.slice(), encode);\n    };\n    PDFCrossRefStream.prototype.getContentsString = function () {\n        var entryTuples = this.entryTuplesCache.access();\n        var byteWidths = this.maxByteWidthsCache.access();\n        var value = '';\n        for (var entryIdx = 0, entriesLen = entryTuples.length; entryIdx < entriesLen; entryIdx++) {\n            var _a = entryTuples[entryIdx], first = _a[0], second = _a[1], third = _a[2];\n            var firstBytes = reverseArray(bytesFor(first));\n            var secondBytes = reverseArray(bytesFor(second));\n            var thirdBytes = reverseArray(bytesFor(third));\n            for (var idx = byteWidths[0] - 1; idx >= 0; idx--) {\n                value += (firstBytes[idx] || 0).toString(2);\n            }\n            for (var idx = byteWidths[1] - 1; idx >= 0; idx--) {\n                value += (secondBytes[idx] || 0).toString(2);\n            }\n            for (var idx = byteWidths[2] - 1; idx >= 0; idx--) {\n                value += (thirdBytes[idx] || 0).toString(2);\n            }\n        }\n        return value;\n    };\n    PDFCrossRefStream.prototype.getUnencodedContents = function () {\n        var entryTuples = this.entryTuplesCache.access();\n        var byteWidths = this.maxByteWidthsCache.access();\n        var buffer = new Uint8Array(this.getUnencodedContentsSize());\n        var offset = 0;\n        for (var entryIdx = 0, entriesLen = entryTuples.length; entryIdx < entriesLen; entryIdx++) {\n            var _a = entryTuples[entryIdx], first = _a[0], second = _a[1], third = _a[2];\n            var firstBytes = reverseArray(bytesFor(first));\n            var secondBytes = reverseArray(bytesFor(second));\n            var thirdBytes = reverseArray(bytesFor(third));\n            for (var idx = byteWidths[0] - 1; idx >= 0; idx--) {\n                buffer[offset++] = firstBytes[idx] || 0;\n            }\n            for (var idx = byteWidths[1] - 1; idx >= 0; idx--) {\n                buffer[offset++] = secondBytes[idx] || 0;\n            }\n            for (var idx = byteWidths[2] - 1; idx >= 0; idx--) {\n                buffer[offset++] = thirdBytes[idx] || 0;\n            }\n        }\n        return buffer;\n    };\n    PDFCrossRefStream.prototype.getUnencodedContentsSize = function () {\n        var byteWidths = this.maxByteWidthsCache.access();\n        var entryWidth = sum(byteWidths);\n        return entryWidth * this.entries.length;\n    };\n    PDFCrossRefStream.prototype.updateDict = function () {\n        _super.prototype.updateDict.call(this);\n        var byteWidths = this.maxByteWidthsCache.access();\n        var index = this.indexCache.access();\n        var context = this.dict.context;\n        this.dict.set(PDFName.of('W'), context.obj(byteWidths));\n        this.dict.set(PDFName.of('Index'), context.obj(index));\n    };\n    PDFCrossRefStream.create = function (dict, encode) {\n        if (encode === void 0) { encode = true; }\n        var stream = new PDFCrossRefStream(dict, [], encode);\n        stream.addDeletedEntry(PDFRef.of(0, 65535), 0);\n        return stream;\n    };\n    PDFCrossRefStream.of = function (dict, entries, encode) {\n        if (encode === void 0) { encode = true; }\n        return new PDFCrossRefStream(dict, entries, encode);\n    };\n    return PDFCrossRefStream;\n}(PDFFlateStream));\nexport default PDFCrossRefStream;\n//# sourceMappingURL=PDFCrossRefStream.js.map"]},"metadata":{},"sourceType":"module"}