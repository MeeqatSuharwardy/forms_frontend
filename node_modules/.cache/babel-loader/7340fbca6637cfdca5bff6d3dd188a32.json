{"ast":null,"code":"export var toCharCode = function (character) {\n  return character.charCodeAt(0);\n};\nexport var toCodePoint = function (character) {\n  return character.codePointAt(0);\n};\nexport var toHexStringOfMinLength = function (num, minLength) {\n  return padStart(num.toString(16), minLength, '0').toUpperCase();\n};\nexport var toHexString = function (num) {\n  return toHexStringOfMinLength(num, 2);\n};\nexport var charFromCode = function (code) {\n  return String.fromCharCode(code);\n};\nexport var charFromHexCode = function (hex) {\n  return charFromCode(parseInt(hex, 16));\n};\nexport var padStart = function (value, length, padChar) {\n  var padding = '';\n  for (var idx = 0, len = length - value.length; idx < len; idx++) {\n    padding += padChar;\n  }\n  return padding + value;\n};\nexport var copyStringIntoBuffer = function (str, buffer, offset) {\n  var length = str.length;\n  for (var idx = 0; idx < length; idx++) {\n    buffer[offset++] = str.charCodeAt(idx);\n  }\n  return length;\n};\nexport var addRandomSuffix = function (prefix, suffixLength) {\n  if (suffixLength === void 0) {\n    suffixLength = 4;\n  }\n  return prefix + \"-\" + Math.floor(Math.random() * Math.pow(10, suffixLength));\n};\nexport var escapeRegExp = function (str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n};\nexport var cleanText = function (text) {\n  return text.replace(/\\t|\\u0085|\\u2028|\\u2029/g, '    ').replace(/[\\b\\v]/g, '');\n};\nexport var escapedNewlineChars = ['\\\\n', '\\\\f', '\\\\r', '\\\\u000B'];\nexport var newlineChars = ['\\n', '\\f', '\\r', '\\u000B'];\nexport var isNewlineChar = function (text) {\n  return /^[\\n\\f\\r\\u000B]$/.test(text);\n};\nexport var lineSplit = function (text) {\n  return text.split(/[\\n\\f\\r\\u000B]/);\n};\nexport var mergeLines = function (text) {\n  return text.replace(/[\\n\\f\\r\\u000B]/g, ' ');\n};\n// JavaScript's String.charAt() method doesn work on strings containing UTF-16\n// characters (with high and low surrogate pairs), such as ðŸ’© (poo emoji). This\n// `charAtIndex()` function does.\n//\n// Credit: https://github.com/mathiasbynens/String.prototype.at/blob/master/at.js#L14-L48\nexport var charAtIndex = function (text, index) {\n  // Get the first code unit and code unit value\n  var cuFirst = text.charCodeAt(index);\n  var cuSecond;\n  var nextIndex = index + 1;\n  var length = 1;\n  if (\n  // Check if it's the start of a surrogate pair.\n  cuFirst >= 0xd800 && cuFirst <= 0xdbff &&\n  // high surrogate\n  text.length > nextIndex // there is a next code unit\n  ) {\n    cuSecond = text.charCodeAt(nextIndex);\n    if (cuSecond >= 0xdc00 && cuSecond <= 0xdfff) length = 2; // low surrogate\n  }\n  return [text.slice(index, index + length), length];\n};\nexport var charSplit = function (text) {\n  var chars = [];\n  for (var idx = 0, len = text.length; idx < len;) {\n    var _a = charAtIndex(text, idx),\n      c = _a[0],\n      cLen = _a[1];\n    chars.push(c);\n    idx += cLen;\n  }\n  return chars;\n};\nvar buildWordBreakRegex = function (wordBreaks) {\n  var newlineCharUnion = escapedNewlineChars.join('|');\n  var escapedRules = ['$'];\n  for (var idx = 0, len = wordBreaks.length; idx < len; idx++) {\n    var wordBreak = wordBreaks[idx];\n    if (isNewlineChar(wordBreak)) {\n      throw new TypeError(\"`wordBreak` must not include \" + newlineCharUnion);\n    }\n    escapedRules.push(wordBreak === '' ? '.' : escapeRegExp(wordBreak));\n  }\n  var breakRules = escapedRules.join('|');\n  return new RegExp(\"(\" + newlineCharUnion + \")|((.*?)(\" + breakRules + \"))\", 'gm');\n};\nexport var breakTextIntoLines = function (text, wordBreaks, maxWidth, computeWidthOfText) {\n  var regex = buildWordBreakRegex(wordBreaks);\n  var words = cleanText(text).match(regex);\n  var currLine = '';\n  var currWidth = 0;\n  var lines = [];\n  var pushCurrLine = function () {\n    if (currLine !== '') lines.push(currLine);\n    currLine = '';\n    currWidth = 0;\n  };\n  for (var idx = 0, len = words.length; idx < len; idx++) {\n    var word = words[idx];\n    if (isNewlineChar(word)) {\n      pushCurrLine();\n    } else {\n      var width = computeWidthOfText(word);\n      if (currWidth + width > maxWidth) pushCurrLine();\n      currLine += word;\n      currWidth += width;\n    }\n  }\n  pushCurrLine();\n  return lines;\n};\n// See section \"7.9.4 Dates\" of the PDF specification\nvar dateRegex = /^D:(\\d\\d\\d\\d)(\\d\\d)?(\\d\\d)?(\\d\\d)?(\\d\\d)?(\\d\\d)?([+\\-Z])?(\\d\\d)?'?(\\d\\d)?'?$/;\nexport var parseDate = function (dateStr) {\n  var match = dateStr.match(dateRegex);\n  if (!match) return undefined;\n  var year = match[1],\n    _a = match[2],\n    month = _a === void 0 ? '01' : _a,\n    _b = match[3],\n    day = _b === void 0 ? '01' : _b,\n    _c = match[4],\n    hours = _c === void 0 ? '00' : _c,\n    _d = match[5],\n    mins = _d === void 0 ? '00' : _d,\n    _e = match[6],\n    secs = _e === void 0 ? '00' : _e,\n    _f = match[7],\n    offsetSign = _f === void 0 ? 'Z' : _f,\n    _g = match[8],\n    offsetHours = _g === void 0 ? '00' : _g,\n    _h = match[9],\n    offsetMins = _h === void 0 ? '00' : _h;\n  // http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15\n  var tzOffset = offsetSign === 'Z' ? 'Z' : \"\" + offsetSign + offsetHours + \":\" + offsetMins;\n  var date = new Date(year + \"-\" + month + \"-\" + day + \"T\" + hours + \":\" + mins + \":\" + secs + tzOffset);\n  return date;\n};\nexport var findLastMatch = function (value, regex) {\n  var _a;\n  var position = 0;\n  var lastMatch;\n  while (position < value.length) {\n    var match = value.substring(position).match(regex);\n    if (!match) return {\n      match: lastMatch,\n      pos: position\n    };\n    lastMatch = match;\n    position += ((_a = match.index) !== null && _a !== void 0 ? _a : 0) + match[0].length;\n  }\n  return {\n    match: lastMatch,\n    pos: position\n  };\n};","map":{"version":3,"sources":["../../src/utils/strings.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["export var toCharCode = function (character) { return character.charCodeAt(0); };\nexport var toCodePoint = function (character) { return character.codePointAt(0); };\nexport var toHexStringOfMinLength = function (num, minLength) {\n    return padStart(num.toString(16), minLength, '0').toUpperCase();\n};\nexport var toHexString = function (num) { return toHexStringOfMinLength(num, 2); };\nexport var charFromCode = function (code) { return String.fromCharCode(code); };\nexport var charFromHexCode = function (hex) { return charFromCode(parseInt(hex, 16)); };\nexport var padStart = function (value, length, padChar) {\n    var padding = '';\n    for (var idx = 0, len = length - value.length; idx < len; idx++) {\n        padding += padChar;\n    }\n    return padding + value;\n};\nexport var copyStringIntoBuffer = function (str, buffer, offset) {\n    var length = str.length;\n    for (var idx = 0; idx < length; idx++) {\n        buffer[offset++] = str.charCodeAt(idx);\n    }\n    return length;\n};\nexport var addRandomSuffix = function (prefix, suffixLength) {\n    if (suffixLength === void 0) { suffixLength = 4; }\n    return prefix + \"-\" + Math.floor(Math.random() * Math.pow(10, suffixLength));\n};\nexport var escapeRegExp = function (str) {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n};\nexport var cleanText = function (text) {\n    return text.replace(/\\t|\\u0085|\\u2028|\\u2029/g, '    ').replace(/[\\b\\v]/g, '');\n};\nexport var escapedNewlineChars = ['\\\\n', '\\\\f', '\\\\r', '\\\\u000B'];\nexport var newlineChars = ['\\n', '\\f', '\\r', '\\u000B'];\nexport var isNewlineChar = function (text) { return /^[\\n\\f\\r\\u000B]$/.test(text); };\nexport var lineSplit = function (text) { return text.split(/[\\n\\f\\r\\u000B]/); };\nexport var mergeLines = function (text) {\n    return text.replace(/[\\n\\f\\r\\u000B]/g, ' ');\n};\n// JavaScript's String.charAt() method doesn work on strings containing UTF-16\n// characters (with high and low surrogate pairs), such as ðŸ’© (poo emoji). This\n// `charAtIndex()` function does.\n//\n// Credit: https://github.com/mathiasbynens/String.prototype.at/blob/master/at.js#L14-L48\nexport var charAtIndex = function (text, index) {\n    // Get the first code unit and code unit value\n    var cuFirst = text.charCodeAt(index);\n    var cuSecond;\n    var nextIndex = index + 1;\n    var length = 1;\n    if (\n    // Check if it's the start of a surrogate pair.\n    cuFirst >= 0xd800 &&\n        cuFirst <= 0xdbff && // high surrogate\n        text.length > nextIndex // there is a next code unit\n    ) {\n        cuSecond = text.charCodeAt(nextIndex);\n        if (cuSecond >= 0xdc00 && cuSecond <= 0xdfff)\n            length = 2; // low surrogate\n    }\n    return [text.slice(index, index + length), length];\n};\nexport var charSplit = function (text) {\n    var chars = [];\n    for (var idx = 0, len = text.length; idx < len;) {\n        var _a = charAtIndex(text, idx), c = _a[0], cLen = _a[1];\n        chars.push(c);\n        idx += cLen;\n    }\n    return chars;\n};\nvar buildWordBreakRegex = function (wordBreaks) {\n    var newlineCharUnion = escapedNewlineChars.join('|');\n    var escapedRules = ['$'];\n    for (var idx = 0, len = wordBreaks.length; idx < len; idx++) {\n        var wordBreak = wordBreaks[idx];\n        if (isNewlineChar(wordBreak)) {\n            throw new TypeError(\"`wordBreak` must not include \" + newlineCharUnion);\n        }\n        escapedRules.push(wordBreak === '' ? '.' : escapeRegExp(wordBreak));\n    }\n    var breakRules = escapedRules.join('|');\n    return new RegExp(\"(\" + newlineCharUnion + \")|((.*?)(\" + breakRules + \"))\", 'gm');\n};\nexport var breakTextIntoLines = function (text, wordBreaks, maxWidth, computeWidthOfText) {\n    var regex = buildWordBreakRegex(wordBreaks);\n    var words = cleanText(text).match(regex);\n    var currLine = '';\n    var currWidth = 0;\n    var lines = [];\n    var pushCurrLine = function () {\n        if (currLine !== '')\n            lines.push(currLine);\n        currLine = '';\n        currWidth = 0;\n    };\n    for (var idx = 0, len = words.length; idx < len; idx++) {\n        var word = words[idx];\n        if (isNewlineChar(word)) {\n            pushCurrLine();\n        }\n        else {\n            var width = computeWidthOfText(word);\n            if (currWidth + width > maxWidth)\n                pushCurrLine();\n            currLine += word;\n            currWidth += width;\n        }\n    }\n    pushCurrLine();\n    return lines;\n};\n// See section \"7.9.4 Dates\" of the PDF specification\nvar dateRegex = /^D:(\\d\\d\\d\\d)(\\d\\d)?(\\d\\d)?(\\d\\d)?(\\d\\d)?(\\d\\d)?([+\\-Z])?(\\d\\d)?'?(\\d\\d)?'?$/;\nexport var parseDate = function (dateStr) {\n    var match = dateStr.match(dateRegex);\n    if (!match)\n        return undefined;\n    var year = match[1], _a = match[2], month = _a === void 0 ? '01' : _a, _b = match[3], day = _b === void 0 ? '01' : _b, _c = match[4], hours = _c === void 0 ? '00' : _c, _d = match[5], mins = _d === void 0 ? '00' : _d, _e = match[6], secs = _e === void 0 ? '00' : _e, _f = match[7], offsetSign = _f === void 0 ? 'Z' : _f, _g = match[8], offsetHours = _g === void 0 ? '00' : _g, _h = match[9], offsetMins = _h === void 0 ? '00' : _h;\n    // http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15\n    var tzOffset = offsetSign === 'Z' ? 'Z' : \"\" + offsetSign + offsetHours + \":\" + offsetMins;\n    var date = new Date(year + \"-\" + month + \"-\" + day + \"T\" + hours + \":\" + mins + \":\" + secs + tzOffset);\n    return date;\n};\nexport var findLastMatch = function (value, regex) {\n    var _a;\n    var position = 0;\n    var lastMatch;\n    while (position < value.length) {\n        var match = value.substring(position).match(regex);\n        if (!match)\n            return { match: lastMatch, pos: position };\n        lastMatch = match;\n        position += ((_a = match.index) !== null && _a !== void 0 ? _a : 0) + match[0].length;\n    }\n    return { match: lastMatch, pos: position };\n};\n//# sourceMappingURL=strings.js.map"]},"metadata":{},"sourceType":"module"}