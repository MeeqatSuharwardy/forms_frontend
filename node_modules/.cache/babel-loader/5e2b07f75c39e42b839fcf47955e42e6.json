{"ast":null,"code":"import { decodeFromBase64DataUri } from \"./base64\";\nimport { charFromCode } from \"./strings\";\nexport var last = function (array) {\n  return array[array.length - 1];\n};\n// export const dropLast = <T>(array: T[]): T[] =>\n// array.slice(0, array.length - 1);\nexport var typedArrayFor = function (value) {\n  if (value instanceof Uint8Array) return value;\n  var length = value.length;\n  var typedArray = new Uint8Array(length);\n  for (var idx = 0; idx < length; idx++) {\n    typedArray[idx] = value.charCodeAt(idx);\n  }\n  return typedArray;\n};\nexport var mergeIntoTypedArray = function () {\n  var arrays = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    arrays[_i] = arguments[_i];\n  }\n  var arrayCount = arrays.length;\n  var typedArrays = [];\n  for (var idx = 0; idx < arrayCount; idx++) {\n    var element = arrays[idx];\n    typedArrays[idx] = element instanceof Uint8Array ? element : typedArrayFor(element);\n  }\n  var totalSize = 0;\n  for (var idx = 0; idx < arrayCount; idx++) {\n    totalSize += arrays[idx].length;\n  }\n  var merged = new Uint8Array(totalSize);\n  var offset = 0;\n  for (var arrIdx = 0; arrIdx < arrayCount; arrIdx++) {\n    var arr = typedArrays[arrIdx];\n    for (var byteIdx = 0, arrLen = arr.length; byteIdx < arrLen; byteIdx++) {\n      merged[offset++] = arr[byteIdx];\n    }\n  }\n  return merged;\n};\nexport var mergeUint8Arrays = function (arrays) {\n  var totalSize = 0;\n  for (var idx = 0, len = arrays.length; idx < len; idx++) {\n    totalSize += arrays[idx].length;\n  }\n  var mergedBuffer = new Uint8Array(totalSize);\n  var offset = 0;\n  for (var idx = 0, len = arrays.length; idx < len; idx++) {\n    var array = arrays[idx];\n    mergedBuffer.set(array, offset);\n    offset += array.length;\n  }\n  return mergedBuffer;\n};\nexport var arrayAsString = function (array) {\n  var str = '';\n  for (var idx = 0, len = array.length; idx < len; idx++) {\n    str += charFromCode(array[idx]);\n  }\n  return str;\n};\nexport var byAscendingId = function (a, b) {\n  return a.id - b.id;\n};\nexport var sortedUniq = function (array, indexer) {\n  var uniq = [];\n  for (var idx = 0, len = array.length; idx < len; idx++) {\n    var curr = array[idx];\n    var prev = array[idx - 1];\n    if (idx === 0 || indexer(curr) !== indexer(prev)) {\n      uniq.push(curr);\n    }\n  }\n  return uniq;\n};\n// Arrays and TypedArrays in JS both have .reverse() methods, which would seem\n// to negate the need for this function. However, not all runtimes support this\n// method (e.g. React Native). This function compensates for that fact.\nexport var reverseArray = function (array) {\n  var arrayLen = array.length;\n  for (var idx = 0, len = Math.floor(arrayLen / 2); idx < len; idx++) {\n    var leftIdx = idx;\n    var rightIdx = arrayLen - idx - 1;\n    var temp = array[idx];\n    array[leftIdx] = array[rightIdx];\n    array[rightIdx] = temp;\n  }\n  return array;\n};\nexport var sum = function (array) {\n  var total = 0;\n  for (var idx = 0, len = array.length; idx < len; idx++) {\n    total += array[idx];\n  }\n  return total;\n};\nexport var range = function (start, end) {\n  var arr = new Array(end - start);\n  for (var idx = 0, len = arr.length; idx < len; idx++) {\n    arr[idx] = start + idx;\n  }\n  return arr;\n};\nexport var pluckIndices = function (arr, indices) {\n  var plucked = new Array(indices.length);\n  for (var idx = 0, len = indices.length; idx < len; idx++) {\n    plucked[idx] = arr[indices[idx]];\n  }\n  return plucked;\n};\nexport var canBeConvertedToUint8Array = function (input) {\n  return input instanceof Uint8Array || input instanceof ArrayBuffer || typeof input === 'string';\n};\nexport var toUint8Array = function (input) {\n  if (typeof input === 'string') {\n    return decodeFromBase64DataUri(input);\n  } else if (input instanceof ArrayBuffer) {\n    return new Uint8Array(input);\n  } else if (input instanceof Uint8Array) {\n    return input;\n  } else {\n    throw new TypeError('`input` must be one of `string | ArrayBuffer | Uint8Array`');\n  }\n};","map":{"version":3,"sources":["../../src/utils/arrays.ts"],"names":[],"mappings":"AAAA,SAAS,uBAAuB,QAAE,UAAA;AAClC,SAAS,YAAY,QAAE,WAAA;AAEvB,OAAO,IAAM,IAAI,GAAG,SAAA,CAAI,KAAU,EAAA;EAAQ,OAAA,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;AAAvB,CAAuB;AAEjE;AACA;AAEA,OAAO,IAAM,aAAa,GAAG,SAAA,CAAC,KAA0B,EAAA;EACtD,IAAI,KAAK,YAAY,UAAU,EAAE,OAAO,KAAK;EAC7C,IAAM,MAAM,GAAG,KAAK,CAAC,MAAM;EAC3B,IAAM,UAAU,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC;EACzC,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,EAAE,GAAG,EAAE,EAAE;IACrC,UAAU,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC;EACxC;EACD,OAAO,UAAU;AACnB,CAAC;AAED,OAAO,IAAM,mBAAmB,GAAG,SAAA,CAAA,EAAA;EAAC,IAAA,MAAA,GAAA,EAAA;OAAA,IAAA,EAAA,GAAA,CAAkC,EAAlC,EAAA,GAAA,SAAA,CAAA,MAAkC,EAAlC,EAAA,EAAkC,EAAA;IAAlC,MAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;EAClC,IAAM,UAAU,GAAG,MAAM,CAAC,MAAM;EAEhC,IAAM,WAAW,GAAiB,EAAE;EACpC,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,UAAU,EAAE,GAAG,EAAE,EAAE;IACzC,IAAM,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC;IAC3B,WAAW,CAAC,GAAG,CAAC,GACd,OAAO,YAAY,UAAU,GAAG,OAAO,GAAG,aAAa,CAAC,OAAO,CAAC;EACnE;EAED,IAAI,SAAS,GAAG,CAAC;EACjB,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,UAAU,EAAE,GAAG,EAAE,EAAE;IACzC,SAAS,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM;EAChC;EAED,IAAM,MAAM,GAAG,IAAI,UAAU,CAAC,SAAS,CAAC;EACxC,IAAI,MAAM,GAAG,CAAC;EACd,KAAK,IAAI,MAAM,GAAG,CAAC,EAAE,MAAM,GAAG,UAAU,EAAE,MAAM,EAAE,EAAE;IAClD,IAAM,GAAG,GAAG,WAAW,CAAC,MAAM,CAAC;IAC/B,KAAK,IAAI,OAAO,GAAG,CAAC,EAAE,MAAM,GAAG,GAAG,CAAC,MAAM,EAAE,OAAO,GAAG,MAAM,EAAE,OAAO,EAAE,EAAE;MACtE,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC;IAChC;EACF;EAED,OAAO,MAAM;AACf,CAAC;AAED,OAAO,IAAM,gBAAgB,GAAG,SAAA,CAAC,MAAoB,EAAA;EACnD,IAAI,SAAS,GAAG,CAAC;EACjB,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE;IACvD,SAAS,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM;EAChC;EAED,IAAM,YAAY,GAAG,IAAI,UAAU,CAAC,SAAS,CAAC;EAC9C,IAAI,MAAM,GAAG,CAAC;EACd,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE;IACvD,IAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC;IACzB,YAAY,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC;IAC/B,MAAM,IAAI,KAAK,CAAC,MAAM;EACvB;EAED,OAAO,YAAY;AACrB,CAAC;AAED,OAAO,IAAM,aAAa,GAAG,SAAA,CAAC,KAA4B,EAAA;EACxD,IAAI,GAAG,GAAG,EAAE;EACZ,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,KAAK,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE;IACtD,GAAG,IAAI,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;EAChC;EACD,OAAO,GAAG;AACZ,CAAC;AAED,OAAO,IAAM,aAAa,GAAG,SAAA,CAAwB,CAAI,EAAE,CAAI,EAAA;EAAK,OAAA,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE;AAAX,CAAW;AAE/E,OAAO,IAAM,UAAU,GAAG,SAAA,CAAI,KAAU,EAAE,OAAyB,EAAA;EACjE,IAAM,IAAI,GAAQ,EAAE;EAEpB,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,KAAK,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE;IACtD,IAAM,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC;IACvB,IAAM,IAAI,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;IAC3B,IAAI,GAAG,KAAK,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,OAAO,CAAC,IAAI,CAAC,EAAE;MAChD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;IAChB;EACF;EAED,OAAO,IAAI;AACb,CAAC;AAED;AACA;AACA;AACA,OAAO,IAAM,YAAY,GAAG,SAAA,CAAC,KAAiB,EAAA;EAC5C,IAAM,QAAQ,GAAG,KAAK,CAAC,MAAM;EAC7B,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,CAAC,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE;IAClE,IAAM,OAAO,GAAG,GAAG;IACnB,IAAM,QAAQ,GAAG,QAAQ,GAAG,GAAG,GAAG,CAAC;IACnC,IAAM,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC;IAEvB,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC;IAChC,KAAK,CAAC,QAAQ,CAAC,GAAG,IAAI;EACvB;EACD,OAAO,KAAK;AACd,CAAC;AAED,OAAO,IAAM,GAAG,GAAG,SAAA,CAAC,KAA4B,EAAA;EAC9C,IAAI,KAAK,GAAG,CAAC;EACb,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,KAAK,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE;IACtD,KAAK,IAAI,KAAK,CAAC,GAAG,CAAC;EACpB;EACD,OAAO,KAAK;AACd,CAAC;AAED,OAAO,IAAM,KAAK,GAAG,SAAA,CAAC,KAAa,EAAE,GAAW,EAAA;EAC9C,IAAM,GAAG,GAAG,IAAI,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC;EAClC,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE;IACpD,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,GAAG;EACvB;EACD,OAAO,GAAG;AACZ,CAAC;AAED,OAAO,IAAM,YAAY,GAAG,SAAA,CAAI,GAAQ,EAAE,OAAiB,EAAA;EACzD,IAAM,OAAO,GAAG,IAAI,KAAK,CAAI,OAAO,CAAC,MAAM,CAAC;EAC5C,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,OAAO,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE;IACxD,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;EACjC;EACD,OAAO,OAAO;AAChB,CAAC;AAED,OAAO,IAAM,0BAA0B,GAAG,SAAA,CACxC,KAAU,EAAA;EAEV,OAAA,KAAK,YAAY,UAAU,IAC3B,KAAK,YAAY,WAAW,IAC5B,OAAO,KAAK,KAAK,QAAQ;AAFzB,CAEyB;AAE3B,OAAO,IAAM,YAAY,GAAG,SAAA,CAAC,KAAwC,EAAA;EACnE,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAO,uBAAuB,CAAC,KAAK,CAAC;GACtC,MAAM,IAAI,KAAK,YAAY,WAAW,EAAE;IACvC,OAAO,IAAI,UAAU,CAAC,KAAK,CAAC;GAC7B,MAAM,IAAI,KAAK,YAAY,UAAU,EAAE;IACtC,OAAO,KAAK;GACb,MAAM;IACL,MAAM,IAAI,SAAS,CACjB,4DAA4D,CAC7D;EACF;AACH,CAAC","sourceRoot":"","sourcesContent":["import { decodeFromBase64DataUri } from \"./base64\";\nimport { charFromCode } from \"./strings\";\nexport var last = function (array) { return array[array.length - 1]; };\n// export const dropLast = <T>(array: T[]): T[] =>\n// array.slice(0, array.length - 1);\nexport var typedArrayFor = function (value) {\n    if (value instanceof Uint8Array)\n        return value;\n    var length = value.length;\n    var typedArray = new Uint8Array(length);\n    for (var idx = 0; idx < length; idx++) {\n        typedArray[idx] = value.charCodeAt(idx);\n    }\n    return typedArray;\n};\nexport var mergeIntoTypedArray = function () {\n    var arrays = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        arrays[_i] = arguments[_i];\n    }\n    var arrayCount = arrays.length;\n    var typedArrays = [];\n    for (var idx = 0; idx < arrayCount; idx++) {\n        var element = arrays[idx];\n        typedArrays[idx] =\n            element instanceof Uint8Array ? element : typedArrayFor(element);\n    }\n    var totalSize = 0;\n    for (var idx = 0; idx < arrayCount; idx++) {\n        totalSize += arrays[idx].length;\n    }\n    var merged = new Uint8Array(totalSize);\n    var offset = 0;\n    for (var arrIdx = 0; arrIdx < arrayCount; arrIdx++) {\n        var arr = typedArrays[arrIdx];\n        for (var byteIdx = 0, arrLen = arr.length; byteIdx < arrLen; byteIdx++) {\n            merged[offset++] = arr[byteIdx];\n        }\n    }\n    return merged;\n};\nexport var mergeUint8Arrays = function (arrays) {\n    var totalSize = 0;\n    for (var idx = 0, len = arrays.length; idx < len; idx++) {\n        totalSize += arrays[idx].length;\n    }\n    var mergedBuffer = new Uint8Array(totalSize);\n    var offset = 0;\n    for (var idx = 0, len = arrays.length; idx < len; idx++) {\n        var array = arrays[idx];\n        mergedBuffer.set(array, offset);\n        offset += array.length;\n    }\n    return mergedBuffer;\n};\nexport var arrayAsString = function (array) {\n    var str = '';\n    for (var idx = 0, len = array.length; idx < len; idx++) {\n        str += charFromCode(array[idx]);\n    }\n    return str;\n};\nexport var byAscendingId = function (a, b) { return a.id - b.id; };\nexport var sortedUniq = function (array, indexer) {\n    var uniq = [];\n    for (var idx = 0, len = array.length; idx < len; idx++) {\n        var curr = array[idx];\n        var prev = array[idx - 1];\n        if (idx === 0 || indexer(curr) !== indexer(prev)) {\n            uniq.push(curr);\n        }\n    }\n    return uniq;\n};\n// Arrays and TypedArrays in JS both have .reverse() methods, which would seem\n// to negate the need for this function. However, not all runtimes support this\n// method (e.g. React Native). This function compensates for that fact.\nexport var reverseArray = function (array) {\n    var arrayLen = array.length;\n    for (var idx = 0, len = Math.floor(arrayLen / 2); idx < len; idx++) {\n        var leftIdx = idx;\n        var rightIdx = arrayLen - idx - 1;\n        var temp = array[idx];\n        array[leftIdx] = array[rightIdx];\n        array[rightIdx] = temp;\n    }\n    return array;\n};\nexport var sum = function (array) {\n    var total = 0;\n    for (var idx = 0, len = array.length; idx < len; idx++) {\n        total += array[idx];\n    }\n    return total;\n};\nexport var range = function (start, end) {\n    var arr = new Array(end - start);\n    for (var idx = 0, len = arr.length; idx < len; idx++) {\n        arr[idx] = start + idx;\n    }\n    return arr;\n};\nexport var pluckIndices = function (arr, indices) {\n    var plucked = new Array(indices.length);\n    for (var idx = 0, len = indices.length; idx < len; idx++) {\n        plucked[idx] = arr[indices[idx]];\n    }\n    return plucked;\n};\nexport var canBeConvertedToUint8Array = function (input) {\n    return input instanceof Uint8Array ||\n        input instanceof ArrayBuffer ||\n        typeof input === 'string';\n};\nexport var toUint8Array = function (input) {\n    if (typeof input === 'string') {\n        return decodeFromBase64DataUri(input);\n    }\n    else if (input instanceof ArrayBuffer) {\n        return new Uint8Array(input);\n    }\n    else if (input instanceof Uint8Array) {\n        return input;\n    }\n    else {\n        throw new TypeError('`input` must be one of `string | ArrayBuffer | Uint8Array`');\n    }\n};\n//# sourceMappingURL=arrays.js.map"]},"metadata":{},"sourceType":"module"}