{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport CustomFontEmbedder from \"./CustomFontEmbedder\";\nimport PDFHexString from \"../objects/PDFHexString\";\nimport { Cache, mergeUint8Arrays, toHexStringOfMinLength } from \"../../utils\";\n/**\n * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\n * this class borrows from:\n *   https://github.com/devongovett/pdfkit/blob/e71edab0dd4657b5a767804ba86c94c58d01fbca/lib/image/jpeg.coffee\n */\nvar CustomFontSubsetEmbedder = /** @class */function (_super) {\n  __extends(CustomFontSubsetEmbedder, _super);\n  function CustomFontSubsetEmbedder(font, fontData, customFontName, fontFeatures) {\n    var _this = _super.call(this, font, fontData, customFontName, fontFeatures) || this;\n    _this.subset = _this.font.createSubset();\n    _this.glyphs = [];\n    _this.glyphCache = Cache.populatedBy(function () {\n      return _this.glyphs;\n    });\n    _this.glyphIdMap = new Map();\n    return _this;\n  }\n  CustomFontSubsetEmbedder.for = function (fontkit, fontData, customFontName, fontFeatures) {\n    return __awaiter(this, void 0, void 0, function () {\n      var font;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, fontkit.create(fontData)];\n          case 1:\n            font = _a.sent();\n            return [2 /*return*/, new CustomFontSubsetEmbedder(font, fontData, customFontName, fontFeatures)];\n        }\n      });\n    });\n  };\n  CustomFontSubsetEmbedder.prototype.encodeText = function (text) {\n    var glyphs = this.font.layout(text, this.fontFeatures).glyphs;\n    var hexCodes = new Array(glyphs.length);\n    for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n      var glyph = glyphs[idx];\n      var subsetGlyphId = this.subset.includeGlyph(glyph);\n      this.glyphs[subsetGlyphId - 1] = glyph;\n      this.glyphIdMap.set(glyph.id, subsetGlyphId);\n      hexCodes[idx] = toHexStringOfMinLength(subsetGlyphId, 4);\n    }\n    this.glyphCache.invalidate();\n    return PDFHexString.of(hexCodes.join(''));\n  };\n  CustomFontSubsetEmbedder.prototype.isCFF = function () {\n    return this.subset.cff;\n  };\n  CustomFontSubsetEmbedder.prototype.glyphId = function (glyph) {\n    return glyph ? this.glyphIdMap.get(glyph.id) : -1;\n  };\n  CustomFontSubsetEmbedder.prototype.serializeFont = function () {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var parts = [];\n      _this.subset.encodeStream().on('data', function (bytes) {\n        return parts.push(bytes);\n      }).on('end', function () {\n        return resolve(mergeUint8Arrays(parts));\n      }).on('error', function (err) {\n        return reject(err);\n      });\n    });\n  };\n  return CustomFontSubsetEmbedder;\n}(CustomFontEmbedder);\nexport default CustomFontSubsetEmbedder;","map":{"version":3,"sources":["../../../src/core/embedders/CustomFontSubsetEmbedder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter, __extends, __generator } from \"tslib\";\nimport CustomFontEmbedder from \"./CustomFontEmbedder\";\nimport PDFHexString from \"../objects/PDFHexString\";\nimport { Cache, mergeUint8Arrays, toHexStringOfMinLength } from \"../../utils\";\n/**\n * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\n * this class borrows from:\n *   https://github.com/devongovett/pdfkit/blob/e71edab0dd4657b5a767804ba86c94c58d01fbca/lib/image/jpeg.coffee\n */\nvar CustomFontSubsetEmbedder = /** @class */ (function (_super) {\n    __extends(CustomFontSubsetEmbedder, _super);\n    function CustomFontSubsetEmbedder(font, fontData, customFontName, fontFeatures) {\n        var _this = _super.call(this, font, fontData, customFontName, fontFeatures) || this;\n        _this.subset = _this.font.createSubset();\n        _this.glyphs = [];\n        _this.glyphCache = Cache.populatedBy(function () { return _this.glyphs; });\n        _this.glyphIdMap = new Map();\n        return _this;\n    }\n    CustomFontSubsetEmbedder.for = function (fontkit, fontData, customFontName, fontFeatures) {\n        return __awaiter(this, void 0, void 0, function () {\n            var font;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, fontkit.create(fontData)];\n                    case 1:\n                        font = _a.sent();\n                        return [2 /*return*/, new CustomFontSubsetEmbedder(font, fontData, customFontName, fontFeatures)];\n                }\n            });\n        });\n    };\n    CustomFontSubsetEmbedder.prototype.encodeText = function (text) {\n        var glyphs = this.font.layout(text, this.fontFeatures).glyphs;\n        var hexCodes = new Array(glyphs.length);\n        for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n            var glyph = glyphs[idx];\n            var subsetGlyphId = this.subset.includeGlyph(glyph);\n            this.glyphs[subsetGlyphId - 1] = glyph;\n            this.glyphIdMap.set(glyph.id, subsetGlyphId);\n            hexCodes[idx] = toHexStringOfMinLength(subsetGlyphId, 4);\n        }\n        this.glyphCache.invalidate();\n        return PDFHexString.of(hexCodes.join(''));\n    };\n    CustomFontSubsetEmbedder.prototype.isCFF = function () {\n        return this.subset.cff;\n    };\n    CustomFontSubsetEmbedder.prototype.glyphId = function (glyph) {\n        return glyph ? this.glyphIdMap.get(glyph.id) : -1;\n    };\n    CustomFontSubsetEmbedder.prototype.serializeFont = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var parts = [];\n            _this.subset\n                .encodeStream()\n                .on('data', function (bytes) { return parts.push(bytes); })\n                .on('end', function () { return resolve(mergeUint8Arrays(parts)); })\n                .on('error', function (err) { return reject(err); });\n        });\n    };\n    return CustomFontSubsetEmbedder;\n}(CustomFontEmbedder));\nexport default CustomFontSubsetEmbedder;\n//# sourceMappingURL=CustomFontSubsetEmbedder.js.map"]},"metadata":{},"sourceType":"module"}