{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFDict from \"../objects/PDFDict\";\nimport PDFName from \"../objects/PDFName\";\nimport { PDFAcroForm } from \"../acroform\";\nimport ViewerPreferences from '../interactive/ViewerPreferences';\nvar PDFCatalog = /** @class */function (_super) {\n  __extends(PDFCatalog, _super);\n  function PDFCatalog() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  PDFCatalog.prototype.Pages = function () {\n    return this.lookup(PDFName.of('Pages'), PDFDict);\n  };\n  PDFCatalog.prototype.AcroForm = function () {\n    return this.lookupMaybe(PDFName.of('AcroForm'), PDFDict);\n  };\n  PDFCatalog.prototype.getAcroForm = function () {\n    var dict = this.AcroForm();\n    if (!dict) return undefined;\n    return PDFAcroForm.fromDict(dict);\n  };\n  PDFCatalog.prototype.getOrCreateAcroForm = function () {\n    var acroForm = this.getAcroForm();\n    if (!acroForm) {\n      acroForm = PDFAcroForm.create(this.context);\n      var acroFormRef = this.context.register(acroForm.dict);\n      this.set(PDFName.of('AcroForm'), acroFormRef);\n    }\n    return acroForm;\n  };\n  PDFCatalog.prototype.ViewerPreferences = function () {\n    return this.lookupMaybe(PDFName.of('ViewerPreferences'), PDFDict);\n  };\n  PDFCatalog.prototype.getViewerPreferences = function () {\n    var dict = this.ViewerPreferences();\n    if (!dict) return undefined;\n    return ViewerPreferences.fromDict(dict);\n  };\n  PDFCatalog.prototype.getOrCreateViewerPreferences = function () {\n    var viewerPrefs = this.getViewerPreferences();\n    if (!viewerPrefs) {\n      viewerPrefs = ViewerPreferences.create(this.context);\n      var viewerPrefsRef = this.context.register(viewerPrefs.dict);\n      this.set(PDFName.of('ViewerPreferences'), viewerPrefsRef);\n    }\n    return viewerPrefs;\n  };\n  /**\n   * Inserts the given ref as a leaf node of this catalog's page tree at the\n   * specified index (zero-based). Also increments the `Count` of each node in\n   * the page tree hierarchy to accomodate the new page.\n   *\n   * Returns the ref of the PDFPageTree node into which `leafRef` was inserted.\n   */\n  PDFCatalog.prototype.insertLeafNode = function (leafRef, index) {\n    var pagesRef = this.get(PDFName.of('Pages'));\n    var maybeParentRef = this.Pages().insertLeafNode(leafRef, index);\n    return maybeParentRef || pagesRef;\n  };\n  PDFCatalog.prototype.removeLeafNode = function (index) {\n    this.Pages().removeLeafNode(index);\n  };\n  PDFCatalog.withContextAndPages = function (context, pages) {\n    var dict = new Map();\n    dict.set(PDFName.of('Type'), PDFName.of('Catalog'));\n    dict.set(PDFName.of('Pages'), pages);\n    return new PDFCatalog(dict, context);\n  };\n  PDFCatalog.fromMapWithContext = function (map, context) {\n    return new PDFCatalog(map, context);\n  };\n  return PDFCatalog;\n}(PDFDict);\nexport default PDFCatalog;","map":{"version":3,"sources":["../../../src/core/structures/PDFCatalog.ts"],"names":[],"mappings":";AAAA,OAAO,OAAoB,MAAA,oBAAA;AAC3B,OAAO,OAAO,MAAA,oBAAA;AAId,SAAS,WAAW,QAAE,aAAA;AACtB,OAAO,iBAAiB,MAAM,kCAAkC;AAEhE,IAAA,UAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAyB,SAAA,CAAA,UAAA,EAAA,MAAA,CAAA;EAAzB,SAAA,UAAA,CAAA,EAAA;;EA0EA;EA5DE,UAAA,CAAA,SAAA,CAAA,KAAK,GAAL,YAAA;IACE,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,OAAO,CAAgB;EACjE,CAAC;EAED,UAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,YAAA;IACE,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,EAAE,OAAO,CAAC;EAC1D,CAAC;EAED,UAAA,CAAA,SAAA,CAAA,WAAW,GAAX,YAAA;IACE,IAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAA,CAAE;IAC5B,IAAI,CAAC,IAAI,EAAE,OAAO,SAAS;IAC3B,OAAO,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC;EACnC,CAAC;EAED,UAAA,CAAA,SAAA,CAAA,mBAAmB,GAAnB,YAAA;IACE,IAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAA,CAAE;IACjC,IAAI,CAAC,QAAQ,EAAE;MACb,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;MAC3C,IAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC;MACxD,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,EAAE,WAAW,CAAC;IAC9C;IACD,OAAO,QAAQ;EACjB,CAAC;EAED,UAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,YAAA;IACE,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,CAAC,mBAAmB,CAAC,EAAE,OAAO,CAAC;EACnE,CAAC;EAED,UAAA,CAAA,SAAA,CAAA,oBAAoB,GAApB,YAAA;IACE,IAAM,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAA,CAAE;IACrC,IAAI,CAAC,IAAI,EAAE,OAAO,SAAS;IAC3B,OAAO,iBAAiB,CAAC,QAAQ,CAAC,IAAI,CAAC;EACzC,CAAC;EAED,UAAA,CAAA,SAAA,CAAA,4BAA4B,GAA5B,YAAA;IACE,IAAI,WAAW,GAAG,IAAI,CAAC,oBAAoB,CAAA,CAAE;IAC7C,IAAI,CAAC,WAAW,EAAE;MAChB,WAAW,GAAG,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;MACpD,IAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC;MAC9D,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,mBAAmB,CAAC,EAAE,cAAc,CAAC;IAC1D;IACD,OAAO,WAAW;EACpB,CAAC;EAED;;;;;;AAMG;EACH,UAAA,CAAA,SAAA,CAAA,cAAc,GAAd,UAAe,OAAe,EAAE,KAAa,EAAA;IAC3C,IAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,CAAW;IACxD,IAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAA,CAAE,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,CAAC;IAClE,OAAO,cAAc,IAAI,QAAQ;EACnC,CAAC;EAED,UAAA,CAAA,SAAA,CAAA,cAAc,GAAd,UAAe,KAAa,EAAA;IAC1B,IAAI,CAAC,KAAK,CAAA,CAAE,CAAC,cAAc,CAAC,KAAK,CAAC;EACpC,CAAC;EAxEM,UAAA,CAAA,mBAAmB,GAAG,UAC3B,OAAmB,EACnB,KAA2B,EAAA;IAE3B,IAAM,IAAI,GAAG,IAAI,GAAG,CAAA,CAAE;IACtB,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,OAAO,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;IACnD,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,KAAK,CAAC;IACpC,OAAO,IAAI,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC;EACtC,CAAC;EAEM,UAAA,CAAA,kBAAkB,GAAG,UAAC,GAAY,EAAE,OAAmB,EAAA;IAC5D,OAAA,IAAI,UAAU,CAAC,GAAG,EAAE,OAAO,CAAC;EAA5B,CAA4B;EA8DhC,OAAA,UAAC;CAAA,CA1EwB,OAAO,CAAA;AA4EhC,eAAe,UAAU","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport PDFDict from \"../objects/PDFDict\";\nimport PDFName from \"../objects/PDFName\";\nimport { PDFAcroForm } from \"../acroform\";\nimport ViewerPreferences from '../interactive/ViewerPreferences';\nvar PDFCatalog = /** @class */ (function (_super) {\n    __extends(PDFCatalog, _super);\n    function PDFCatalog() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    PDFCatalog.prototype.Pages = function () {\n        return this.lookup(PDFName.of('Pages'), PDFDict);\n    };\n    PDFCatalog.prototype.AcroForm = function () {\n        return this.lookupMaybe(PDFName.of('AcroForm'), PDFDict);\n    };\n    PDFCatalog.prototype.getAcroForm = function () {\n        var dict = this.AcroForm();\n        if (!dict)\n            return undefined;\n        return PDFAcroForm.fromDict(dict);\n    };\n    PDFCatalog.prototype.getOrCreateAcroForm = function () {\n        var acroForm = this.getAcroForm();\n        if (!acroForm) {\n            acroForm = PDFAcroForm.create(this.context);\n            var acroFormRef = this.context.register(acroForm.dict);\n            this.set(PDFName.of('AcroForm'), acroFormRef);\n        }\n        return acroForm;\n    };\n    PDFCatalog.prototype.ViewerPreferences = function () {\n        return this.lookupMaybe(PDFName.of('ViewerPreferences'), PDFDict);\n    };\n    PDFCatalog.prototype.getViewerPreferences = function () {\n        var dict = this.ViewerPreferences();\n        if (!dict)\n            return undefined;\n        return ViewerPreferences.fromDict(dict);\n    };\n    PDFCatalog.prototype.getOrCreateViewerPreferences = function () {\n        var viewerPrefs = this.getViewerPreferences();\n        if (!viewerPrefs) {\n            viewerPrefs = ViewerPreferences.create(this.context);\n            var viewerPrefsRef = this.context.register(viewerPrefs.dict);\n            this.set(PDFName.of('ViewerPreferences'), viewerPrefsRef);\n        }\n        return viewerPrefs;\n    };\n    /**\n     * Inserts the given ref as a leaf node of this catalog's page tree at the\n     * specified index (zero-based). Also increments the `Count` of each node in\n     * the page tree hierarchy to accomodate the new page.\n     *\n     * Returns the ref of the PDFPageTree node into which `leafRef` was inserted.\n     */\n    PDFCatalog.prototype.insertLeafNode = function (leafRef, index) {\n        var pagesRef = this.get(PDFName.of('Pages'));\n        var maybeParentRef = this.Pages().insertLeafNode(leafRef, index);\n        return maybeParentRef || pagesRef;\n    };\n    PDFCatalog.prototype.removeLeafNode = function (index) {\n        this.Pages().removeLeafNode(index);\n    };\n    PDFCatalog.withContextAndPages = function (context, pages) {\n        var dict = new Map();\n        dict.set(PDFName.of('Type'), PDFName.of('Catalog'));\n        dict.set(PDFName.of('Pages'), pages);\n        return new PDFCatalog(dict, context);\n    };\n    PDFCatalog.fromMapWithContext = function (map, context) {\n        return new PDFCatalog(map, context);\n    };\n    return PDFCatalog;\n}(PDFDict));\nexport default PDFCatalog;\n//# sourceMappingURL=PDFCatalog.js.map"]},"metadata":{},"sourceType":"module"}