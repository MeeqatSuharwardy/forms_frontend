{"ast":null,"code":"import PDFRef from \"../objects/PDFRef\";\nimport CharCodes from \"../syntax/CharCodes\";\nimport { copyStringIntoBuffer, padStart } from \"../../utils\";\n/**\n * Entries should be added using the [[addEntry]] and [[addDeletedEntry]]\n * methods **in order of ascending object number**.\n */\nvar PDFCrossRefSection = /** @class */function () {\n  function PDFCrossRefSection(firstEntry) {\n    this.subsections = firstEntry ? [[firstEntry]] : [];\n    this.chunkIdx = 0;\n    this.chunkLength = firstEntry ? 1 : 0;\n  }\n  PDFCrossRefSection.prototype.addEntry = function (ref, offset) {\n    this.append({\n      ref: ref,\n      offset: offset,\n      deleted: false\n    });\n  };\n  PDFCrossRefSection.prototype.addDeletedEntry = function (ref, nextFreeObjectNumber) {\n    this.append({\n      ref: ref,\n      offset: nextFreeObjectNumber,\n      deleted: true\n    });\n  };\n  PDFCrossRefSection.prototype.toString = function () {\n    var section = \"xref\\n\";\n    for (var rangeIdx = 0, rangeLen = this.subsections.length; rangeIdx < rangeLen; rangeIdx++) {\n      var range = this.subsections[rangeIdx];\n      section += range[0].ref.objectNumber + \" \" + range.length + \"\\n\";\n      for (var entryIdx = 0, entryLen = range.length; entryIdx < entryLen; entryIdx++) {\n        var entry = range[entryIdx];\n        section += padStart(String(entry.offset), 10, '0');\n        section += ' ';\n        section += padStart(String(entry.ref.generationNumber), 5, '0');\n        section += ' ';\n        section += entry.deleted ? 'f' : 'n';\n        section += ' \\n';\n      }\n    }\n    return section;\n  };\n  PDFCrossRefSection.prototype.sizeInBytes = function () {\n    var size = 5;\n    for (var idx = 0, len = this.subsections.length; idx < len; idx++) {\n      var subsection = this.subsections[idx];\n      var subsectionLength = subsection.length;\n      var firstEntry = subsection[0];\n      size += 2;\n      size += String(firstEntry.ref.objectNumber).length;\n      size += String(subsectionLength).length;\n      size += 20 * subsectionLength;\n    }\n    return size;\n  };\n  PDFCrossRefSection.prototype.copyBytesInto = function (buffer, offset) {\n    var initialOffset = offset;\n    buffer[offset++] = CharCodes.x;\n    buffer[offset++] = CharCodes.r;\n    buffer[offset++] = CharCodes.e;\n    buffer[offset++] = CharCodes.f;\n    buffer[offset++] = CharCodes.Newline;\n    offset += this.copySubsectionsIntoBuffer(this.subsections, buffer, offset);\n    return offset - initialOffset;\n  };\n  PDFCrossRefSection.prototype.copySubsectionsIntoBuffer = function (subsections, buffer, offset) {\n    var initialOffset = offset;\n    var length = subsections.length;\n    for (var idx = 0; idx < length; idx++) {\n      var subsection = this.subsections[idx];\n      var firstObjectNumber = String(subsection[0].ref.objectNumber);\n      offset += copyStringIntoBuffer(firstObjectNumber, buffer, offset);\n      buffer[offset++] = CharCodes.Space;\n      var rangeLength = String(subsection.length);\n      offset += copyStringIntoBuffer(rangeLength, buffer, offset);\n      buffer[offset++] = CharCodes.Newline;\n      offset += this.copyEntriesIntoBuffer(subsection, buffer, offset);\n    }\n    return offset - initialOffset;\n  };\n  PDFCrossRefSection.prototype.copyEntriesIntoBuffer = function (entries, buffer, offset) {\n    var length = entries.length;\n    for (var idx = 0; idx < length; idx++) {\n      var entry = entries[idx];\n      var entryOffset = padStart(String(entry.offset), 10, '0');\n      offset += copyStringIntoBuffer(entryOffset, buffer, offset);\n      buffer[offset++] = CharCodes.Space;\n      var entryGen = padStart(String(entry.ref.generationNumber), 5, '0');\n      offset += copyStringIntoBuffer(entryGen, buffer, offset);\n      buffer[offset++] = CharCodes.Space;\n      buffer[offset++] = entry.deleted ? CharCodes.f : CharCodes.n;\n      buffer[offset++] = CharCodes.Space;\n      buffer[offset++] = CharCodes.Newline;\n    }\n    return 20 * length;\n  };\n  PDFCrossRefSection.prototype.append = function (currEntry) {\n    if (this.chunkLength === 0) {\n      this.subsections.push([currEntry]);\n      this.chunkIdx = 0;\n      this.chunkLength = 1;\n      return;\n    }\n    var chunk = this.subsections[this.chunkIdx];\n    var prevEntry = chunk[this.chunkLength - 1];\n    if (currEntry.ref.objectNumber - prevEntry.ref.objectNumber > 1) {\n      this.subsections.push([currEntry]);\n      this.chunkIdx += 1;\n      this.chunkLength = 1;\n    } else {\n      chunk.push(currEntry);\n      this.chunkLength += 1;\n    }\n  };\n  PDFCrossRefSection.create = function () {\n    return new PDFCrossRefSection({\n      ref: PDFRef.of(0, 65535),\n      offset: 0,\n      deleted: true\n    });\n  };\n  PDFCrossRefSection.createEmpty = function () {\n    return new PDFCrossRefSection();\n  };\n  return PDFCrossRefSection;\n}();\nexport default PDFCrossRefSection;","map":{"version":3,"sources":["../../../src/core/document/PDFCrossRefSection.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import PDFRef from \"../objects/PDFRef\";\nimport CharCodes from \"../syntax/CharCodes\";\nimport { copyStringIntoBuffer, padStart } from \"../../utils\";\n/**\n * Entries should be added using the [[addEntry]] and [[addDeletedEntry]]\n * methods **in order of ascending object number**.\n */\nvar PDFCrossRefSection = /** @class */ (function () {\n    function PDFCrossRefSection(firstEntry) {\n        this.subsections = firstEntry ? [[firstEntry]] : [];\n        this.chunkIdx = 0;\n        this.chunkLength = firstEntry ? 1 : 0;\n    }\n    PDFCrossRefSection.prototype.addEntry = function (ref, offset) {\n        this.append({ ref: ref, offset: offset, deleted: false });\n    };\n    PDFCrossRefSection.prototype.addDeletedEntry = function (ref, nextFreeObjectNumber) {\n        this.append({ ref: ref, offset: nextFreeObjectNumber, deleted: true });\n    };\n    PDFCrossRefSection.prototype.toString = function () {\n        var section = \"xref\\n\";\n        for (var rangeIdx = 0, rangeLen = this.subsections.length; rangeIdx < rangeLen; rangeIdx++) {\n            var range = this.subsections[rangeIdx];\n            section += range[0].ref.objectNumber + \" \" + range.length + \"\\n\";\n            for (var entryIdx = 0, entryLen = range.length; entryIdx < entryLen; entryIdx++) {\n                var entry = range[entryIdx];\n                section += padStart(String(entry.offset), 10, '0');\n                section += ' ';\n                section += padStart(String(entry.ref.generationNumber), 5, '0');\n                section += ' ';\n                section += entry.deleted ? 'f' : 'n';\n                section += ' \\n';\n            }\n        }\n        return section;\n    };\n    PDFCrossRefSection.prototype.sizeInBytes = function () {\n        var size = 5;\n        for (var idx = 0, len = this.subsections.length; idx < len; idx++) {\n            var subsection = this.subsections[idx];\n            var subsectionLength = subsection.length;\n            var firstEntry = subsection[0];\n            size += 2;\n            size += String(firstEntry.ref.objectNumber).length;\n            size += String(subsectionLength).length;\n            size += 20 * subsectionLength;\n        }\n        return size;\n    };\n    PDFCrossRefSection.prototype.copyBytesInto = function (buffer, offset) {\n        var initialOffset = offset;\n        buffer[offset++] = CharCodes.x;\n        buffer[offset++] = CharCodes.r;\n        buffer[offset++] = CharCodes.e;\n        buffer[offset++] = CharCodes.f;\n        buffer[offset++] = CharCodes.Newline;\n        offset += this.copySubsectionsIntoBuffer(this.subsections, buffer, offset);\n        return offset - initialOffset;\n    };\n    PDFCrossRefSection.prototype.copySubsectionsIntoBuffer = function (subsections, buffer, offset) {\n        var initialOffset = offset;\n        var length = subsections.length;\n        for (var idx = 0; idx < length; idx++) {\n            var subsection = this.subsections[idx];\n            var firstObjectNumber = String(subsection[0].ref.objectNumber);\n            offset += copyStringIntoBuffer(firstObjectNumber, buffer, offset);\n            buffer[offset++] = CharCodes.Space;\n            var rangeLength = String(subsection.length);\n            offset += copyStringIntoBuffer(rangeLength, buffer, offset);\n            buffer[offset++] = CharCodes.Newline;\n            offset += this.copyEntriesIntoBuffer(subsection, buffer, offset);\n        }\n        return offset - initialOffset;\n    };\n    PDFCrossRefSection.prototype.copyEntriesIntoBuffer = function (entries, buffer, offset) {\n        var length = entries.length;\n        for (var idx = 0; idx < length; idx++) {\n            var entry = entries[idx];\n            var entryOffset = padStart(String(entry.offset), 10, '0');\n            offset += copyStringIntoBuffer(entryOffset, buffer, offset);\n            buffer[offset++] = CharCodes.Space;\n            var entryGen = padStart(String(entry.ref.generationNumber), 5, '0');\n            offset += copyStringIntoBuffer(entryGen, buffer, offset);\n            buffer[offset++] = CharCodes.Space;\n            buffer[offset++] = entry.deleted ? CharCodes.f : CharCodes.n;\n            buffer[offset++] = CharCodes.Space;\n            buffer[offset++] = CharCodes.Newline;\n        }\n        return 20 * length;\n    };\n    PDFCrossRefSection.prototype.append = function (currEntry) {\n        if (this.chunkLength === 0) {\n            this.subsections.push([currEntry]);\n            this.chunkIdx = 0;\n            this.chunkLength = 1;\n            return;\n        }\n        var chunk = this.subsections[this.chunkIdx];\n        var prevEntry = chunk[this.chunkLength - 1];\n        if (currEntry.ref.objectNumber - prevEntry.ref.objectNumber > 1) {\n            this.subsections.push([currEntry]);\n            this.chunkIdx += 1;\n            this.chunkLength = 1;\n        }\n        else {\n            chunk.push(currEntry);\n            this.chunkLength += 1;\n        }\n    };\n    PDFCrossRefSection.create = function () {\n        return new PDFCrossRefSection({\n            ref: PDFRef.of(0, 65535),\n            offset: 0,\n            deleted: true,\n        });\n    };\n    PDFCrossRefSection.createEmpty = function () { return new PDFCrossRefSection(); };\n    return PDFCrossRefSection;\n}());\nexport default PDFCrossRefSection;\n//# sourceMappingURL=PDFCrossRefSection.js.map"]},"metadata":{},"sourceType":"module"}