{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFAcroTerminal from \"./PDFAcroTerminal\";\nimport PDFHexString from \"../objects/PDFHexString\";\nimport PDFString from \"../objects/PDFString\";\nimport PDFArray from \"../objects/PDFArray\";\nimport PDFName from \"../objects/PDFName\";\nimport { AcroChoiceFlags } from \"./flags\";\nimport { InvalidAcroFieldValueError, MultiSelectValueError } from \"../errors\";\nvar PDFAcroChoice = /** @class */function (_super) {\n  __extends(PDFAcroChoice, _super);\n  function PDFAcroChoice() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  PDFAcroChoice.prototype.setValues = function (values) {\n    if (this.hasFlag(AcroChoiceFlags.Combo) && !this.hasFlag(AcroChoiceFlags.Edit) && !this.valuesAreValid(values)) {\n      throw new InvalidAcroFieldValueError();\n    }\n    if (values.length === 0) {\n      this.dict.delete(PDFName.of('V'));\n    }\n    if (values.length === 1) {\n      this.dict.set(PDFName.of('V'), values[0]);\n    }\n    if (values.length > 1) {\n      if (!this.hasFlag(AcroChoiceFlags.MultiSelect)) {\n        throw new MultiSelectValueError();\n      }\n      this.dict.set(PDFName.of('V'), this.dict.context.obj(values));\n    }\n    this.updateSelectedIndices(values);\n  };\n  PDFAcroChoice.prototype.valuesAreValid = function (values) {\n    var options = this.getOptions();\n    var _loop_1 = function (idx, len) {\n      var val = values[idx].decodeText();\n      if (!options.find(function (o) {\n        return val === (o.display || o.value).decodeText();\n      })) {\n        return {\n          value: false\n        };\n      }\n    };\n    for (var idx = 0, len = values.length; idx < len; idx++) {\n      var state_1 = _loop_1(idx, len);\n      if (typeof state_1 === \"object\") return state_1.value;\n    }\n    return true;\n  };\n  PDFAcroChoice.prototype.updateSelectedIndices = function (values) {\n    if (values.length > 1) {\n      var indices = new Array(values.length);\n      var options = this.getOptions();\n      var _loop_2 = function (idx, len) {\n        var val = values[idx].decodeText();\n        indices[idx] = options.findIndex(function (o) {\n          return val === (o.display || o.value).decodeText();\n        });\n      };\n      for (var idx = 0, len = values.length; idx < len; idx++) {\n        _loop_2(idx, len);\n      }\n      this.dict.set(PDFName.of('I'), this.dict.context.obj(indices.sort()));\n    } else {\n      this.dict.delete(PDFName.of('I'));\n    }\n  };\n  PDFAcroChoice.prototype.getValues = function () {\n    var v = this.V();\n    if (v instanceof PDFString || v instanceof PDFHexString) return [v];\n    if (v instanceof PDFArray) {\n      var values = [];\n      for (var idx = 0, len = v.size(); idx < len; idx++) {\n        var value = v.lookup(idx);\n        if (value instanceof PDFString || value instanceof PDFHexString) {\n          values.push(value);\n        }\n      }\n      return values;\n    }\n    return [];\n  };\n  PDFAcroChoice.prototype.Opt = function () {\n    return this.dict.lookupMaybe(PDFName.of('Opt'), PDFString, PDFHexString, PDFArray);\n  };\n  PDFAcroChoice.prototype.setOptions = function (options) {\n    var newOpt = new Array(options.length);\n    for (var idx = 0, len = options.length; idx < len; idx++) {\n      var _a = options[idx],\n        value = _a.value,\n        display = _a.display;\n      newOpt[idx] = this.dict.context.obj([value, display || value]);\n    }\n    this.dict.set(PDFName.of('Opt'), this.dict.context.obj(newOpt));\n  };\n  PDFAcroChoice.prototype.getOptions = function () {\n    var Opt = this.Opt();\n    // Not supposed to happen - Opt _should_ always be `PDFArray | undefined`\n    if (Opt instanceof PDFString || Opt instanceof PDFHexString) {\n      return [{\n        value: Opt,\n        display: Opt\n      }];\n    }\n    if (Opt instanceof PDFArray) {\n      var res = [];\n      for (var idx = 0, len = Opt.size(); idx < len; idx++) {\n        var item = Opt.lookup(idx);\n        // If `item` is a string, use that as both the export and text value\n        if (item instanceof PDFString || item instanceof PDFHexString) {\n          res.push({\n            value: item,\n            display: item\n          });\n        }\n        // If `item` is an array of one, treat it the same as just a string,\n        // if it's an array of two then `item[0]` is the export value and\n        // `item[1]` is the text value\n        if (item instanceof PDFArray) {\n          if (item.size() > 0) {\n            var first = item.lookup(0, PDFString, PDFHexString);\n            var second = item.lookupMaybe(1, PDFString, PDFHexString);\n            res.push({\n              value: first,\n              display: second || first\n            });\n          }\n        }\n      }\n      return res;\n    }\n    return [];\n  };\n  return PDFAcroChoice;\n}(PDFAcroTerminal);\nexport default PDFAcroChoice;","map":{"version":3,"sources":["../../../src/core/acroform/PDFAcroChoice.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport PDFAcroTerminal from \"./PDFAcroTerminal\";\nimport PDFHexString from \"../objects/PDFHexString\";\nimport PDFString from \"../objects/PDFString\";\nimport PDFArray from \"../objects/PDFArray\";\nimport PDFName from \"../objects/PDFName\";\nimport { AcroChoiceFlags } from \"./flags\";\nimport { InvalidAcroFieldValueError, MultiSelectValueError, } from \"../errors\";\nvar PDFAcroChoice = /** @class */ (function (_super) {\n    __extends(PDFAcroChoice, _super);\n    function PDFAcroChoice() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    PDFAcroChoice.prototype.setValues = function (values) {\n        if (this.hasFlag(AcroChoiceFlags.Combo) &&\n            !this.hasFlag(AcroChoiceFlags.Edit) &&\n            !this.valuesAreValid(values)) {\n            throw new InvalidAcroFieldValueError();\n        }\n        if (values.length === 0) {\n            this.dict.delete(PDFName.of('V'));\n        }\n        if (values.length === 1) {\n            this.dict.set(PDFName.of('V'), values[0]);\n        }\n        if (values.length > 1) {\n            if (!this.hasFlag(AcroChoiceFlags.MultiSelect)) {\n                throw new MultiSelectValueError();\n            }\n            this.dict.set(PDFName.of('V'), this.dict.context.obj(values));\n        }\n        this.updateSelectedIndices(values);\n    };\n    PDFAcroChoice.prototype.valuesAreValid = function (values) {\n        var options = this.getOptions();\n        var _loop_1 = function (idx, len) {\n            var val = values[idx].decodeText();\n            if (!options.find(function (o) { return val === (o.display || o.value).decodeText(); })) {\n                return { value: false };\n            }\n        };\n        for (var idx = 0, len = values.length; idx < len; idx++) {\n            var state_1 = _loop_1(idx, len);\n            if (typeof state_1 === \"object\")\n                return state_1.value;\n        }\n        return true;\n    };\n    PDFAcroChoice.prototype.updateSelectedIndices = function (values) {\n        if (values.length > 1) {\n            var indices = new Array(values.length);\n            var options = this.getOptions();\n            var _loop_2 = function (idx, len) {\n                var val = values[idx].decodeText();\n                indices[idx] = options.findIndex(function (o) { return val === (o.display || o.value).decodeText(); });\n            };\n            for (var idx = 0, len = values.length; idx < len; idx++) {\n                _loop_2(idx, len);\n            }\n            this.dict.set(PDFName.of('I'), this.dict.context.obj(indices.sort()));\n        }\n        else {\n            this.dict.delete(PDFName.of('I'));\n        }\n    };\n    PDFAcroChoice.prototype.getValues = function () {\n        var v = this.V();\n        if (v instanceof PDFString || v instanceof PDFHexString)\n            return [v];\n        if (v instanceof PDFArray) {\n            var values = [];\n            for (var idx = 0, len = v.size(); idx < len; idx++) {\n                var value = v.lookup(idx);\n                if (value instanceof PDFString || value instanceof PDFHexString) {\n                    values.push(value);\n                }\n            }\n            return values;\n        }\n        return [];\n    };\n    PDFAcroChoice.prototype.Opt = function () {\n        return this.dict.lookupMaybe(PDFName.of('Opt'), PDFString, PDFHexString, PDFArray);\n    };\n    PDFAcroChoice.prototype.setOptions = function (options) {\n        var newOpt = new Array(options.length);\n        for (var idx = 0, len = options.length; idx < len; idx++) {\n            var _a = options[idx], value = _a.value, display = _a.display;\n            newOpt[idx] = this.dict.context.obj([value, display || value]);\n        }\n        this.dict.set(PDFName.of('Opt'), this.dict.context.obj(newOpt));\n    };\n    PDFAcroChoice.prototype.getOptions = function () {\n        var Opt = this.Opt();\n        // Not supposed to happen - Opt _should_ always be `PDFArray | undefined`\n        if (Opt instanceof PDFString || Opt instanceof PDFHexString) {\n            return [{ value: Opt, display: Opt }];\n        }\n        if (Opt instanceof PDFArray) {\n            var res = [];\n            for (var idx = 0, len = Opt.size(); idx < len; idx++) {\n                var item = Opt.lookup(idx);\n                // If `item` is a string, use that as both the export and text value\n                if (item instanceof PDFString || item instanceof PDFHexString) {\n                    res.push({ value: item, display: item });\n                }\n                // If `item` is an array of one, treat it the same as just a string,\n                // if it's an array of two then `item[0]` is the export value and\n                // `item[1]` is the text value\n                if (item instanceof PDFArray) {\n                    if (item.size() > 0) {\n                        var first = item.lookup(0, PDFString, PDFHexString);\n                        var second = item.lookupMaybe(1, PDFString, PDFHexString);\n                        res.push({ value: first, display: second || first });\n                    }\n                }\n            }\n            return res;\n        }\n        return [];\n    };\n    return PDFAcroChoice;\n}(PDFAcroTerminal));\nexport default PDFAcroChoice;\n//# sourceMappingURL=PDFAcroChoice.js.map"]},"metadata":{},"sourceType":"module"}