{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { createCmap } from \"./CMap\";\nimport { deriveFontFlags } from \"./FontFlags\";\nimport PDFHexString from \"../objects/PDFHexString\";\nimport PDFString from \"../objects/PDFString\";\nimport { byAscendingId, Cache, sortedUniq, toHexStringOfMinLength } from \"../../utils\";\n/**\n * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\n * this class borrows from:\n *   https://github.com/devongovett/pdfkit/blob/e71edab0dd4657b5a767804ba86c94c58d01fbca/lib/image/jpeg.coffee\n */\nvar CustomFontEmbedder = /** @class */function () {\n  function CustomFontEmbedder(font, fontData, customName, fontFeatures) {\n    var _this = this;\n    this.allGlyphsInFontSortedById = function () {\n      var glyphs = new Array(_this.font.characterSet.length);\n      for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n        var codePoint = _this.font.characterSet[idx];\n        glyphs[idx] = _this.font.glyphForCodePoint(codePoint);\n      }\n      return sortedUniq(glyphs.sort(byAscendingId), function (g) {\n        return g.id;\n      });\n    };\n    this.font = font;\n    this.scale = 1000 / this.font.unitsPerEm;\n    this.fontData = fontData;\n    this.fontName = this.font.postscriptName || 'Font';\n    this.customName = customName;\n    this.fontFeatures = fontFeatures;\n    this.baseFontName = '';\n    this.glyphCache = Cache.populatedBy(this.allGlyphsInFontSortedById);\n  }\n  CustomFontEmbedder.for = function (fontkit, fontData, customName, fontFeatures) {\n    return __awaiter(this, void 0, void 0, function () {\n      var font;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, fontkit.create(fontData)];\n          case 1:\n            font = _a.sent();\n            return [2 /*return*/, new CustomFontEmbedder(font, fontData, customName, fontFeatures)];\n        }\n      });\n    });\n  };\n  /**\n   * Encode the JavaScript string into this font. (JavaScript encodes strings in\n   * Unicode, but embedded fonts use their own custom encodings)\n   */\n  CustomFontEmbedder.prototype.encodeText = function (text) {\n    var glyphs = this.font.layout(text, this.fontFeatures).glyphs;\n    var hexCodes = new Array(glyphs.length);\n    for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n      hexCodes[idx] = toHexStringOfMinLength(glyphs[idx].id, 4);\n    }\n    return PDFHexString.of(hexCodes.join(''));\n  };\n  // The advanceWidth takes into account kerning automatically, so we don't\n  // have to do that manually like we do for the standard fonts.\n  CustomFontEmbedder.prototype.widthOfTextAtSize = function (text, size) {\n    var glyphs = this.font.layout(text, this.fontFeatures).glyphs;\n    var totalWidth = 0;\n    for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n      totalWidth += glyphs[idx].advanceWidth * this.scale;\n    }\n    var scale = size / 1000;\n    return totalWidth * scale;\n  };\n  CustomFontEmbedder.prototype.heightOfFontAtSize = function (size, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _a = options.descender,\n      descender = _a === void 0 ? true : _a;\n    var _b = this.font,\n      ascent = _b.ascent,\n      descent = _b.descent,\n      bbox = _b.bbox;\n    var yTop = (ascent || bbox.maxY) * this.scale;\n    var yBottom = (descent || bbox.minY) * this.scale;\n    var height = yTop - yBottom;\n    if (!descender) height -= Math.abs(descent) || 0;\n    return height / 1000 * size;\n  };\n  CustomFontEmbedder.prototype.sizeOfFontAtHeight = function (height) {\n    var _a = this.font,\n      ascent = _a.ascent,\n      descent = _a.descent,\n      bbox = _a.bbox;\n    var yTop = (ascent || bbox.maxY) * this.scale;\n    var yBottom = (descent || bbox.minY) * this.scale;\n    return 1000 * height / (yTop - yBottom);\n  };\n  CustomFontEmbedder.prototype.embedIntoContext = function (context, ref) {\n    this.baseFontName = this.customName || context.addRandomSuffix(this.fontName);\n    return this.embedFontDict(context, ref);\n  };\n  CustomFontEmbedder.prototype.embedFontDict = function (context, ref) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cidFontDictRef, unicodeCMapRef, fontDict;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.embedCIDFontDict(context)];\n          case 1:\n            cidFontDictRef = _a.sent();\n            unicodeCMapRef = this.embedUnicodeCmap(context);\n            fontDict = context.obj({\n              Type: 'Font',\n              Subtype: 'Type0',\n              BaseFont: this.baseFontName,\n              Encoding: 'Identity-H',\n              DescendantFonts: [cidFontDictRef],\n              ToUnicode: unicodeCMapRef\n            });\n            if (ref) {\n              context.assign(ref, fontDict);\n              return [2 /*return*/, ref];\n            } else {\n              return [2 /*return*/, context.register(fontDict)];\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  CustomFontEmbedder.prototype.isCFF = function () {\n    return this.font.cff;\n  };\n  CustomFontEmbedder.prototype.embedCIDFontDict = function (context) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fontDescriptorRef, cidFontDict;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.embedFontDescriptor(context)];\n          case 1:\n            fontDescriptorRef = _a.sent();\n            cidFontDict = context.obj({\n              Type: 'Font',\n              Subtype: this.isCFF() ? 'CIDFontType0' : 'CIDFontType2',\n              CIDToGIDMap: 'Identity',\n              BaseFont: this.baseFontName,\n              CIDSystemInfo: {\n                Registry: PDFString.of('Adobe'),\n                Ordering: PDFString.of('Identity'),\n                Supplement: 0\n              },\n              FontDescriptor: fontDescriptorRef,\n              W: this.computeWidths()\n            });\n            return [2 /*return*/, context.register(cidFontDict)];\n        }\n      });\n    });\n  };\n  CustomFontEmbedder.prototype.embedFontDescriptor = function (context) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fontStreamRef, scale, _a, italicAngle, ascent, descent, capHeight, xHeight, _b, minX, minY, maxX, maxY, fontDescriptor;\n      var _c;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4 /*yield*/, this.embedFontStream(context)];\n          case 1:\n            fontStreamRef = _d.sent();\n            scale = this.scale;\n            _a = this.font, italicAngle = _a.italicAngle, ascent = _a.ascent, descent = _a.descent, capHeight = _a.capHeight, xHeight = _a.xHeight;\n            _b = this.font.bbox, minX = _b.minX, minY = _b.minY, maxX = _b.maxX, maxY = _b.maxY;\n            fontDescriptor = context.obj((_c = {\n              Type: 'FontDescriptor',\n              FontName: this.baseFontName,\n              Flags: deriveFontFlags(this.font),\n              FontBBox: [minX * scale, minY * scale, maxX * scale, maxY * scale],\n              ItalicAngle: italicAngle,\n              Ascent: ascent * scale,\n              Descent: descent * scale,\n              CapHeight: (capHeight || ascent) * scale,\n              XHeight: (xHeight || 0) * scale,\n              // Not sure how to compute/find this, nor is anybody else really:\n              // https://stackoverflow.com/questions/35485179/stemv-value-of-the-truetype-font\n              StemV: 0\n            }, _c[this.isCFF() ? 'FontFile3' : 'FontFile2'] = fontStreamRef, _c));\n            return [2 /*return*/, context.register(fontDescriptor)];\n        }\n      });\n    });\n  };\n  CustomFontEmbedder.prototype.serializeFont = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.fontData];\n      });\n    });\n  };\n  CustomFontEmbedder.prototype.embedFontStream = function (context) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fontStream, _a, _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = (_a = context).flateStream;\n            return [4 /*yield*/, this.serializeFont()];\n          case 1:\n            fontStream = _b.apply(_a, [_c.sent(), {\n              Subtype: this.isCFF() ? 'CIDFontType0C' : undefined\n            }]);\n            return [2 /*return*/, context.register(fontStream)];\n        }\n      });\n    });\n  };\n  CustomFontEmbedder.prototype.embedUnicodeCmap = function (context) {\n    var cmap = createCmap(this.glyphCache.access(), this.glyphId.bind(this));\n    var cmapStream = context.flateStream(cmap);\n    return context.register(cmapStream);\n  };\n  CustomFontEmbedder.prototype.glyphId = function (glyph) {\n    return glyph ? glyph.id : -1;\n  };\n  CustomFontEmbedder.prototype.computeWidths = function () {\n    var glyphs = this.glyphCache.access();\n    var widths = [];\n    var currSection = [];\n    for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n      var currGlyph = glyphs[idx];\n      var prevGlyph = glyphs[idx - 1];\n      var currGlyphId = this.glyphId(currGlyph);\n      var prevGlyphId = this.glyphId(prevGlyph);\n      if (idx === 0) {\n        widths.push(currGlyphId);\n      } else if (currGlyphId - prevGlyphId !== 1) {\n        widths.push(currSection);\n        widths.push(currGlyphId);\n        currSection = [];\n      }\n      currSection.push(currGlyph.advanceWidth * this.scale);\n    }\n    widths.push(currSection);\n    return widths;\n  };\n  return CustomFontEmbedder;\n}();\nexport default CustomFontEmbedder;","map":{"version":3,"sources":["../../../src/core/embedders/CustomFontEmbedder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport { createCmap } from \"./CMap\";\nimport { deriveFontFlags } from \"./FontFlags\";\nimport PDFHexString from \"../objects/PDFHexString\";\nimport PDFString from \"../objects/PDFString\";\nimport { byAscendingId, Cache, sortedUniq, toHexStringOfMinLength, } from \"../../utils\";\n/**\n * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\n * this class borrows from:\n *   https://github.com/devongovett/pdfkit/blob/e71edab0dd4657b5a767804ba86c94c58d01fbca/lib/image/jpeg.coffee\n */\nvar CustomFontEmbedder = /** @class */ (function () {\n    function CustomFontEmbedder(font, fontData, customName, fontFeatures) {\n        var _this = this;\n        this.allGlyphsInFontSortedById = function () {\n            var glyphs = new Array(_this.font.characterSet.length);\n            for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n                var codePoint = _this.font.characterSet[idx];\n                glyphs[idx] = _this.font.glyphForCodePoint(codePoint);\n            }\n            return sortedUniq(glyphs.sort(byAscendingId), function (g) { return g.id; });\n        };\n        this.font = font;\n        this.scale = 1000 / this.font.unitsPerEm;\n        this.fontData = fontData;\n        this.fontName = this.font.postscriptName || 'Font';\n        this.customName = customName;\n        this.fontFeatures = fontFeatures;\n        this.baseFontName = '';\n        this.glyphCache = Cache.populatedBy(this.allGlyphsInFontSortedById);\n    }\n    CustomFontEmbedder.for = function (fontkit, fontData, customName, fontFeatures) {\n        return __awaiter(this, void 0, void 0, function () {\n            var font;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, fontkit.create(fontData)];\n                    case 1:\n                        font = _a.sent();\n                        return [2 /*return*/, new CustomFontEmbedder(font, fontData, customName, fontFeatures)];\n                }\n            });\n        });\n    };\n    /**\n     * Encode the JavaScript string into this font. (JavaScript encodes strings in\n     * Unicode, but embedded fonts use their own custom encodings)\n     */\n    CustomFontEmbedder.prototype.encodeText = function (text) {\n        var glyphs = this.font.layout(text, this.fontFeatures).glyphs;\n        var hexCodes = new Array(glyphs.length);\n        for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n            hexCodes[idx] = toHexStringOfMinLength(glyphs[idx].id, 4);\n        }\n        return PDFHexString.of(hexCodes.join(''));\n    };\n    // The advanceWidth takes into account kerning automatically, so we don't\n    // have to do that manually like we do for the standard fonts.\n    CustomFontEmbedder.prototype.widthOfTextAtSize = function (text, size) {\n        var glyphs = this.font.layout(text, this.fontFeatures).glyphs;\n        var totalWidth = 0;\n        for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n            totalWidth += glyphs[idx].advanceWidth * this.scale;\n        }\n        var scale = size / 1000;\n        return totalWidth * scale;\n    };\n    CustomFontEmbedder.prototype.heightOfFontAtSize = function (size, options) {\n        if (options === void 0) { options = {}; }\n        var _a = options.descender, descender = _a === void 0 ? true : _a;\n        var _b = this.font, ascent = _b.ascent, descent = _b.descent, bbox = _b.bbox;\n        var yTop = (ascent || bbox.maxY) * this.scale;\n        var yBottom = (descent || bbox.minY) * this.scale;\n        var height = yTop - yBottom;\n        if (!descender)\n            height -= Math.abs(descent) || 0;\n        return (height / 1000) * size;\n    };\n    CustomFontEmbedder.prototype.sizeOfFontAtHeight = function (height) {\n        var _a = this.font, ascent = _a.ascent, descent = _a.descent, bbox = _a.bbox;\n        var yTop = (ascent || bbox.maxY) * this.scale;\n        var yBottom = (descent || bbox.minY) * this.scale;\n        return (1000 * height) / (yTop - yBottom);\n    };\n    CustomFontEmbedder.prototype.embedIntoContext = function (context, ref) {\n        this.baseFontName =\n            this.customName || context.addRandomSuffix(this.fontName);\n        return this.embedFontDict(context, ref);\n    };\n    CustomFontEmbedder.prototype.embedFontDict = function (context, ref) {\n        return __awaiter(this, void 0, void 0, function () {\n            var cidFontDictRef, unicodeCMapRef, fontDict;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.embedCIDFontDict(context)];\n                    case 1:\n                        cidFontDictRef = _a.sent();\n                        unicodeCMapRef = this.embedUnicodeCmap(context);\n                        fontDict = context.obj({\n                            Type: 'Font',\n                            Subtype: 'Type0',\n                            BaseFont: this.baseFontName,\n                            Encoding: 'Identity-H',\n                            DescendantFonts: [cidFontDictRef],\n                            ToUnicode: unicodeCMapRef,\n                        });\n                        if (ref) {\n                            context.assign(ref, fontDict);\n                            return [2 /*return*/, ref];\n                        }\n                        else {\n                            return [2 /*return*/, context.register(fontDict)];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    CustomFontEmbedder.prototype.isCFF = function () {\n        return this.font.cff;\n    };\n    CustomFontEmbedder.prototype.embedCIDFontDict = function (context) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fontDescriptorRef, cidFontDict;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.embedFontDescriptor(context)];\n                    case 1:\n                        fontDescriptorRef = _a.sent();\n                        cidFontDict = context.obj({\n                            Type: 'Font',\n                            Subtype: this.isCFF() ? 'CIDFontType0' : 'CIDFontType2',\n                            CIDToGIDMap: 'Identity',\n                            BaseFont: this.baseFontName,\n                            CIDSystemInfo: {\n                                Registry: PDFString.of('Adobe'),\n                                Ordering: PDFString.of('Identity'),\n                                Supplement: 0,\n                            },\n                            FontDescriptor: fontDescriptorRef,\n                            W: this.computeWidths(),\n                        });\n                        return [2 /*return*/, context.register(cidFontDict)];\n                }\n            });\n        });\n    };\n    CustomFontEmbedder.prototype.embedFontDescriptor = function (context) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fontStreamRef, scale, _a, italicAngle, ascent, descent, capHeight, xHeight, _b, minX, minY, maxX, maxY, fontDescriptor;\n            var _c;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0: return [4 /*yield*/, this.embedFontStream(context)];\n                    case 1:\n                        fontStreamRef = _d.sent();\n                        scale = this.scale;\n                        _a = this.font, italicAngle = _a.italicAngle, ascent = _a.ascent, descent = _a.descent, capHeight = _a.capHeight, xHeight = _a.xHeight;\n                        _b = this.font.bbox, minX = _b.minX, minY = _b.minY, maxX = _b.maxX, maxY = _b.maxY;\n                        fontDescriptor = context.obj((_c = {\n                                Type: 'FontDescriptor',\n                                FontName: this.baseFontName,\n                                Flags: deriveFontFlags(this.font),\n                                FontBBox: [minX * scale, minY * scale, maxX * scale, maxY * scale],\n                                ItalicAngle: italicAngle,\n                                Ascent: ascent * scale,\n                                Descent: descent * scale,\n                                CapHeight: (capHeight || ascent) * scale,\n                                XHeight: (xHeight || 0) * scale,\n                                // Not sure how to compute/find this, nor is anybody else really:\n                                // https://stackoverflow.com/questions/35485179/stemv-value-of-the-truetype-font\n                                StemV: 0\n                            },\n                            _c[this.isCFF() ? 'FontFile3' : 'FontFile2'] = fontStreamRef,\n                            _c));\n                        return [2 /*return*/, context.register(fontDescriptor)];\n                }\n            });\n        });\n    };\n    CustomFontEmbedder.prototype.serializeFont = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.fontData];\n            });\n        });\n    };\n    CustomFontEmbedder.prototype.embedFontStream = function (context) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fontStream, _a, _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        _b = (_a = context).flateStream;\n                        return [4 /*yield*/, this.serializeFont()];\n                    case 1:\n                        fontStream = _b.apply(_a, [_c.sent(), {\n                                Subtype: this.isCFF() ? 'CIDFontType0C' : undefined,\n                            }]);\n                        return [2 /*return*/, context.register(fontStream)];\n                }\n            });\n        });\n    };\n    CustomFontEmbedder.prototype.embedUnicodeCmap = function (context) {\n        var cmap = createCmap(this.glyphCache.access(), this.glyphId.bind(this));\n        var cmapStream = context.flateStream(cmap);\n        return context.register(cmapStream);\n    };\n    CustomFontEmbedder.prototype.glyphId = function (glyph) {\n        return glyph ? glyph.id : -1;\n    };\n    CustomFontEmbedder.prototype.computeWidths = function () {\n        var glyphs = this.glyphCache.access();\n        var widths = [];\n        var currSection = [];\n        for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n            var currGlyph = glyphs[idx];\n            var prevGlyph = glyphs[idx - 1];\n            var currGlyphId = this.glyphId(currGlyph);\n            var prevGlyphId = this.glyphId(prevGlyph);\n            if (idx === 0) {\n                widths.push(currGlyphId);\n            }\n            else if (currGlyphId - prevGlyphId !== 1) {\n                widths.push(currSection);\n                widths.push(currGlyphId);\n                currSection = [];\n            }\n            currSection.push(currGlyph.advanceWidth * this.scale);\n        }\n        widths.push(currSection);\n        return widths;\n    };\n    return CustomFontEmbedder;\n}());\nexport default CustomFontEmbedder;\n//# sourceMappingURL=CustomFontEmbedder.js.map"]},"metadata":{},"sourceType":"module"}