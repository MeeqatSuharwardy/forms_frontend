{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { MethodNotImplementedError } from \"../errors\";\nimport PDFName from \"./PDFName\";\nimport PDFNumber from \"./PDFNumber\";\nimport PDFObject from \"./PDFObject\";\nimport CharCodes from \"../syntax/CharCodes\";\nvar PDFStream = /** @class */function (_super) {\n  __extends(PDFStream, _super);\n  function PDFStream(dict) {\n    var _this = _super.call(this) || this;\n    _this.dict = dict;\n    return _this;\n  }\n  PDFStream.prototype.clone = function (_context) {\n    throw new MethodNotImplementedError(this.constructor.name, 'clone');\n  };\n  PDFStream.prototype.getContentsString = function () {\n    throw new MethodNotImplementedError(this.constructor.name, 'getContentsString');\n  };\n  PDFStream.prototype.getContents = function () {\n    throw new MethodNotImplementedError(this.constructor.name, 'getContents');\n  };\n  PDFStream.prototype.getContentsSize = function () {\n    throw new MethodNotImplementedError(this.constructor.name, 'getContentsSize');\n  };\n  PDFStream.prototype.updateDict = function () {\n    var contentsSize = this.getContentsSize();\n    this.dict.set(PDFName.Length, PDFNumber.of(contentsSize));\n  };\n  PDFStream.prototype.sizeInBytes = function () {\n    this.updateDict();\n    return this.dict.sizeInBytes() + this.getContentsSize() + 18;\n  };\n  PDFStream.prototype.toString = function () {\n    this.updateDict();\n    var streamString = this.dict.toString();\n    streamString += '\\nstream\\n';\n    streamString += this.getContentsString();\n    streamString += '\\nendstream';\n    return streamString;\n  };\n  PDFStream.prototype.copyBytesInto = function (buffer, offset) {\n    this.updateDict();\n    var initialOffset = offset;\n    offset += this.dict.copyBytesInto(buffer, offset);\n    buffer[offset++] = CharCodes.Newline;\n    buffer[offset++] = CharCodes.s;\n    buffer[offset++] = CharCodes.t;\n    buffer[offset++] = CharCodes.r;\n    buffer[offset++] = CharCodes.e;\n    buffer[offset++] = CharCodes.a;\n    buffer[offset++] = CharCodes.m;\n    buffer[offset++] = CharCodes.Newline;\n    var contents = this.getContents();\n    for (var idx = 0, len = contents.length; idx < len; idx++) {\n      buffer[offset++] = contents[idx];\n    }\n    buffer[offset++] = CharCodes.Newline;\n    buffer[offset++] = CharCodes.e;\n    buffer[offset++] = CharCodes.n;\n    buffer[offset++] = CharCodes.d;\n    buffer[offset++] = CharCodes.s;\n    buffer[offset++] = CharCodes.t;\n    buffer[offset++] = CharCodes.r;\n    buffer[offset++] = CharCodes.e;\n    buffer[offset++] = CharCodes.a;\n    buffer[offset++] = CharCodes.m;\n    return offset - initialOffset;\n  };\n  return PDFStream;\n}(PDFObject);\nexport default PDFStream;","map":{"version":3,"sources":["../../../src/core/objects/PDFStream.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { MethodNotImplementedError } from \"../errors\";\nimport PDFName from \"./PDFName\";\nimport PDFNumber from \"./PDFNumber\";\nimport PDFObject from \"./PDFObject\";\nimport CharCodes from \"../syntax/CharCodes\";\nvar PDFStream = /** @class */ (function (_super) {\n    __extends(PDFStream, _super);\n    function PDFStream(dict) {\n        var _this = _super.call(this) || this;\n        _this.dict = dict;\n        return _this;\n    }\n    PDFStream.prototype.clone = function (_context) {\n        throw new MethodNotImplementedError(this.constructor.name, 'clone');\n    };\n    PDFStream.prototype.getContentsString = function () {\n        throw new MethodNotImplementedError(this.constructor.name, 'getContentsString');\n    };\n    PDFStream.prototype.getContents = function () {\n        throw new MethodNotImplementedError(this.constructor.name, 'getContents');\n    };\n    PDFStream.prototype.getContentsSize = function () {\n        throw new MethodNotImplementedError(this.constructor.name, 'getContentsSize');\n    };\n    PDFStream.prototype.updateDict = function () {\n        var contentsSize = this.getContentsSize();\n        this.dict.set(PDFName.Length, PDFNumber.of(contentsSize));\n    };\n    PDFStream.prototype.sizeInBytes = function () {\n        this.updateDict();\n        return this.dict.sizeInBytes() + this.getContentsSize() + 18;\n    };\n    PDFStream.prototype.toString = function () {\n        this.updateDict();\n        var streamString = this.dict.toString();\n        streamString += '\\nstream\\n';\n        streamString += this.getContentsString();\n        streamString += '\\nendstream';\n        return streamString;\n    };\n    PDFStream.prototype.copyBytesInto = function (buffer, offset) {\n        this.updateDict();\n        var initialOffset = offset;\n        offset += this.dict.copyBytesInto(buffer, offset);\n        buffer[offset++] = CharCodes.Newline;\n        buffer[offset++] = CharCodes.s;\n        buffer[offset++] = CharCodes.t;\n        buffer[offset++] = CharCodes.r;\n        buffer[offset++] = CharCodes.e;\n        buffer[offset++] = CharCodes.a;\n        buffer[offset++] = CharCodes.m;\n        buffer[offset++] = CharCodes.Newline;\n        var contents = this.getContents();\n        for (var idx = 0, len = contents.length; idx < len; idx++) {\n            buffer[offset++] = contents[idx];\n        }\n        buffer[offset++] = CharCodes.Newline;\n        buffer[offset++] = CharCodes.e;\n        buffer[offset++] = CharCodes.n;\n        buffer[offset++] = CharCodes.d;\n        buffer[offset++] = CharCodes.s;\n        buffer[offset++] = CharCodes.t;\n        buffer[offset++] = CharCodes.r;\n        buffer[offset++] = CharCodes.e;\n        buffer[offset++] = CharCodes.a;\n        buffer[offset++] = CharCodes.m;\n        return offset - initialOffset;\n    };\n    return PDFStream;\n}(PDFObject));\nexport default PDFStream;\n//# sourceMappingURL=PDFStream.js.map"]},"metadata":{},"sourceType":"module"}