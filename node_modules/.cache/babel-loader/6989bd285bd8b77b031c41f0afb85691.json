{"ast":null,"code":"import { NextByteAssertionError } from \"../errors\";\nimport { decodePDFRawStream } from \"../streams/decode\";\nimport CharCodes from \"../syntax/CharCodes\";\n// TODO: See how line/col tracking affects performance\nvar ByteStream = /** @class */function () {\n  function ByteStream(bytes) {\n    this.idx = 0;\n    this.line = 0;\n    this.column = 0;\n    this.bytes = bytes;\n    this.length = this.bytes.length;\n  }\n  ByteStream.prototype.moveTo = function (offset) {\n    this.idx = offset;\n  };\n  ByteStream.prototype.next = function () {\n    var byte = this.bytes[this.idx++];\n    if (byte === CharCodes.Newline) {\n      this.line += 1;\n      this.column = 0;\n    } else {\n      this.column += 1;\n    }\n    return byte;\n  };\n  ByteStream.prototype.assertNext = function (expected) {\n    if (this.peek() !== expected) {\n      throw new NextByteAssertionError(this.position(), expected, this.peek());\n    }\n    return this.next();\n  };\n  ByteStream.prototype.peek = function () {\n    return this.bytes[this.idx];\n  };\n  ByteStream.prototype.peekAhead = function (steps) {\n    return this.bytes[this.idx + steps];\n  };\n  ByteStream.prototype.peekAt = function (offset) {\n    return this.bytes[offset];\n  };\n  ByteStream.prototype.done = function () {\n    return this.idx >= this.length;\n  };\n  ByteStream.prototype.offset = function () {\n    return this.idx;\n  };\n  ByteStream.prototype.slice = function (start, end) {\n    return this.bytes.slice(start, end);\n  };\n  ByteStream.prototype.position = function () {\n    return {\n      line: this.line,\n      column: this.column,\n      offset: this.idx\n    };\n  };\n  ByteStream.of = function (bytes) {\n    return new ByteStream(bytes);\n  };\n  ByteStream.fromPDFRawStream = function (rawStream) {\n    return ByteStream.of(decodePDFRawStream(rawStream).decode());\n  };\n  return ByteStream;\n}();\nexport default ByteStream;","map":{"version":3,"sources":["../../../src/core/parser/ByteStream.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { NextByteAssertionError } from \"../errors\";\nimport { decodePDFRawStream } from \"../streams/decode\";\nimport CharCodes from \"../syntax/CharCodes\";\n// TODO: See how line/col tracking affects performance\nvar ByteStream = /** @class */ (function () {\n    function ByteStream(bytes) {\n        this.idx = 0;\n        this.line = 0;\n        this.column = 0;\n        this.bytes = bytes;\n        this.length = this.bytes.length;\n    }\n    ByteStream.prototype.moveTo = function (offset) {\n        this.idx = offset;\n    };\n    ByteStream.prototype.next = function () {\n        var byte = this.bytes[this.idx++];\n        if (byte === CharCodes.Newline) {\n            this.line += 1;\n            this.column = 0;\n        }\n        else {\n            this.column += 1;\n        }\n        return byte;\n    };\n    ByteStream.prototype.assertNext = function (expected) {\n        if (this.peek() !== expected) {\n            throw new NextByteAssertionError(this.position(), expected, this.peek());\n        }\n        return this.next();\n    };\n    ByteStream.prototype.peek = function () {\n        return this.bytes[this.idx];\n    };\n    ByteStream.prototype.peekAhead = function (steps) {\n        return this.bytes[this.idx + steps];\n    };\n    ByteStream.prototype.peekAt = function (offset) {\n        return this.bytes[offset];\n    };\n    ByteStream.prototype.done = function () {\n        return this.idx >= this.length;\n    };\n    ByteStream.prototype.offset = function () {\n        return this.idx;\n    };\n    ByteStream.prototype.slice = function (start, end) {\n        return this.bytes.slice(start, end);\n    };\n    ByteStream.prototype.position = function () {\n        return { line: this.line, column: this.column, offset: this.idx };\n    };\n    ByteStream.of = function (bytes) { return new ByteStream(bytes); };\n    ByteStream.fromPDFRawStream = function (rawStream) {\n        return ByteStream.of(decodePDFRawStream(rawStream).decode());\n    };\n    return ByteStream;\n}());\nexport default ByteStream;\n//# sourceMappingURL=ByteStream.js.map"]},"metadata":{},"sourceType":"module"}