{"ast":null,"code":"import PDFDict from \"../objects/PDFDict\";\nimport PDFArray from \"../objects/PDFArray\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFAcroNonTerminal from \"./PDFAcroNonTerminal\";\nimport { createPDFAcroField, createPDFAcroFields } from \"./utils\";\nvar PDFAcroForm = /** @class */function () {\n  function PDFAcroForm(dict) {\n    this.dict = dict;\n  }\n  PDFAcroForm.prototype.Fields = function () {\n    var fields = this.dict.lookup(PDFName.of('Fields'));\n    if (fields instanceof PDFArray) return fields;\n    return undefined;\n  };\n  PDFAcroForm.prototype.getFields = function () {\n    var Fields = this.normalizedEntries().Fields;\n    var fields = new Array(Fields.size());\n    for (var idx = 0, len = Fields.size(); idx < len; idx++) {\n      var ref = Fields.get(idx);\n      var dict = Fields.lookup(idx, PDFDict);\n      fields[idx] = [createPDFAcroField(dict, ref), ref];\n    }\n    return fields;\n  };\n  PDFAcroForm.prototype.getAllFields = function () {\n    var allFields = [];\n    var pushFields = function (fields) {\n      if (!fields) return;\n      for (var idx = 0, len = fields.length; idx < len; idx++) {\n        var field = fields[idx];\n        allFields.push(field);\n        var fieldModel = field[0];\n        if (fieldModel instanceof PDFAcroNonTerminal) {\n          pushFields(createPDFAcroFields(fieldModel.Kids()));\n        }\n      }\n    };\n    pushFields(this.getFields());\n    return allFields;\n  };\n  PDFAcroForm.prototype.addField = function (field) {\n    var Fields = this.normalizedEntries().Fields;\n    Fields === null || Fields === void 0 ? void 0 : Fields.push(field);\n  };\n  PDFAcroForm.prototype.removeField = function (field) {\n    var parent = field.getParent();\n    var fields = parent === undefined ? this.normalizedEntries().Fields : parent.Kids();\n    var index = fields === null || fields === void 0 ? void 0 : fields.indexOf(field.ref);\n    if (fields === undefined || index === undefined) {\n      throw new Error(\"Tried to remove inexistent field \" + field.getFullyQualifiedName());\n    }\n    fields.remove(index);\n    if (parent !== undefined && fields.size() === 0) {\n      this.removeField(parent);\n    }\n  };\n  PDFAcroForm.prototype.normalizedEntries = function () {\n    var Fields = this.Fields();\n    if (!Fields) {\n      Fields = this.dict.context.obj([]);\n      this.dict.set(PDFName.of('Fields'), Fields);\n    }\n    return {\n      Fields: Fields\n    };\n  };\n  PDFAcroForm.fromDict = function (dict) {\n    return new PDFAcroForm(dict);\n  };\n  PDFAcroForm.create = function (context) {\n    var dict = context.obj({\n      Fields: []\n    });\n    return new PDFAcroForm(dict);\n  };\n  return PDFAcroForm;\n}();\nexport default PDFAcroForm;","map":{"version":3,"sources":["../../../src/core/acroform/PDFAcroForm.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import PDFDict from \"../objects/PDFDict\";\nimport PDFArray from \"../objects/PDFArray\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFAcroNonTerminal from \"./PDFAcroNonTerminal\";\nimport { createPDFAcroField, createPDFAcroFields, } from \"./utils\";\nvar PDFAcroForm = /** @class */ (function () {\n    function PDFAcroForm(dict) {\n        this.dict = dict;\n    }\n    PDFAcroForm.prototype.Fields = function () {\n        var fields = this.dict.lookup(PDFName.of('Fields'));\n        if (fields instanceof PDFArray)\n            return fields;\n        return undefined;\n    };\n    PDFAcroForm.prototype.getFields = function () {\n        var Fields = this.normalizedEntries().Fields;\n        var fields = new Array(Fields.size());\n        for (var idx = 0, len = Fields.size(); idx < len; idx++) {\n            var ref = Fields.get(idx);\n            var dict = Fields.lookup(idx, PDFDict);\n            fields[idx] = [createPDFAcroField(dict, ref), ref];\n        }\n        return fields;\n    };\n    PDFAcroForm.prototype.getAllFields = function () {\n        var allFields = [];\n        var pushFields = function (fields) {\n            if (!fields)\n                return;\n            for (var idx = 0, len = fields.length; idx < len; idx++) {\n                var field = fields[idx];\n                allFields.push(field);\n                var fieldModel = field[0];\n                if (fieldModel instanceof PDFAcroNonTerminal) {\n                    pushFields(createPDFAcroFields(fieldModel.Kids()));\n                }\n            }\n        };\n        pushFields(this.getFields());\n        return allFields;\n    };\n    PDFAcroForm.prototype.addField = function (field) {\n        var Fields = this.normalizedEntries().Fields;\n        Fields === null || Fields === void 0 ? void 0 : Fields.push(field);\n    };\n    PDFAcroForm.prototype.removeField = function (field) {\n        var parent = field.getParent();\n        var fields = parent === undefined ? this.normalizedEntries().Fields : parent.Kids();\n        var index = fields === null || fields === void 0 ? void 0 : fields.indexOf(field.ref);\n        if (fields === undefined || index === undefined) {\n            throw new Error(\"Tried to remove inexistent field \" + field.getFullyQualifiedName());\n        }\n        fields.remove(index);\n        if (parent !== undefined && fields.size() === 0) {\n            this.removeField(parent);\n        }\n    };\n    PDFAcroForm.prototype.normalizedEntries = function () {\n        var Fields = this.Fields();\n        if (!Fields) {\n            Fields = this.dict.context.obj([]);\n            this.dict.set(PDFName.of('Fields'), Fields);\n        }\n        return { Fields: Fields };\n    };\n    PDFAcroForm.fromDict = function (dict) { return new PDFAcroForm(dict); };\n    PDFAcroForm.create = function (context) {\n        var dict = context.obj({ Fields: [] });\n        return new PDFAcroForm(dict);\n    };\n    return PDFAcroForm;\n}());\nexport default PDFAcroForm;\n//# sourceMappingURL=PDFAcroForm.js.map"]},"metadata":{},"sourceType":"module"}