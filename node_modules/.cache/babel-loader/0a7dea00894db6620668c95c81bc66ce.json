{"ast":null,"code":"/*\n * Copyright 2012 Mozilla Foundation\n *\n * The Stream class contained in this file is a TypeScript port of the\n * JavaScript Stream class in Mozilla's pdf.js project, made available\n * under the Apache 2.0 open source license.\n */\nvar Stream = /** @class */function () {\n  function Stream(buffer, start, length) {\n    this.bytes = buffer;\n    this.start = start || 0;\n    this.pos = this.start;\n    this.end = !!start && !!length ? start + length : this.bytes.length;\n  }\n  Object.defineProperty(Stream.prototype, \"length\", {\n    get: function () {\n      return this.end - this.start;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Stream.prototype, \"isEmpty\", {\n    get: function () {\n      return this.length === 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Stream.prototype.getByte = function () {\n    if (this.pos >= this.end) {\n      return -1;\n    }\n    return this.bytes[this.pos++];\n  };\n  Stream.prototype.getUint16 = function () {\n    var b0 = this.getByte();\n    var b1 = this.getByte();\n    if (b0 === -1 || b1 === -1) {\n      return -1;\n    }\n    return (b0 << 8) + b1;\n  };\n  Stream.prototype.getInt32 = function () {\n    var b0 = this.getByte();\n    var b1 = this.getByte();\n    var b2 = this.getByte();\n    var b3 = this.getByte();\n    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n  };\n  // Returns subarray of original buffer, should only be read.\n  Stream.prototype.getBytes = function (length, forceClamped) {\n    if (forceClamped === void 0) {\n      forceClamped = false;\n    }\n    var bytes = this.bytes;\n    var pos = this.pos;\n    var strEnd = this.end;\n    if (!length) {\n      var subarray = bytes.subarray(pos, strEnd);\n      // `this.bytes` is always a `Uint8Array` here.\n      return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n    } else {\n      var end = pos + length;\n      if (end > strEnd) {\n        end = strEnd;\n      }\n      this.pos = end;\n      var subarray = bytes.subarray(pos, end);\n      // `this.bytes` is always a `Uint8Array` here.\n      return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n    }\n  };\n  Stream.prototype.peekByte = function () {\n    var peekedByte = this.getByte();\n    this.pos--;\n    return peekedByte;\n  };\n  Stream.prototype.peekBytes = function (length, forceClamped) {\n    if (forceClamped === void 0) {\n      forceClamped = false;\n    }\n    var bytes = this.getBytes(length, forceClamped);\n    this.pos -= bytes.length;\n    return bytes;\n  };\n  Stream.prototype.skip = function (n) {\n    if (!n) {\n      n = 1;\n    }\n    this.pos += n;\n  };\n  Stream.prototype.reset = function () {\n    this.pos = this.start;\n  };\n  Stream.prototype.moveStart = function () {\n    this.start = this.pos;\n  };\n  Stream.prototype.makeSubStream = function (start, length) {\n    return new Stream(this.bytes, start, length);\n  };\n  Stream.prototype.decode = function () {\n    return this.bytes;\n  };\n  return Stream;\n}();\nexport default Stream;","map":{"version":3,"sources":["../../../src/core/streams/Stream.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2012 Mozilla Foundation\n *\n * The Stream class contained in this file is a TypeScript port of the\n * JavaScript Stream class in Mozilla's pdf.js project, made available\n * under the Apache 2.0 open source license.\n */\nvar Stream = /** @class */ (function () {\n    function Stream(buffer, start, length) {\n        this.bytes = buffer;\n        this.start = start || 0;\n        this.pos = this.start;\n        this.end = !!start && !!length ? start + length : this.bytes.length;\n    }\n    Object.defineProperty(Stream.prototype, \"length\", {\n        get: function () {\n            return this.end - this.start;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Stream.prototype, \"isEmpty\", {\n        get: function () {\n            return this.length === 0;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Stream.prototype.getByte = function () {\n        if (this.pos >= this.end) {\n            return -1;\n        }\n        return this.bytes[this.pos++];\n    };\n    Stream.prototype.getUint16 = function () {\n        var b0 = this.getByte();\n        var b1 = this.getByte();\n        if (b0 === -1 || b1 === -1) {\n            return -1;\n        }\n        return (b0 << 8) + b1;\n    };\n    Stream.prototype.getInt32 = function () {\n        var b0 = this.getByte();\n        var b1 = this.getByte();\n        var b2 = this.getByte();\n        var b3 = this.getByte();\n        return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n    };\n    // Returns subarray of original buffer, should only be read.\n    Stream.prototype.getBytes = function (length, forceClamped) {\n        if (forceClamped === void 0) { forceClamped = false; }\n        var bytes = this.bytes;\n        var pos = this.pos;\n        var strEnd = this.end;\n        if (!length) {\n            var subarray = bytes.subarray(pos, strEnd);\n            // `this.bytes` is always a `Uint8Array` here.\n            return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n        }\n        else {\n            var end = pos + length;\n            if (end > strEnd) {\n                end = strEnd;\n            }\n            this.pos = end;\n            var subarray = bytes.subarray(pos, end);\n            // `this.bytes` is always a `Uint8Array` here.\n            return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n        }\n    };\n    Stream.prototype.peekByte = function () {\n        var peekedByte = this.getByte();\n        this.pos--;\n        return peekedByte;\n    };\n    Stream.prototype.peekBytes = function (length, forceClamped) {\n        if (forceClamped === void 0) { forceClamped = false; }\n        var bytes = this.getBytes(length, forceClamped);\n        this.pos -= bytes.length;\n        return bytes;\n    };\n    Stream.prototype.skip = function (n) {\n        if (!n) {\n            n = 1;\n        }\n        this.pos += n;\n    };\n    Stream.prototype.reset = function () {\n        this.pos = this.start;\n    };\n    Stream.prototype.moveStart = function () {\n        this.start = this.pos;\n    };\n    Stream.prototype.makeSubStream = function (start, length) {\n        return new Stream(this.bytes, start, length);\n    };\n    Stream.prototype.decode = function () {\n        return this.bytes;\n    };\n    return Stream;\n}());\nexport default Stream;\n//# sourceMappingURL=Stream.js.map"]},"metadata":{},"sourceType":"module"}