{"ast":null,"code":"import { Encodings, Font, FontNames } from '@pdf-lib/standard-fonts';\nimport PDFHexString from \"../objects/PDFHexString\";\nimport { toCodePoint, toHexString } from \"../../utils\";\n/**\n * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\n * this class borrows from:\n *   https://github.com/foliojs/pdfkit/blob/f91bdd61c164a72ea06be1a43dc0a412afc3925f/lib/font/afm.coffee\n */\nvar StandardFontEmbedder = /** @class */function () {\n  function StandardFontEmbedder(fontName, customName) {\n    // prettier-ignore\n    this.encoding = fontName === FontNames.ZapfDingbats ? Encodings.ZapfDingbats : fontName === FontNames.Symbol ? Encodings.Symbol : Encodings.WinAnsi;\n    this.font = Font.load(fontName);\n    this.fontName = this.font.FontName;\n    this.customName = customName;\n  }\n  /**\n   * Encode the JavaScript string into this font. (JavaScript encodes strings in\n   * Unicode, but standard fonts use either WinAnsi, ZapfDingbats, or Symbol\n   * encodings)\n   */\n  StandardFontEmbedder.prototype.encodeText = function (text) {\n    var glyphs = this.encodeTextAsGlyphs(text);\n    var hexCodes = new Array(glyphs.length);\n    for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n      hexCodes[idx] = toHexString(glyphs[idx].code);\n    }\n    return PDFHexString.of(hexCodes.join(''));\n  };\n  StandardFontEmbedder.prototype.widthOfTextAtSize = function (text, size) {\n    var glyphs = this.encodeTextAsGlyphs(text);\n    var totalWidth = 0;\n    for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n      var left = glyphs[idx].name;\n      var right = (glyphs[idx + 1] || {}).name;\n      var kernAmount = this.font.getXAxisKerningForPair(left, right) || 0;\n      totalWidth += this.widthOfGlyph(left) + kernAmount;\n    }\n    var scale = size / 1000;\n    return totalWidth * scale;\n  };\n  StandardFontEmbedder.prototype.heightOfFontAtSize = function (size, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _a = options.descender,\n      descender = _a === void 0 ? true : _a;\n    var _b = this.font,\n      Ascender = _b.Ascender,\n      Descender = _b.Descender,\n      FontBBox = _b.FontBBox;\n    var yTop = Ascender || FontBBox[3];\n    var yBottom = Descender || FontBBox[1];\n    var height = yTop - yBottom;\n    if (!descender) height += Descender || 0;\n    return height / 1000 * size;\n  };\n  StandardFontEmbedder.prototype.sizeOfFontAtHeight = function (height) {\n    var _a = this.font,\n      Ascender = _a.Ascender,\n      Descender = _a.Descender,\n      FontBBox = _a.FontBBox;\n    var yTop = Ascender || FontBBox[3];\n    var yBottom = Descender || FontBBox[1];\n    return 1000 * height / (yTop - yBottom);\n  };\n  StandardFontEmbedder.prototype.embedIntoContext = function (context, ref) {\n    var fontDict = context.obj({\n      Type: 'Font',\n      Subtype: 'Type1',\n      BaseFont: this.customName || this.fontName,\n      Encoding: this.encoding === Encodings.WinAnsi ? 'WinAnsiEncoding' : undefined\n    });\n    if (ref) {\n      context.assign(ref, fontDict);\n      return ref;\n    } else {\n      return context.register(fontDict);\n    }\n  };\n  StandardFontEmbedder.prototype.widthOfGlyph = function (glyphName) {\n    // Default to 250 if font doesn't specify a width\n    return this.font.getWidthOfGlyph(glyphName) || 250;\n  };\n  StandardFontEmbedder.prototype.encodeTextAsGlyphs = function (text) {\n    var codePoints = Array.from(text);\n    var glyphs = new Array(codePoints.length);\n    for (var idx = 0, len = codePoints.length; idx < len; idx++) {\n      var codePoint = toCodePoint(codePoints[idx]);\n      glyphs[idx] = this.encoding.encodeUnicodeCodePoint(codePoint);\n    }\n    return glyphs;\n  };\n  StandardFontEmbedder.for = function (fontName, customName) {\n    return new StandardFontEmbedder(fontName, customName);\n  };\n  return StandardFontEmbedder;\n}();\nexport default StandardFontEmbedder;","map":{"version":3,"sources":["../../../src/core/embedders/StandardFontEmbedder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Encodings, Font, FontNames, } from '@pdf-lib/standard-fonts';\nimport PDFHexString from \"../objects/PDFHexString\";\nimport { toCodePoint, toHexString } from \"../../utils\";\n/**\n * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\n * this class borrows from:\n *   https://github.com/foliojs/pdfkit/blob/f91bdd61c164a72ea06be1a43dc0a412afc3925f/lib/font/afm.coffee\n */\nvar StandardFontEmbedder = /** @class */ (function () {\n    function StandardFontEmbedder(fontName, customName) {\n        // prettier-ignore\n        this.encoding = (fontName === FontNames.ZapfDingbats ? Encodings.ZapfDingbats\n            : fontName === FontNames.Symbol ? Encodings.Symbol\n                : Encodings.WinAnsi);\n        this.font = Font.load(fontName);\n        this.fontName = this.font.FontName;\n        this.customName = customName;\n    }\n    /**\n     * Encode the JavaScript string into this font. (JavaScript encodes strings in\n     * Unicode, but standard fonts use either WinAnsi, ZapfDingbats, or Symbol\n     * encodings)\n     */\n    StandardFontEmbedder.prototype.encodeText = function (text) {\n        var glyphs = this.encodeTextAsGlyphs(text);\n        var hexCodes = new Array(glyphs.length);\n        for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n            hexCodes[idx] = toHexString(glyphs[idx].code);\n        }\n        return PDFHexString.of(hexCodes.join(''));\n    };\n    StandardFontEmbedder.prototype.widthOfTextAtSize = function (text, size) {\n        var glyphs = this.encodeTextAsGlyphs(text);\n        var totalWidth = 0;\n        for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n            var left = glyphs[idx].name;\n            var right = (glyphs[idx + 1] || {}).name;\n            var kernAmount = this.font.getXAxisKerningForPair(left, right) || 0;\n            totalWidth += this.widthOfGlyph(left) + kernAmount;\n        }\n        var scale = size / 1000;\n        return totalWidth * scale;\n    };\n    StandardFontEmbedder.prototype.heightOfFontAtSize = function (size, options) {\n        if (options === void 0) { options = {}; }\n        var _a = options.descender, descender = _a === void 0 ? true : _a;\n        var _b = this.font, Ascender = _b.Ascender, Descender = _b.Descender, FontBBox = _b.FontBBox;\n        var yTop = Ascender || FontBBox[3];\n        var yBottom = Descender || FontBBox[1];\n        var height = yTop - yBottom;\n        if (!descender)\n            height += Descender || 0;\n        return (height / 1000) * size;\n    };\n    StandardFontEmbedder.prototype.sizeOfFontAtHeight = function (height) {\n        var _a = this.font, Ascender = _a.Ascender, Descender = _a.Descender, FontBBox = _a.FontBBox;\n        var yTop = Ascender || FontBBox[3];\n        var yBottom = Descender || FontBBox[1];\n        return (1000 * height) / (yTop - yBottom);\n    };\n    StandardFontEmbedder.prototype.embedIntoContext = function (context, ref) {\n        var fontDict = context.obj({\n            Type: 'Font',\n            Subtype: 'Type1',\n            BaseFont: this.customName || this.fontName,\n            Encoding: this.encoding === Encodings.WinAnsi ? 'WinAnsiEncoding' : undefined,\n        });\n        if (ref) {\n            context.assign(ref, fontDict);\n            return ref;\n        }\n        else {\n            return context.register(fontDict);\n        }\n    };\n    StandardFontEmbedder.prototype.widthOfGlyph = function (glyphName) {\n        // Default to 250 if font doesn't specify a width\n        return this.font.getWidthOfGlyph(glyphName) || 250;\n    };\n    StandardFontEmbedder.prototype.encodeTextAsGlyphs = function (text) {\n        var codePoints = Array.from(text);\n        var glyphs = new Array(codePoints.length);\n        for (var idx = 0, len = codePoints.length; idx < len; idx++) {\n            var codePoint = toCodePoint(codePoints[idx]);\n            glyphs[idx] = this.encoding.encodeUnicodeCodePoint(codePoint);\n        }\n        return glyphs;\n    };\n    StandardFontEmbedder.for = function (fontName, customName) {\n        return new StandardFontEmbedder(fontName, customName);\n    };\n    return StandardFontEmbedder;\n}());\nexport default StandardFontEmbedder;\n//# sourceMappingURL=StandardFontEmbedder.js.map"]},"metadata":{},"sourceType":"module"}