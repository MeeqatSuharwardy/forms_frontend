{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport PDFDocument from \"./PDFDocument\";\nimport { JpegEmbedder, PDFRef, PngEmbedder } from \"../core\";\nimport { assertIs } from \"../utils\";\n/**\n * Represents an image that has been embedded in a [[PDFDocument]].\n */\nvar PDFImage = /** @class */function () {\n  function PDFImage(ref, doc, embedder) {\n    assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n    assertIs(embedder, 'embedder', [[JpegEmbedder, 'JpegEmbedder'], [PngEmbedder, 'PngEmbedder']]);\n    this.ref = ref;\n    this.doc = doc;\n    this.width = embedder.width;\n    this.height = embedder.height;\n    this.embedder = embedder;\n  }\n  /**\n   * Compute the width and height of this image after being scaled by the\n   * given `factor`. For example:\n   * ```js\n   * image.width  // => 500\n   * image.height // => 250\n   *\n   * const scaled = image.scale(0.5)\n   * scaled.width  // => 250\n   * scaled.height // => 125\n   * ```\n   * This operation is often useful before drawing an image with\n   * [[PDFPage.drawImage]] to compute the `width` and `height` options.\n   * @param factor The factor by which this image should be scaled.\n   * @returns The width and height of the image after being scaled.\n   */\n  PDFImage.prototype.scale = function (factor) {\n    assertIs(factor, 'factor', ['number']);\n    return {\n      width: this.width * factor,\n      height: this.height * factor\n    };\n  };\n  /**\n   * Get the width and height of this image after scaling it as large as\n   * possible while maintaining its aspect ratio and not exceeding the\n   * specified `width` and `height`. For example:\n   * ```\n   * image.width  // => 500\n   * image.height // => 250\n   *\n   * const scaled = image.scaleToFit(750, 1000)\n   * scaled.width  // => 750\n   * scaled.height // => 375\n   * ```\n   * The `width` and `height` parameters can also be thought of as the width\n   * and height of a box that the scaled image must fit within.\n   * @param width The bounding box's width.\n   * @param height The bounding box's height.\n   * @returns The width and height of the image after being scaled.\n   */\n  PDFImage.prototype.scaleToFit = function (width, height) {\n    assertIs(width, 'width', ['number']);\n    assertIs(height, 'height', ['number']);\n    var imgWidthScale = width / this.width;\n    var imgHeightScale = height / this.height;\n    var scale = Math.min(imgWidthScale, imgHeightScale);\n    return this.scale(scale);\n  };\n  /**\n   * Get the width and height of this image. For example:\n   * ```js\n   * const { width, height } = image.size()\n   * ```\n   * @returns The width and height of the image.\n   */\n  PDFImage.prototype.size = function () {\n    return this.scale(1);\n  };\n  /**\n   * > **NOTE:** You probably don't need to call this method directly. The\n   * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n   * > automatically ensure all images get embedded.\n   *\n   * Embed this image in its document.\n   *\n   * @returns Resolves when the embedding is complete.\n   */\n  PDFImage.prototype.embed = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, doc, ref;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!this.embedder) return [2 /*return*/];\n            // The image should only be embedded once. If there's a pending embed\n            // operation then wait on it. Otherwise we need to start the embed.\n            if (!this.embedTask) {\n              _a = this, doc = _a.doc, ref = _a.ref;\n              this.embedTask = this.embedder.embedIntoContext(doc.context, ref);\n            }\n            return [4 /*yield*/, this.embedTask];\n          case 1:\n            _b.sent();\n            // We clear `this.embedder` so that the indirectly referenced image data\n            // can be garbage collected, thus avoiding a memory leak.\n            // See https://github.com/Hopding/pdf-lib/pull/1032/files.\n            this.embedder = undefined;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.embedPng]] and [[PDFDocument.embedJpg]]\n   * > methods, which will create instances of [[PDFImage]] for you.\n   *\n   * Create an instance of [[PDFImage]] from an existing ref and embedder\n   *\n   * @param ref The unique reference for this image.\n   * @param doc The document to which the image will belong.\n   * @param embedder The embedder that will be used to embed the image.\n   */\n  PDFImage.of = function (ref, doc, embedder) {\n    return new PDFImage(ref, doc, embedder);\n  };\n  return PDFImage;\n}();\nexport default PDFImage;","map":{"version":3,"sources":["../../src/api/PDFImage.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport PDFDocument from \"./PDFDocument\";\nimport { JpegEmbedder, PDFRef, PngEmbedder } from \"../core\";\nimport { assertIs } from \"../utils\";\n/**\n * Represents an image that has been embedded in a [[PDFDocument]].\n */\nvar PDFImage = /** @class */ (function () {\n    function PDFImage(ref, doc, embedder) {\n        assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n        assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n        assertIs(embedder, 'embedder', [\n            [JpegEmbedder, 'JpegEmbedder'],\n            [PngEmbedder, 'PngEmbedder'],\n        ]);\n        this.ref = ref;\n        this.doc = doc;\n        this.width = embedder.width;\n        this.height = embedder.height;\n        this.embedder = embedder;\n    }\n    /**\n     * Compute the width and height of this image after being scaled by the\n     * given `factor`. For example:\n     * ```js\n     * image.width  // => 500\n     * image.height // => 250\n     *\n     * const scaled = image.scale(0.5)\n     * scaled.width  // => 250\n     * scaled.height // => 125\n     * ```\n     * This operation is often useful before drawing an image with\n     * [[PDFPage.drawImage]] to compute the `width` and `height` options.\n     * @param factor The factor by which this image should be scaled.\n     * @returns The width and height of the image after being scaled.\n     */\n    PDFImage.prototype.scale = function (factor) {\n        assertIs(factor, 'factor', ['number']);\n        return { width: this.width * factor, height: this.height * factor };\n    };\n    /**\n     * Get the width and height of this image after scaling it as large as\n     * possible while maintaining its aspect ratio and not exceeding the\n     * specified `width` and `height`. For example:\n     * ```\n     * image.width  // => 500\n     * image.height // => 250\n     *\n     * const scaled = image.scaleToFit(750, 1000)\n     * scaled.width  // => 750\n     * scaled.height // => 375\n     * ```\n     * The `width` and `height` parameters can also be thought of as the width\n     * and height of a box that the scaled image must fit within.\n     * @param width The bounding box's width.\n     * @param height The bounding box's height.\n     * @returns The width and height of the image after being scaled.\n     */\n    PDFImage.prototype.scaleToFit = function (width, height) {\n        assertIs(width, 'width', ['number']);\n        assertIs(height, 'height', ['number']);\n        var imgWidthScale = width / this.width;\n        var imgHeightScale = height / this.height;\n        var scale = Math.min(imgWidthScale, imgHeightScale);\n        return this.scale(scale);\n    };\n    /**\n     * Get the width and height of this image. For example:\n     * ```js\n     * const { width, height } = image.size()\n     * ```\n     * @returns The width and height of the image.\n     */\n    PDFImage.prototype.size = function () {\n        return this.scale(1);\n    };\n    /**\n     * > **NOTE:** You probably don't need to call this method directly. The\n     * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n     * > automatically ensure all images get embedded.\n     *\n     * Embed this image in its document.\n     *\n     * @returns Resolves when the embedding is complete.\n     */\n    PDFImage.prototype.embed = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, doc, ref;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!this.embedder)\n                            return [2 /*return*/];\n                        // The image should only be embedded once. If there's a pending embed\n                        // operation then wait on it. Otherwise we need to start the embed.\n                        if (!this.embedTask) {\n                            _a = this, doc = _a.doc, ref = _a.ref;\n                            this.embedTask = this.embedder.embedIntoContext(doc.context, ref);\n                        }\n                        return [4 /*yield*/, this.embedTask];\n                    case 1:\n                        _b.sent();\n                        // We clear `this.embedder` so that the indirectly referenced image data\n                        // can be garbage collected, thus avoiding a memory leak.\n                        // See https://github.com/Hopding/pdf-lib/pull/1032/files.\n                        this.embedder = undefined;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * > **NOTE:** You probably don't want to call this method directly. Instead,\n     * > consider using the [[PDFDocument.embedPng]] and [[PDFDocument.embedJpg]]\n     * > methods, which will create instances of [[PDFImage]] for you.\n     *\n     * Create an instance of [[PDFImage]] from an existing ref and embedder\n     *\n     * @param ref The unique reference for this image.\n     * @param doc The document to which the image will belong.\n     * @param embedder The embedder that will be used to embed the image.\n     */\n    PDFImage.of = function (ref, doc, embedder) {\n        return new PDFImage(ref, doc, embedder);\n    };\n    return PDFImage;\n}());\nexport default PDFImage;\n//# sourceMappingURL=PDFImage.js.map"]},"metadata":{},"sourceType":"module"}