{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFString from \"../objects/PDFString\";\nimport PDFHexString from \"../objects/PDFHexString\";\nimport PDFArray from \"../objects/PDFArray\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFAcroTerminal from \"./PDFAcroTerminal\";\nimport { IndexOutOfBoundsError } from \"../errors\";\nvar PDFAcroButton = /** @class */function (_super) {\n  __extends(PDFAcroButton, _super);\n  function PDFAcroButton() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  PDFAcroButton.prototype.Opt = function () {\n    return this.dict.lookupMaybe(PDFName.of('Opt'), PDFString, PDFHexString, PDFArray);\n  };\n  PDFAcroButton.prototype.setOpt = function (opt) {\n    this.dict.set(PDFName.of('Opt'), this.dict.context.obj(opt));\n  };\n  PDFAcroButton.prototype.getExportValues = function () {\n    var opt = this.Opt();\n    if (!opt) return undefined;\n    if (opt instanceof PDFString || opt instanceof PDFHexString) {\n      return [opt];\n    }\n    var values = [];\n    for (var idx = 0, len = opt.size(); idx < len; idx++) {\n      var value = opt.lookup(idx);\n      if (value instanceof PDFString || value instanceof PDFHexString) {\n        values.push(value);\n      }\n    }\n    return values;\n  };\n  PDFAcroButton.prototype.removeExportValue = function (idx) {\n    var opt = this.Opt();\n    if (!opt) return;\n    if (opt instanceof PDFString || opt instanceof PDFHexString) {\n      if (idx !== 0) throw new IndexOutOfBoundsError(idx, 0, 0);\n      this.setOpt([]);\n    } else {\n      if (idx < 0 || idx > opt.size()) {\n        throw new IndexOutOfBoundsError(idx, 0, opt.size());\n      }\n      opt.remove(idx);\n    }\n  };\n  // Enforce use use of /Opt even if it isn't strictly necessary\n  PDFAcroButton.prototype.normalizeExportValues = function () {\n    var _a, _b, _c, _d;\n    var exportValues = (_a = this.getExportValues()) !== null && _a !== void 0 ? _a : [];\n    var Opt = [];\n    var widgets = this.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var exportVal = (_b = exportValues[idx]) !== null && _b !== void 0 ? _b : PDFHexString.fromText((_d = (_c = widget.getOnValue()) === null || _c === void 0 ? void 0 : _c.decodeText()) !== null && _d !== void 0 ? _d : '');\n      Opt.push(exportVal);\n    }\n    this.setOpt(Opt);\n  };\n  /**\n   * Reuses existing opt if one exists with the same value (assuming\n   * `useExistingIdx` is `true`). Returns index of existing (or new) opt.\n   */\n  PDFAcroButton.prototype.addOpt = function (opt, useExistingOptIdx) {\n    var _a;\n    this.normalizeExportValues();\n    var optText = opt.decodeText();\n    var existingIdx;\n    if (useExistingOptIdx) {\n      var exportValues = (_a = this.getExportValues()) !== null && _a !== void 0 ? _a : [];\n      for (var idx = 0, len = exportValues.length; idx < len; idx++) {\n        var exportVal = exportValues[idx];\n        if (exportVal.decodeText() === optText) existingIdx = idx;\n      }\n    }\n    var Opt = this.Opt();\n    Opt.push(opt);\n    return existingIdx !== null && existingIdx !== void 0 ? existingIdx : Opt.size() - 1;\n  };\n  PDFAcroButton.prototype.addWidgetWithOpt = function (widget, opt, useExistingOptIdx) {\n    var optIdx = this.addOpt(opt, useExistingOptIdx);\n    var apStateValue = PDFName.of(String(optIdx));\n    this.addWidget(widget);\n    return apStateValue;\n  };\n  return PDFAcroButton;\n}(PDFAcroTerminal);\nexport default PDFAcroButton;","map":{"version":3,"sources":["../../../src/core/acroform/PDFAcroButton.ts"],"names":[],"mappings":";AACA,OAAO,SAAS,MAAA,sBAAA;AAChB,OAAO,YAAY,MAAA,yBAAA;AACnB,OAAO,QAAQ,MAAA,qBAAA;AACf,OAAO,OAAO,MAAA,oBAAA;AAEd,OAAO,eAAe,MAAA,mBAAA;AACtB,SAAS,qBAAqB,QAAE,WAAA;AAEhC,IAAA,aAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA4B,SAAA,CAAA,aAAA,EAAA,MAAA,CAAA;EAA5B,SAAA,aAAA,CAAA,EAAA;;EAsGA;EArGE,aAAA,CAAA,SAAA,CAAA,GAAG,GAAH,YAAA;IACE,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW,CAC1B,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,EACjB,SAAS,EACT,YAAY,EACZ,QAAQ,CACT;EACH,CAAC;EAED,aAAA,CAAA,SAAA,CAAA,MAAM,GAAN,UAAO,GAAgB,EAAA;IACrB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EAC9D,CAAC;EAED,aAAA,CAAA,SAAA,CAAA,eAAe,GAAf,YAAA;IACE,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAA,CAAE;IAEtB,IAAI,CAAC,GAAG,EAAE,OAAO,SAAS;IAE1B,IAAI,GAAG,YAAY,SAAS,IAAI,GAAG,YAAY,YAAY,EAAE;MAC3D,OAAO,CAAC,GAAG,CAAC;IACb;IAED,IAAM,MAAM,GAAiC,EAAE;IAC/C,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,IAAI,CAAA,CAAE,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE;MACpD,IAAM,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC;MAC7B,IAAI,KAAK,YAAY,SAAS,IAAI,KAAK,YAAY,YAAY,EAAE;QAC/D,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;MACnB;IACF;IAED,OAAO,MAAM;EACf,CAAC;EAED,aAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,UAAkB,GAAW,EAAA;IAC3B,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAA,CAAE;IAEtB,IAAI,CAAC,GAAG,EAAE;IAEV,IAAI,GAAG,YAAY,SAAS,IAAI,GAAG,YAAY,YAAY,EAAE;MAC3D,IAAI,GAAG,KAAK,CAAC,EAAE,MAAM,IAAI,qBAAqB,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;MACzD,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;KAChB,MAAM;MACL,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,CAAA,CAAE,EAAE;QAC/B,MAAM,IAAI,qBAAqB,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,IAAI,CAAA,CAAE,CAAC;MACpD;MACD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC;IAChB;EACH,CAAC;EAED;EACA,aAAA,CAAA,SAAA,CAAA,qBAAqB,GAArB,YAAA;;IACE,IAAM,YAAY,GAAA,CAAA,EAAA,GAAG,IAAI,CAAC,eAAe,CAAA,CAAE,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAE;IAEjD,IAAM,GAAG,GAAiC,EAAE;IAE5C,IAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAA,CAAE;IACjC,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,OAAO,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE;MACxD,IAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC;MAC3B,IAAM,SAAS,GAAA,CAAA,EAAA,GACb,YAAY,CAAC,GAAG,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GACjB,YAAY,CAAC,QAAQ,CAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAC,MAAM,CAAC,UAAU,CAAA,CAAE,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,UAAU,CAAA,CAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAM,EAAE,CAAC;MAChE,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;IACpB;IAED,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;EAClB,CAAC;EAED;;;AAGG;EACH,aAAA,CAAA,SAAA,CAAA,MAAM,GAAN,UAAO,GAA6B,EAAE,iBAA0B,EAAA;;IAC9D,IAAI,CAAC,qBAAqB,CAAA,CAAE;IAE5B,IAAM,OAAO,GAAG,GAAG,CAAC,UAAU,CAAA,CAAE;IAEhC,IAAI,WAA+B;IACnC,IAAI,iBAAiB,EAAE;MACrB,IAAM,YAAY,GAAA,CAAA,EAAA,GAAG,IAAI,CAAC,eAAe,CAAA,CAAE,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAE;MACjD,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,YAAY,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE;QAC7D,IAAM,SAAS,GAAG,YAAY,CAAC,GAAG,CAAC;QACnC,IAAI,SAAS,CAAC,UAAU,CAAA,CAAE,KAAK,OAAO,EAAE,WAAW,GAAG,GAAG;MAC1D;IACF;IAED,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAA,CAAc;IAClC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;IAEb,OAAO,WAAW,KAAA,IAAA,IAAX,WAAW,KAAA,KAAA,CAAA,GAAX,WAAW,GAAI,GAAG,CAAC,IAAI,CAAA,CAAE,GAAG,CAAC;EACtC,CAAC;EAED,aAAA,CAAA,SAAA,CAAA,gBAAgB,GAAhB,UACE,MAAc,EACd,GAA6B,EAC7B,iBAA0B,EAAA;IAE1B,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,iBAAiB,CAAC;IAClD,IAAM,YAAY,GAAG,OAAO,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAC/C,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;IACtB,OAAO,YAAY;EACrB,CAAC;EACH,OAAA,aAAC;AAAD,CAAC,CAtG2B,eAAe,CAAA;AAwG3C,eAAe,aAAa","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport PDFString from \"../objects/PDFString\";\nimport PDFHexString from \"../objects/PDFHexString\";\nimport PDFArray from \"../objects/PDFArray\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFAcroTerminal from \"./PDFAcroTerminal\";\nimport { IndexOutOfBoundsError } from \"../errors\";\nvar PDFAcroButton = /** @class */ (function (_super) {\n    __extends(PDFAcroButton, _super);\n    function PDFAcroButton() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    PDFAcroButton.prototype.Opt = function () {\n        return this.dict.lookupMaybe(PDFName.of('Opt'), PDFString, PDFHexString, PDFArray);\n    };\n    PDFAcroButton.prototype.setOpt = function (opt) {\n        this.dict.set(PDFName.of('Opt'), this.dict.context.obj(opt));\n    };\n    PDFAcroButton.prototype.getExportValues = function () {\n        var opt = this.Opt();\n        if (!opt)\n            return undefined;\n        if (opt instanceof PDFString || opt instanceof PDFHexString) {\n            return [opt];\n        }\n        var values = [];\n        for (var idx = 0, len = opt.size(); idx < len; idx++) {\n            var value = opt.lookup(idx);\n            if (value instanceof PDFString || value instanceof PDFHexString) {\n                values.push(value);\n            }\n        }\n        return values;\n    };\n    PDFAcroButton.prototype.removeExportValue = function (idx) {\n        var opt = this.Opt();\n        if (!opt)\n            return;\n        if (opt instanceof PDFString || opt instanceof PDFHexString) {\n            if (idx !== 0)\n                throw new IndexOutOfBoundsError(idx, 0, 0);\n            this.setOpt([]);\n        }\n        else {\n            if (idx < 0 || idx > opt.size()) {\n                throw new IndexOutOfBoundsError(idx, 0, opt.size());\n            }\n            opt.remove(idx);\n        }\n    };\n    // Enforce use use of /Opt even if it isn't strictly necessary\n    PDFAcroButton.prototype.normalizeExportValues = function () {\n        var _a, _b, _c, _d;\n        var exportValues = (_a = this.getExportValues()) !== null && _a !== void 0 ? _a : [];\n        var Opt = [];\n        var widgets = this.getWidgets();\n        for (var idx = 0, len = widgets.length; idx < len; idx++) {\n            var widget = widgets[idx];\n            var exportVal = (_b = exportValues[idx]) !== null && _b !== void 0 ? _b : PDFHexString.fromText((_d = (_c = widget.getOnValue()) === null || _c === void 0 ? void 0 : _c.decodeText()) !== null && _d !== void 0 ? _d : '');\n            Opt.push(exportVal);\n        }\n        this.setOpt(Opt);\n    };\n    /**\n     * Reuses existing opt if one exists with the same value (assuming\n     * `useExistingIdx` is `true`). Returns index of existing (or new) opt.\n     */\n    PDFAcroButton.prototype.addOpt = function (opt, useExistingOptIdx) {\n        var _a;\n        this.normalizeExportValues();\n        var optText = opt.decodeText();\n        var existingIdx;\n        if (useExistingOptIdx) {\n            var exportValues = (_a = this.getExportValues()) !== null && _a !== void 0 ? _a : [];\n            for (var idx = 0, len = exportValues.length; idx < len; idx++) {\n                var exportVal = exportValues[idx];\n                if (exportVal.decodeText() === optText)\n                    existingIdx = idx;\n            }\n        }\n        var Opt = this.Opt();\n        Opt.push(opt);\n        return existingIdx !== null && existingIdx !== void 0 ? existingIdx : Opt.size() - 1;\n    };\n    PDFAcroButton.prototype.addWidgetWithOpt = function (widget, opt, useExistingOptIdx) {\n        var optIdx = this.addOpt(opt, useExistingOptIdx);\n        var apStateValue = PDFName.of(String(optIdx));\n        this.addWidget(widget);\n        return apStateValue;\n    };\n    return PDFAcroButton;\n}(PDFAcroTerminal));\nexport default PDFAcroButton;\n//# sourceMappingURL=PDFAcroButton.js.map"]},"metadata":{},"sourceType":"module"}