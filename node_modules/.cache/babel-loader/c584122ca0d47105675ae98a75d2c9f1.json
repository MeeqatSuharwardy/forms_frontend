{"ast":null,"code":"import { UnexpectedObjectTypeError, UnsupportedEncodingError } from \"../errors\";\nimport PDFArray from \"../objects/PDFArray\";\nimport PDFDict from \"../objects/PDFDict\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFNumber from \"../objects/PDFNumber\";\nimport Ascii85Stream from \"./Ascii85Stream\";\nimport AsciiHexStream from \"./AsciiHexStream\";\nimport FlateStream from \"./FlateStream\";\nimport LZWStream from \"./LZWStream\";\nimport RunLengthStream from \"./RunLengthStream\";\nimport Stream from \"./Stream\";\nvar decodeStream = function (stream, encoding, params) {\n  if (encoding === PDFName.of('FlateDecode')) {\n    return new FlateStream(stream);\n  }\n  if (encoding === PDFName.of('LZWDecode')) {\n    var earlyChange = 1;\n    if (params instanceof PDFDict) {\n      var EarlyChange = params.lookup(PDFName.of('EarlyChange'));\n      if (EarlyChange instanceof PDFNumber) {\n        earlyChange = EarlyChange.asNumber();\n      }\n    }\n    return new LZWStream(stream, undefined, earlyChange);\n  }\n  if (encoding === PDFName.of('ASCII85Decode')) {\n    return new Ascii85Stream(stream);\n  }\n  if (encoding === PDFName.of('ASCIIHexDecode')) {\n    return new AsciiHexStream(stream);\n  }\n  if (encoding === PDFName.of('RunLengthDecode')) {\n    return new RunLengthStream(stream);\n  }\n  throw new UnsupportedEncodingError(encoding.asString());\n};\nexport var decodePDFRawStream = function (_a) {\n  var dict = _a.dict,\n    contents = _a.contents;\n  var stream = new Stream(contents);\n  var Filter = dict.lookup(PDFName.of('Filter'));\n  var DecodeParms = dict.lookup(PDFName.of('DecodeParms'));\n  if (Filter instanceof PDFName) {\n    stream = decodeStream(stream, Filter, DecodeParms);\n  } else if (Filter instanceof PDFArray) {\n    for (var idx = 0, len = Filter.size(); idx < len; idx++) {\n      stream = decodeStream(stream, Filter.lookup(idx, PDFName), DecodeParms && DecodeParms.lookupMaybe(idx, PDFDict));\n    }\n  } else if (!!Filter) {\n    throw new UnexpectedObjectTypeError([PDFName, PDFArray], Filter);\n  }\n  return stream;\n};","map":{"version":3,"sources":["../../../src/core/streams/decode.ts"],"names":[],"mappings":"AAAA,SACE,yBAAyB,EACzB,wBAAwB,QACzB,WAAA;AACD,OAAO,QAAQ,MAAA,qBAAA;AACf,OAAO,OAAO,MAAA,oBAAA;AACd,OAAO,OAAO,MAAA,oBAAA;AAEd,OAAO,SAAS,MAAA,sBAAA;AAEhB,OAAO,aAAa,MAAA,iBAAA;AACpB,OAAO,cAAc,MAAA,kBAAA;AACrB,OAAO,WAAW,MAAA,eAAA;AAClB,OAAO,SAAS,MAAA,aAAA;AAChB,OAAO,eAAe,MAAA,mBAAA;AACtB,OAAO,MAAsB,MAAA,UAAA;AAE7B,IAAM,YAAY,GAAG,SAAA,CACnB,MAAkB,EAClB,QAAiB,EACjB,MAA4C,EAAA;EAE5C,IAAI,QAAQ,KAAK,OAAO,CAAC,EAAE,CAAC,aAAa,CAAC,EAAE;IAC1C,OAAO,IAAI,WAAW,CAAC,MAAM,CAAC;EAC/B;EACD,IAAI,QAAQ,KAAK,OAAO,CAAC,EAAE,CAAC,WAAW,CAAC,EAAE;IACxC,IAAI,WAAW,GAAG,CAAC;IACnB,IAAI,MAAM,YAAY,OAAO,EAAE;MAC7B,IAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC;MAC5D,IAAI,WAAW,YAAY,SAAS,EAAE;QACpC,WAAW,GAAG,WAAW,CAAC,QAAQ,CAAA,CAAE;MACrC;IACF;IACD,OAAO,IAAI,SAAS,CAAC,MAAM,EAAE,SAAS,EAAE,WAAoB,CAAC;EAC9D;EACD,IAAI,QAAQ,KAAK,OAAO,CAAC,EAAE,CAAC,eAAe,CAAC,EAAE;IAC5C,OAAO,IAAI,aAAa,CAAC,MAAM,CAAC;EACjC;EACD,IAAI,QAAQ,KAAK,OAAO,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE;IAC7C,OAAO,IAAI,cAAc,CAAC,MAAM,CAAC;EAClC;EACD,IAAI,QAAQ,KAAK,OAAO,CAAC,EAAE,CAAC,iBAAiB,CAAC,EAAE;IAC9C,OAAO,IAAI,eAAe,CAAC,MAAM,CAAC;EACnC;EACD,MAAM,IAAI,wBAAwB,CAAC,QAAQ,CAAC,QAAQ,CAAA,CAAE,CAAC;AACzD,CAAC;AAED,OAAO,IAAM,kBAAkB,GAAG,SAAA,CAAC,EAAgC,EAAA;MAA9B,IAAI,GAAA,EAAA,CAAA,IAAA;IAAE,QAAQ,GAAA,EAAA,CAAA,QAAA;EACjD,IAAI,MAAM,GAAe,IAAI,MAAM,CAAC,QAAQ,CAAC;EAE7C,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;EAChD,IAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC;EAE1D,IAAI,MAAM,YAAY,OAAO,EAAE;IAC7B,MAAM,GAAG,YAAY,CACnB,MAAM,EACN,MAAM,EACN,WAAmD,CACpD;GACF,MAAM,IAAI,MAAM,YAAY,QAAQ,EAAE;IACrC,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,IAAI,CAAA,CAAE,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE;MACvD,MAAM,GAAG,YAAY,CACnB,MAAM,EACN,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,EAC3B,WAAW,IAAK,WAAwB,CAAC,WAAW,CAAC,GAAG,EAAE,OAAO,CAAC,CACnE;IACF;GACF,MAAM,IAAI,CAAC,CAAC,MAAM,EAAE;IACnB,MAAM,IAAI,yBAAyB,CAAC,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE,MAAM,CAAC;EACjE;EAED,OAAO,MAAM;AACf,CAAC","sourceRoot":"","sourcesContent":["import { UnexpectedObjectTypeError, UnsupportedEncodingError, } from \"../errors\";\nimport PDFArray from \"../objects/PDFArray\";\nimport PDFDict from \"../objects/PDFDict\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFNumber from \"../objects/PDFNumber\";\nimport Ascii85Stream from \"./Ascii85Stream\";\nimport AsciiHexStream from \"./AsciiHexStream\";\nimport FlateStream from \"./FlateStream\";\nimport LZWStream from \"./LZWStream\";\nimport RunLengthStream from \"./RunLengthStream\";\nimport Stream from \"./Stream\";\nvar decodeStream = function (stream, encoding, params) {\n    if (encoding === PDFName.of('FlateDecode')) {\n        return new FlateStream(stream);\n    }\n    if (encoding === PDFName.of('LZWDecode')) {\n        var earlyChange = 1;\n        if (params instanceof PDFDict) {\n            var EarlyChange = params.lookup(PDFName.of('EarlyChange'));\n            if (EarlyChange instanceof PDFNumber) {\n                earlyChange = EarlyChange.asNumber();\n            }\n        }\n        return new LZWStream(stream, undefined, earlyChange);\n    }\n    if (encoding === PDFName.of('ASCII85Decode')) {\n        return new Ascii85Stream(stream);\n    }\n    if (encoding === PDFName.of('ASCIIHexDecode')) {\n        return new AsciiHexStream(stream);\n    }\n    if (encoding === PDFName.of('RunLengthDecode')) {\n        return new RunLengthStream(stream);\n    }\n    throw new UnsupportedEncodingError(encoding.asString());\n};\nexport var decodePDFRawStream = function (_a) {\n    var dict = _a.dict, contents = _a.contents;\n    var stream = new Stream(contents);\n    var Filter = dict.lookup(PDFName.of('Filter'));\n    var DecodeParms = dict.lookup(PDFName.of('DecodeParms'));\n    if (Filter instanceof PDFName) {\n        stream = decodeStream(stream, Filter, DecodeParms);\n    }\n    else if (Filter instanceof PDFArray) {\n        for (var idx = 0, len = Filter.size(); idx < len; idx++) {\n            stream = decodeStream(stream, Filter.lookup(idx, PDFName), DecodeParms && DecodeParms.lookupMaybe(idx, PDFDict));\n        }\n    }\n    else if (!!Filter) {\n        throw new UnexpectedObjectTypeError([PDFName, PDFArray], Filter);\n    }\n    return stream;\n};\n//# sourceMappingURL=decode.js.map"]},"metadata":{},"sourceType":"module"}