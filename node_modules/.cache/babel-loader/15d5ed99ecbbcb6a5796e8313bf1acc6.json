{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport { ReparseError } from \"../errors\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFNumber from \"../objects/PDFNumber\";\nimport PDFRef from \"../objects/PDFRef\";\nimport ByteStream from \"./ByteStream\";\nimport PDFObjectParser from \"./PDFObjectParser\";\nimport { waitForTick } from \"../../utils\";\nvar PDFObjectStreamParser = /** @class */function (_super) {\n  __extends(PDFObjectStreamParser, _super);\n  function PDFObjectStreamParser(rawStream, shouldWaitForTick) {\n    var _this = _super.call(this, ByteStream.fromPDFRawStream(rawStream), rawStream.dict.context) || this;\n    var dict = rawStream.dict;\n    _this.alreadyParsed = false;\n    _this.shouldWaitForTick = shouldWaitForTick || function () {\n      return false;\n    };\n    _this.firstOffset = dict.lookup(PDFName.of('First'), PDFNumber).asNumber();\n    _this.objectCount = dict.lookup(PDFName.of('N'), PDFNumber).asNumber();\n    return _this;\n  }\n  PDFObjectStreamParser.prototype.parseIntoContext = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var offsetsAndObjectNumbers, idx, len, _a, objectNumber, offset, object, ref;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (this.alreadyParsed) {\n              throw new ReparseError('PDFObjectStreamParser', 'parseIntoContext');\n            }\n            this.alreadyParsed = true;\n            offsetsAndObjectNumbers = this.parseOffsetsAndObjectNumbers();\n            idx = 0, len = offsetsAndObjectNumbers.length;\n            _b.label = 1;\n          case 1:\n            if (!(idx < len)) return [3 /*break*/, 4];\n            _a = offsetsAndObjectNumbers[idx], objectNumber = _a.objectNumber, offset = _a.offset;\n            this.bytes.moveTo(this.firstOffset + offset);\n            object = this.parseObject();\n            ref = PDFRef.of(objectNumber, 0);\n            this.context.assign(ref, object);\n            if (!this.shouldWaitForTick()) return [3 /*break*/, 3];\n            return [4 /*yield*/, waitForTick()];\n          case 2:\n            _b.sent();\n            _b.label = 3;\n          case 3:\n            idx++;\n            return [3 /*break*/, 1];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  PDFObjectStreamParser.prototype.parseOffsetsAndObjectNumbers = function () {\n    var offsetsAndObjectNumbers = [];\n    for (var idx = 0, len = this.objectCount; idx < len; idx++) {\n      this.skipWhitespaceAndComments();\n      var objectNumber = this.parseRawInt();\n      this.skipWhitespaceAndComments();\n      var offset = this.parseRawInt();\n      offsetsAndObjectNumbers.push({\n        objectNumber: objectNumber,\n        offset: offset\n      });\n    }\n    return offsetsAndObjectNumbers;\n  };\n  PDFObjectStreamParser.forStream = function (rawStream, shouldWaitForTick) {\n    return new PDFObjectStreamParser(rawStream, shouldWaitForTick);\n  };\n  return PDFObjectStreamParser;\n}(PDFObjectParser);\nexport default PDFObjectStreamParser;","map":{"version":3,"sources":["../../../src/core/parser/PDFObjectStreamParser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter, __extends, __generator } from \"tslib\";\nimport { ReparseError } from \"../errors\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFNumber from \"../objects/PDFNumber\";\nimport PDFRef from \"../objects/PDFRef\";\nimport ByteStream from \"./ByteStream\";\nimport PDFObjectParser from \"./PDFObjectParser\";\nimport { waitForTick } from \"../../utils\";\nvar PDFObjectStreamParser = /** @class */ (function (_super) {\n    __extends(PDFObjectStreamParser, _super);\n    function PDFObjectStreamParser(rawStream, shouldWaitForTick) {\n        var _this = _super.call(this, ByteStream.fromPDFRawStream(rawStream), rawStream.dict.context) || this;\n        var dict = rawStream.dict;\n        _this.alreadyParsed = false;\n        _this.shouldWaitForTick = shouldWaitForTick || (function () { return false; });\n        _this.firstOffset = dict.lookup(PDFName.of('First'), PDFNumber).asNumber();\n        _this.objectCount = dict.lookup(PDFName.of('N'), PDFNumber).asNumber();\n        return _this;\n    }\n    PDFObjectStreamParser.prototype.parseIntoContext = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var offsetsAndObjectNumbers, idx, len, _a, objectNumber, offset, object, ref;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (this.alreadyParsed) {\n                            throw new ReparseError('PDFObjectStreamParser', 'parseIntoContext');\n                        }\n                        this.alreadyParsed = true;\n                        offsetsAndObjectNumbers = this.parseOffsetsAndObjectNumbers();\n                        idx = 0, len = offsetsAndObjectNumbers.length;\n                        _b.label = 1;\n                    case 1:\n                        if (!(idx < len)) return [3 /*break*/, 4];\n                        _a = offsetsAndObjectNumbers[idx], objectNumber = _a.objectNumber, offset = _a.offset;\n                        this.bytes.moveTo(this.firstOffset + offset);\n                        object = this.parseObject();\n                        ref = PDFRef.of(objectNumber, 0);\n                        this.context.assign(ref, object);\n                        if (!this.shouldWaitForTick()) return [3 /*break*/, 3];\n                        return [4 /*yield*/, waitForTick()];\n                    case 2:\n                        _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        idx++;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    PDFObjectStreamParser.prototype.parseOffsetsAndObjectNumbers = function () {\n        var offsetsAndObjectNumbers = [];\n        for (var idx = 0, len = this.objectCount; idx < len; idx++) {\n            this.skipWhitespaceAndComments();\n            var objectNumber = this.parseRawInt();\n            this.skipWhitespaceAndComments();\n            var offset = this.parseRawInt();\n            offsetsAndObjectNumbers.push({ objectNumber: objectNumber, offset: offset });\n        }\n        return offsetsAndObjectNumbers;\n    };\n    PDFObjectStreamParser.forStream = function (rawStream, shouldWaitForTick) { return new PDFObjectStreamParser(rawStream, shouldWaitForTick); };\n    return PDFObjectStreamParser;\n}(PDFObjectParser));\nexport default PDFObjectStreamParser;\n//# sourceMappingURL=PDFObjectStreamParser.js.map"]},"metadata":{},"sourceType":"module"}