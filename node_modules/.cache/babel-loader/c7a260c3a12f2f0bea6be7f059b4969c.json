{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { setFillingColor, setStrokingColor } from \"./colors\";\nimport { beginText, closePath, drawObject, endText, fill, fillAndStroke, lineTo, moveTo, nextLine, popGraphicsState, pushGraphicsState, rotateAndSkewTextRadiansAndTranslate, rotateRadians, scale, setFontAndSize, setLineHeight, setLineWidth, showText, skewRadians, stroke, translate, setLineCap, rotateDegrees, setGraphicsState, setDashPattern, beginMarkedContent, endMarkedContent, clip, endPath, appendBezierCurve } from \"./operators\";\nimport { degrees, toRadians } from \"./rotations\";\nimport { svgPathToOperators } from \"./svgPath\";\nimport { asNumber } from \"./objects\";\nexport var drawText = function (line, options) {\n  return [pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), beginText(), setFillingColor(options.color), setFontAndSize(options.font, options.size), rotateAndSkewTextRadiansAndTranslate(toRadians(options.rotate), toRadians(options.xSkew), toRadians(options.ySkew), options.x, options.y), showText(line), endText(), popGraphicsState()].filter(Boolean);\n};\nexport var drawLinesOfText = function (lines, options) {\n  var operators = [pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), beginText(), setFillingColor(options.color), setFontAndSize(options.font, options.size), setLineHeight(options.lineHeight), rotateAndSkewTextRadiansAndTranslate(toRadians(options.rotate), toRadians(options.xSkew), toRadians(options.ySkew), options.x, options.y)].filter(Boolean);\n  for (var idx = 0, len = lines.length; idx < len; idx++) {\n    operators.push(showText(lines[idx]), nextLine());\n  }\n  operators.push(endText(), popGraphicsState());\n  return operators;\n};\nexport var drawImage = function (name, options) {\n  return [pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), translate(options.x, options.y), rotateRadians(toRadians(options.rotate)), scale(options.width, options.height), skewRadians(toRadians(options.xSkew), toRadians(options.ySkew)), drawObject(name), popGraphicsState()].filter(Boolean);\n};\nexport var drawPage = function (name, options) {\n  return [pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), translate(options.x, options.y), rotateRadians(toRadians(options.rotate)), scale(options.xScale, options.yScale), skewRadians(toRadians(options.xSkew), toRadians(options.ySkew)), drawObject(name), popGraphicsState()].filter(Boolean);\n};\nexport var drawLine = function (options) {\n  var _a, _b;\n  return [pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), options.color && setStrokingColor(options.color), setLineWidth(options.thickness), setDashPattern((_a = options.dashArray) !== null && _a !== void 0 ? _a : [], (_b = options.dashPhase) !== null && _b !== void 0 ? _b : 0), moveTo(options.start.x, options.start.y), options.lineCap && setLineCap(options.lineCap), moveTo(options.start.x, options.start.y), lineTo(options.end.x, options.end.y), stroke(), popGraphicsState()].filter(Boolean);\n};\nexport var drawRectangle = function (options) {\n  var _a, _b;\n  return [pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), options.color && setFillingColor(options.color), options.borderColor && setStrokingColor(options.borderColor), setLineWidth(options.borderWidth), options.borderLineCap && setLineCap(options.borderLineCap), setDashPattern((_a = options.borderDashArray) !== null && _a !== void 0 ? _a : [], (_b = options.borderDashPhase) !== null && _b !== void 0 ? _b : 0), translate(options.x, options.y), rotateRadians(toRadians(options.rotate)), skewRadians(toRadians(options.xSkew), toRadians(options.ySkew)), moveTo(0, 0), lineTo(0, options.height), lineTo(options.width, options.height), lineTo(options.width, 0), closePath(),\n  // prettier-ignore\n  options.color && options.borderWidth ? fillAndStroke() : options.color ? fill() : options.borderColor ? stroke() : closePath(), popGraphicsState()].filter(Boolean);\n};\nvar KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\n/** @deprecated */\nexport var drawEllipsePath = function (config) {\n  var x = asNumber(config.x);\n  var y = asNumber(config.y);\n  var xScale = asNumber(config.xScale);\n  var yScale = asNumber(config.yScale);\n  x -= xScale;\n  y -= yScale;\n  var ox = xScale * KAPPA;\n  var oy = yScale * KAPPA;\n  var xe = x + xScale * 2;\n  var ye = y + yScale * 2;\n  var xm = x + xScale;\n  var ym = y + yScale;\n  return [pushGraphicsState(), moveTo(x, ym), appendBezierCurve(x, ym - oy, xm - ox, y, xm, y), appendBezierCurve(xm + ox, y, xe, ym - oy, xe, ym), appendBezierCurve(xe, ym + oy, xm + ox, ye, xm, ye), appendBezierCurve(xm - ox, ye, x, ym + oy, x, ym), popGraphicsState()];\n};\nvar drawEllipseCurves = function (config) {\n  var centerX = asNumber(config.x);\n  var centerY = asNumber(config.y);\n  var xScale = asNumber(config.xScale);\n  var yScale = asNumber(config.yScale);\n  var x = -xScale;\n  var y = -yScale;\n  var ox = xScale * KAPPA;\n  var oy = yScale * KAPPA;\n  var xe = x + xScale * 2;\n  var ye = y + yScale * 2;\n  var xm = x + xScale;\n  var ym = y + yScale;\n  return [translate(centerX, centerY), rotateRadians(toRadians(config.rotate)), moveTo(x, ym), appendBezierCurve(x, ym - oy, xm - ox, y, xm, y), appendBezierCurve(xm + ox, y, xe, ym - oy, xe, ym), appendBezierCurve(xe, ym + oy, xm + ox, ye, xm, ye), appendBezierCurve(xm - ox, ye, x, ym + oy, x, ym)];\n};\nexport var drawEllipse = function (options) {\n  var _a, _b, _c;\n  return __spreadArrays([pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), options.color && setFillingColor(options.color), options.borderColor && setStrokingColor(options.borderColor), setLineWidth(options.borderWidth), options.borderLineCap && setLineCap(options.borderLineCap), setDashPattern((_a = options.borderDashArray) !== null && _a !== void 0 ? _a : [], (_b = options.borderDashPhase) !== null && _b !== void 0 ? _b : 0)], options.rotate === undefined ? drawEllipsePath({\n    x: options.x,\n    y: options.y,\n    xScale: options.xScale,\n    yScale: options.yScale\n  }) : drawEllipseCurves({\n    x: options.x,\n    y: options.y,\n    xScale: options.xScale,\n    yScale: options.yScale,\n    rotate: (_c = options.rotate) !== null && _c !== void 0 ? _c : degrees(0)\n  }), [\n  // prettier-ignore\n  options.color && options.borderWidth ? fillAndStroke() : options.color ? fill() : options.borderColor ? stroke() : closePath(), popGraphicsState()]).filter(Boolean);\n};\nexport var drawSvgPath = function (path, options) {\n  var _a, _b, _c;\n  return __spreadArrays([pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), translate(options.x, options.y), rotateRadians(toRadians((_a = options.rotate) !== null && _a !== void 0 ? _a : degrees(0))),\n  // SVG path Y axis is opposite pdf-lib's\n  options.scale ? scale(options.scale, -options.scale) : scale(1, -1), options.color && setFillingColor(options.color), options.borderColor && setStrokingColor(options.borderColor), options.borderWidth && setLineWidth(options.borderWidth), options.borderLineCap && setLineCap(options.borderLineCap), setDashPattern((_b = options.borderDashArray) !== null && _b !== void 0 ? _b : [], (_c = options.borderDashPhase) !== null && _c !== void 0 ? _c : 0)], svgPathToOperators(path), [\n  // prettier-ignore\n  options.color && options.borderWidth ? fillAndStroke() : options.color ? fill() : options.borderColor ? stroke() : closePath(), popGraphicsState()]).filter(Boolean);\n};\nexport var drawCheckMark = function (options) {\n  var size = asNumber(options.size);\n  /*********************** Define Check Mark Points ***************************/\n  // A check mark is defined by three points in some coordinate space. Here, we\n  // define these points in a unit coordinate system, where the range of the x\n  // and y axis are both [-1, 1].\n  //\n  // Note that we do not hard code `p1y` in case we wish to change the\n  // size/shape of the check mark in the future. We want the check mark to\n  // always form a right angle. This means that the dot product between (p1-p2)\n  // and (p3-p2) should be zero:\n  //\n  //   (p1x-p2x) * (p3x-p2x) + (p1y-p2y) * (p3y-p2y) = 0\n  //\n  // We can now rejigger this equation to solve for `p1y`:\n  //\n  //   (p1y-p2y) * (p3y-p2y) = -((p1x-p2x) * (p3x-p2x))\n  //   (p1y-p2y) = -((p1x-p2x) * (p3x-p2x)) / (p3y-p2y)\n  //   p1y = -((p1x-p2x) * (p3x-p2x)) / (p3y-p2y) + p2y\n  //\n  // Thanks to my friend Joel Walker (https://github.com/JWalker1995) for\n  // devising the above equation and unit coordinate system approach!\n  // (x, y) coords of the check mark's bottommost point\n  var p2x = -1 + 0.75;\n  var p2y = -1 + 0.51;\n  // (x, y) coords of the check mark's topmost point\n  var p3y = 1 - 0.525;\n  var p3x = 1 - 0.31;\n  // (x, y) coords of the check mark's center (vertically) point\n  var p1x = -1 + 0.325;\n  var p1y = -((p1x - p2x) * (p3x - p2x)) / (p3y - p2y) + p2y;\n  /****************************************************************************/\n  return [pushGraphicsState(), options.color && setStrokingColor(options.color), setLineWidth(options.thickness), translate(options.x, options.y), moveTo(p1x * size, p1y * size), lineTo(p2x * size, p2y * size), lineTo(p3x * size, p3y * size), stroke(), popGraphicsState()].filter(Boolean);\n};\n// prettier-ignore\nexport var rotateInPlace = function (options) {\n  return options.rotation === 0 ? [translate(0, 0), rotateDegrees(0)] : options.rotation === 90 ? [translate(options.width, 0), rotateDegrees(90)] : options.rotation === 180 ? [translate(options.width, options.height), rotateDegrees(180)] : options.rotation === 270 ? [translate(0, options.height), rotateDegrees(270)] : [];\n}; // Invalid rotation - noop\nexport var drawCheckBox = function (options) {\n  var outline = drawRectangle({\n    x: options.x,\n    y: options.y,\n    width: options.width,\n    height: options.height,\n    borderWidth: options.borderWidth,\n    color: options.color,\n    borderColor: options.borderColor,\n    rotate: degrees(0),\n    xSkew: degrees(0),\n    ySkew: degrees(0)\n  });\n  if (!options.filled) return outline;\n  var width = asNumber(options.width);\n  var height = asNumber(options.height);\n  var checkMarkSize = Math.min(width, height) / 2;\n  var checkMark = drawCheckMark({\n    x: width / 2,\n    y: height / 2,\n    size: checkMarkSize,\n    thickness: options.thickness,\n    color: options.markColor\n  });\n  return __spreadArrays([pushGraphicsState()], outline, checkMark, [popGraphicsState()]);\n};\nexport var drawRadioButton = function (options) {\n  var width = asNumber(options.width);\n  var height = asNumber(options.height);\n  var outlineScale = Math.min(width, height) / 2;\n  var outline = drawEllipse({\n    x: options.x,\n    y: options.y,\n    xScale: outlineScale,\n    yScale: outlineScale,\n    color: options.color,\n    borderColor: options.borderColor,\n    borderWidth: options.borderWidth\n  });\n  if (!options.filled) return outline;\n  var dot = drawEllipse({\n    x: options.x,\n    y: options.y,\n    xScale: outlineScale * 0.45,\n    yScale: outlineScale * 0.45,\n    color: options.dotColor,\n    borderColor: undefined,\n    borderWidth: 0\n  });\n  return __spreadArrays([pushGraphicsState()], outline, dot, [popGraphicsState()]);\n};\nexport var drawButton = function (options) {\n  var x = asNumber(options.x);\n  var y = asNumber(options.y);\n  var width = asNumber(options.width);\n  var height = asNumber(options.height);\n  var background = drawRectangle({\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    borderWidth: options.borderWidth,\n    color: options.color,\n    borderColor: options.borderColor,\n    rotate: degrees(0),\n    xSkew: degrees(0),\n    ySkew: degrees(0)\n  });\n  var lines = drawTextLines(options.textLines, {\n    color: options.textColor,\n    font: options.font,\n    size: options.fontSize,\n    rotate: degrees(0),\n    xSkew: degrees(0),\n    ySkew: degrees(0)\n  });\n  return __spreadArrays([pushGraphicsState()], background, lines, [popGraphicsState()]);\n};\nexport var drawTextLines = function (lines, options) {\n  var operators = [beginText(), setFillingColor(options.color), setFontAndSize(options.font, options.size)];\n  for (var idx = 0, len = lines.length; idx < len; idx++) {\n    var _a = lines[idx],\n      encoded = _a.encoded,\n      x = _a.x,\n      y = _a.y;\n    operators.push(rotateAndSkewTextRadiansAndTranslate(toRadians(options.rotate), toRadians(options.xSkew), toRadians(options.ySkew), x, y), showText(encoded));\n  }\n  operators.push(endText());\n  return operators;\n};\nexport var drawTextField = function (options) {\n  var x = asNumber(options.x);\n  var y = asNumber(options.y);\n  var width = asNumber(options.width);\n  var height = asNumber(options.height);\n  var borderWidth = asNumber(options.borderWidth);\n  var padding = asNumber(options.padding);\n  var clipX = x + borderWidth / 2 + padding;\n  var clipY = y + borderWidth / 2 + padding;\n  var clipWidth = width - (borderWidth / 2 + padding) * 2;\n  var clipHeight = height - (borderWidth / 2 + padding) * 2;\n  var clippingArea = [moveTo(clipX, clipY), lineTo(clipX, clipY + clipHeight), lineTo(clipX + clipWidth, clipY + clipHeight), lineTo(clipX + clipWidth, clipY), closePath(), clip(), endPath()];\n  var background = drawRectangle({\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    borderWidth: options.borderWidth,\n    color: options.color,\n    borderColor: options.borderColor,\n    rotate: degrees(0),\n    xSkew: degrees(0),\n    ySkew: degrees(0)\n  });\n  var lines = drawTextLines(options.textLines, {\n    color: options.textColor,\n    font: options.font,\n    size: options.fontSize,\n    rotate: degrees(0),\n    xSkew: degrees(0),\n    ySkew: degrees(0)\n  });\n  var markedContent = __spreadArrays([beginMarkedContent('Tx'), pushGraphicsState()], lines, [popGraphicsState(), endMarkedContent()]);\n  return __spreadArrays([pushGraphicsState()], background, clippingArea, markedContent, [popGraphicsState()]);\n};\nexport var drawOptionList = function (options) {\n  var x = asNumber(options.x);\n  var y = asNumber(options.y);\n  var width = asNumber(options.width);\n  var height = asNumber(options.height);\n  var lineHeight = asNumber(options.lineHeight);\n  var borderWidth = asNumber(options.borderWidth);\n  var padding = asNumber(options.padding);\n  var clipX = x + borderWidth / 2 + padding;\n  var clipY = y + borderWidth / 2 + padding;\n  var clipWidth = width - (borderWidth / 2 + padding) * 2;\n  var clipHeight = height - (borderWidth / 2 + padding) * 2;\n  var clippingArea = [moveTo(clipX, clipY), lineTo(clipX, clipY + clipHeight), lineTo(clipX + clipWidth, clipY + clipHeight), lineTo(clipX + clipWidth, clipY), closePath(), clip(), endPath()];\n  var background = drawRectangle({\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    borderWidth: options.borderWidth,\n    color: options.color,\n    borderColor: options.borderColor,\n    rotate: degrees(0),\n    xSkew: degrees(0),\n    ySkew: degrees(0)\n  });\n  var highlights = [];\n  for (var idx = 0, len = options.selectedLines.length; idx < len; idx++) {\n    var line = options.textLines[options.selectedLines[idx]];\n    highlights.push.apply(highlights, drawRectangle({\n      x: line.x - padding,\n      y: line.y - (lineHeight - line.height) / 2,\n      width: width - borderWidth,\n      height: line.height + (lineHeight - line.height) / 2,\n      borderWidth: 0,\n      color: options.selectedColor,\n      borderColor: undefined,\n      rotate: degrees(0),\n      xSkew: degrees(0),\n      ySkew: degrees(0)\n    }));\n  }\n  var lines = drawTextLines(options.textLines, {\n    color: options.textColor,\n    font: options.font,\n    size: options.fontSize,\n    rotate: degrees(0),\n    xSkew: degrees(0),\n    ySkew: degrees(0)\n  });\n  var markedContent = __spreadArrays([beginMarkedContent('Tx'), pushGraphicsState()], lines, [popGraphicsState(), endMarkedContent()]);\n  return __spreadArrays([pushGraphicsState()], background, highlights, clippingArea, markedContent, [popGraphicsState()]);\n};","map":{"version":3,"sources":["../../src/api/operations.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __spreadArrays } from \"tslib\";\nimport { setFillingColor, setStrokingColor } from \"./colors\";\nimport { beginText, closePath, drawObject, endText, fill, fillAndStroke, lineTo, moveTo, nextLine, popGraphicsState, pushGraphicsState, rotateAndSkewTextRadiansAndTranslate, rotateRadians, scale, setFontAndSize, setLineHeight, setLineWidth, showText, skewRadians, stroke, translate, setLineCap, rotateDegrees, setGraphicsState, setDashPattern, beginMarkedContent, endMarkedContent, clip, endPath, appendBezierCurve, } from \"./operators\";\nimport { degrees, toRadians } from \"./rotations\";\nimport { svgPathToOperators } from \"./svgPath\";\nimport { asNumber } from \"./objects\";\nexport var drawText = function (line, options) {\n    return [\n        pushGraphicsState(),\n        options.graphicsState && setGraphicsState(options.graphicsState),\n        beginText(),\n        setFillingColor(options.color),\n        setFontAndSize(options.font, options.size),\n        rotateAndSkewTextRadiansAndTranslate(toRadians(options.rotate), toRadians(options.xSkew), toRadians(options.ySkew), options.x, options.y),\n        showText(line),\n        endText(),\n        popGraphicsState(),\n    ].filter(Boolean);\n};\nexport var drawLinesOfText = function (lines, options) {\n    var operators = [\n        pushGraphicsState(),\n        options.graphicsState && setGraphicsState(options.graphicsState),\n        beginText(),\n        setFillingColor(options.color),\n        setFontAndSize(options.font, options.size),\n        setLineHeight(options.lineHeight),\n        rotateAndSkewTextRadiansAndTranslate(toRadians(options.rotate), toRadians(options.xSkew), toRadians(options.ySkew), options.x, options.y),\n    ].filter(Boolean);\n    for (var idx = 0, len = lines.length; idx < len; idx++) {\n        operators.push(showText(lines[idx]), nextLine());\n    }\n    operators.push(endText(), popGraphicsState());\n    return operators;\n};\nexport var drawImage = function (name, options) {\n    return [\n        pushGraphicsState(),\n        options.graphicsState && setGraphicsState(options.graphicsState),\n        translate(options.x, options.y),\n        rotateRadians(toRadians(options.rotate)),\n        scale(options.width, options.height),\n        skewRadians(toRadians(options.xSkew), toRadians(options.ySkew)),\n        drawObject(name),\n        popGraphicsState(),\n    ].filter(Boolean);\n};\nexport var drawPage = function (name, options) {\n    return [\n        pushGraphicsState(),\n        options.graphicsState && setGraphicsState(options.graphicsState),\n        translate(options.x, options.y),\n        rotateRadians(toRadians(options.rotate)),\n        scale(options.xScale, options.yScale),\n        skewRadians(toRadians(options.xSkew), toRadians(options.ySkew)),\n        drawObject(name),\n        popGraphicsState(),\n    ].filter(Boolean);\n};\nexport var drawLine = function (options) {\n    var _a, _b;\n    return [\n        pushGraphicsState(),\n        options.graphicsState && setGraphicsState(options.graphicsState),\n        options.color && setStrokingColor(options.color),\n        setLineWidth(options.thickness),\n        setDashPattern((_a = options.dashArray) !== null && _a !== void 0 ? _a : [], (_b = options.dashPhase) !== null && _b !== void 0 ? _b : 0),\n        moveTo(options.start.x, options.start.y),\n        options.lineCap && setLineCap(options.lineCap),\n        moveTo(options.start.x, options.start.y),\n        lineTo(options.end.x, options.end.y),\n        stroke(),\n        popGraphicsState(),\n    ].filter(Boolean);\n};\nexport var drawRectangle = function (options) {\n    var _a, _b;\n    return [\n        pushGraphicsState(),\n        options.graphicsState && setGraphicsState(options.graphicsState),\n        options.color && setFillingColor(options.color),\n        options.borderColor && setStrokingColor(options.borderColor),\n        setLineWidth(options.borderWidth),\n        options.borderLineCap && setLineCap(options.borderLineCap),\n        setDashPattern((_a = options.borderDashArray) !== null && _a !== void 0 ? _a : [], (_b = options.borderDashPhase) !== null && _b !== void 0 ? _b : 0),\n        translate(options.x, options.y),\n        rotateRadians(toRadians(options.rotate)),\n        skewRadians(toRadians(options.xSkew), toRadians(options.ySkew)),\n        moveTo(0, 0),\n        lineTo(0, options.height),\n        lineTo(options.width, options.height),\n        lineTo(options.width, 0),\n        closePath(),\n        // prettier-ignore\n        options.color && options.borderWidth ? fillAndStroke()\n            : options.color ? fill()\n                : options.borderColor ? stroke()\n                    : closePath(),\n        popGraphicsState(),\n    ].filter(Boolean);\n};\nvar KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\n/** @deprecated */\nexport var drawEllipsePath = function (config) {\n    var x = asNumber(config.x);\n    var y = asNumber(config.y);\n    var xScale = asNumber(config.xScale);\n    var yScale = asNumber(config.yScale);\n    x -= xScale;\n    y -= yScale;\n    var ox = xScale * KAPPA;\n    var oy = yScale * KAPPA;\n    var xe = x + xScale * 2;\n    var ye = y + yScale * 2;\n    var xm = x + xScale;\n    var ym = y + yScale;\n    return [\n        pushGraphicsState(),\n        moveTo(x, ym),\n        appendBezierCurve(x, ym - oy, xm - ox, y, xm, y),\n        appendBezierCurve(xm + ox, y, xe, ym - oy, xe, ym),\n        appendBezierCurve(xe, ym + oy, xm + ox, ye, xm, ye),\n        appendBezierCurve(xm - ox, ye, x, ym + oy, x, ym),\n        popGraphicsState(),\n    ];\n};\nvar drawEllipseCurves = function (config) {\n    var centerX = asNumber(config.x);\n    var centerY = asNumber(config.y);\n    var xScale = asNumber(config.xScale);\n    var yScale = asNumber(config.yScale);\n    var x = -xScale;\n    var y = -yScale;\n    var ox = xScale * KAPPA;\n    var oy = yScale * KAPPA;\n    var xe = x + xScale * 2;\n    var ye = y + yScale * 2;\n    var xm = x + xScale;\n    var ym = y + yScale;\n    return [\n        translate(centerX, centerY),\n        rotateRadians(toRadians(config.rotate)),\n        moveTo(x, ym),\n        appendBezierCurve(x, ym - oy, xm - ox, y, xm, y),\n        appendBezierCurve(xm + ox, y, xe, ym - oy, xe, ym),\n        appendBezierCurve(xe, ym + oy, xm + ox, ye, xm, ye),\n        appendBezierCurve(xm - ox, ye, x, ym + oy, x, ym),\n    ];\n};\nexport var drawEllipse = function (options) {\n    var _a, _b, _c;\n    return __spreadArrays([\n        pushGraphicsState(),\n        options.graphicsState && setGraphicsState(options.graphicsState),\n        options.color && setFillingColor(options.color),\n        options.borderColor && setStrokingColor(options.borderColor),\n        setLineWidth(options.borderWidth),\n        options.borderLineCap && setLineCap(options.borderLineCap),\n        setDashPattern((_a = options.borderDashArray) !== null && _a !== void 0 ? _a : [], (_b = options.borderDashPhase) !== null && _b !== void 0 ? _b : 0)\n    ], (options.rotate === undefined\n        ? drawEllipsePath({\n            x: options.x,\n            y: options.y,\n            xScale: options.xScale,\n            yScale: options.yScale,\n        })\n        : drawEllipseCurves({\n            x: options.x,\n            y: options.y,\n            xScale: options.xScale,\n            yScale: options.yScale,\n            rotate: (_c = options.rotate) !== null && _c !== void 0 ? _c : degrees(0),\n        })), [\n        // prettier-ignore\n        options.color && options.borderWidth ? fillAndStroke()\n            : options.color ? fill()\n                : options.borderColor ? stroke()\n                    : closePath(),\n        popGraphicsState(),\n    ]).filter(Boolean);\n};\nexport var drawSvgPath = function (path, options) {\n    var _a, _b, _c;\n    return __spreadArrays([\n        pushGraphicsState(),\n        options.graphicsState && setGraphicsState(options.graphicsState),\n        translate(options.x, options.y),\n        rotateRadians(toRadians((_a = options.rotate) !== null && _a !== void 0 ? _a : degrees(0))),\n        // SVG path Y axis is opposite pdf-lib's\n        options.scale ? scale(options.scale, -options.scale) : scale(1, -1),\n        options.color && setFillingColor(options.color),\n        options.borderColor && setStrokingColor(options.borderColor),\n        options.borderWidth && setLineWidth(options.borderWidth),\n        options.borderLineCap && setLineCap(options.borderLineCap),\n        setDashPattern((_b = options.borderDashArray) !== null && _b !== void 0 ? _b : [], (_c = options.borderDashPhase) !== null && _c !== void 0 ? _c : 0)\n    ], svgPathToOperators(path), [\n        // prettier-ignore\n        options.color && options.borderWidth ? fillAndStroke()\n            : options.color ? fill()\n                : options.borderColor ? stroke()\n                    : closePath(),\n        popGraphicsState(),\n    ]).filter(Boolean);\n};\nexport var drawCheckMark = function (options) {\n    var size = asNumber(options.size);\n    /*********************** Define Check Mark Points ***************************/\n    // A check mark is defined by three points in some coordinate space. Here, we\n    // define these points in a unit coordinate system, where the range of the x\n    // and y axis are both [-1, 1].\n    //\n    // Note that we do not hard code `p1y` in case we wish to change the\n    // size/shape of the check mark in the future. We want the check mark to\n    // always form a right angle. This means that the dot product between (p1-p2)\n    // and (p3-p2) should be zero:\n    //\n    //   (p1x-p2x) * (p3x-p2x) + (p1y-p2y) * (p3y-p2y) = 0\n    //\n    // We can now rejigger this equation to solve for `p1y`:\n    //\n    //   (p1y-p2y) * (p3y-p2y) = -((p1x-p2x) * (p3x-p2x))\n    //   (p1y-p2y) = -((p1x-p2x) * (p3x-p2x)) / (p3y-p2y)\n    //   p1y = -((p1x-p2x) * (p3x-p2x)) / (p3y-p2y) + p2y\n    //\n    // Thanks to my friend Joel Walker (https://github.com/JWalker1995) for\n    // devising the above equation and unit coordinate system approach!\n    // (x, y) coords of the check mark's bottommost point\n    var p2x = -1 + 0.75;\n    var p2y = -1 + 0.51;\n    // (x, y) coords of the check mark's topmost point\n    var p3y = 1 - 0.525;\n    var p3x = 1 - 0.31;\n    // (x, y) coords of the check mark's center (vertically) point\n    var p1x = -1 + 0.325;\n    var p1y = -((p1x - p2x) * (p3x - p2x)) / (p3y - p2y) + p2y;\n    /****************************************************************************/\n    return [\n        pushGraphicsState(),\n        options.color && setStrokingColor(options.color),\n        setLineWidth(options.thickness),\n        translate(options.x, options.y),\n        moveTo(p1x * size, p1y * size),\n        lineTo(p2x * size, p2y * size),\n        lineTo(p3x * size, p3y * size),\n        stroke(),\n        popGraphicsState(),\n    ].filter(Boolean);\n};\n// prettier-ignore\nexport var rotateInPlace = function (options) {\n    return options.rotation === 0 ? [\n        translate(0, 0),\n        rotateDegrees(0)\n    ]\n        : options.rotation === 90 ? [\n            translate(options.width, 0),\n            rotateDegrees(90)\n        ]\n            : options.rotation === 180 ? [\n                translate(options.width, options.height),\n                rotateDegrees(180)\n            ]\n                : options.rotation === 270 ? [\n                    translate(0, options.height),\n                    rotateDegrees(270)\n                ]\n                    : [];\n}; // Invalid rotation - noop\nexport var drawCheckBox = function (options) {\n    var outline = drawRectangle({\n        x: options.x,\n        y: options.y,\n        width: options.width,\n        height: options.height,\n        borderWidth: options.borderWidth,\n        color: options.color,\n        borderColor: options.borderColor,\n        rotate: degrees(0),\n        xSkew: degrees(0),\n        ySkew: degrees(0),\n    });\n    if (!options.filled)\n        return outline;\n    var width = asNumber(options.width);\n    var height = asNumber(options.height);\n    var checkMarkSize = Math.min(width, height) / 2;\n    var checkMark = drawCheckMark({\n        x: width / 2,\n        y: height / 2,\n        size: checkMarkSize,\n        thickness: options.thickness,\n        color: options.markColor,\n    });\n    return __spreadArrays([pushGraphicsState()], outline, checkMark, [popGraphicsState()]);\n};\nexport var drawRadioButton = function (options) {\n    var width = asNumber(options.width);\n    var height = asNumber(options.height);\n    var outlineScale = Math.min(width, height) / 2;\n    var outline = drawEllipse({\n        x: options.x,\n        y: options.y,\n        xScale: outlineScale,\n        yScale: outlineScale,\n        color: options.color,\n        borderColor: options.borderColor,\n        borderWidth: options.borderWidth,\n    });\n    if (!options.filled)\n        return outline;\n    var dot = drawEllipse({\n        x: options.x,\n        y: options.y,\n        xScale: outlineScale * 0.45,\n        yScale: outlineScale * 0.45,\n        color: options.dotColor,\n        borderColor: undefined,\n        borderWidth: 0,\n    });\n    return __spreadArrays([pushGraphicsState()], outline, dot, [popGraphicsState()]);\n};\nexport var drawButton = function (options) {\n    var x = asNumber(options.x);\n    var y = asNumber(options.y);\n    var width = asNumber(options.width);\n    var height = asNumber(options.height);\n    var background = drawRectangle({\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        borderWidth: options.borderWidth,\n        color: options.color,\n        borderColor: options.borderColor,\n        rotate: degrees(0),\n        xSkew: degrees(0),\n        ySkew: degrees(0),\n    });\n    var lines = drawTextLines(options.textLines, {\n        color: options.textColor,\n        font: options.font,\n        size: options.fontSize,\n        rotate: degrees(0),\n        xSkew: degrees(0),\n        ySkew: degrees(0),\n    });\n    return __spreadArrays([pushGraphicsState()], background, lines, [popGraphicsState()]);\n};\nexport var drawTextLines = function (lines, options) {\n    var operators = [\n        beginText(),\n        setFillingColor(options.color),\n        setFontAndSize(options.font, options.size),\n    ];\n    for (var idx = 0, len = lines.length; idx < len; idx++) {\n        var _a = lines[idx], encoded = _a.encoded, x = _a.x, y = _a.y;\n        operators.push(rotateAndSkewTextRadiansAndTranslate(toRadians(options.rotate), toRadians(options.xSkew), toRadians(options.ySkew), x, y), showText(encoded));\n    }\n    operators.push(endText());\n    return operators;\n};\nexport var drawTextField = function (options) {\n    var x = asNumber(options.x);\n    var y = asNumber(options.y);\n    var width = asNumber(options.width);\n    var height = asNumber(options.height);\n    var borderWidth = asNumber(options.borderWidth);\n    var padding = asNumber(options.padding);\n    var clipX = x + borderWidth / 2 + padding;\n    var clipY = y + borderWidth / 2 + padding;\n    var clipWidth = width - (borderWidth / 2 + padding) * 2;\n    var clipHeight = height - (borderWidth / 2 + padding) * 2;\n    var clippingArea = [\n        moveTo(clipX, clipY),\n        lineTo(clipX, clipY + clipHeight),\n        lineTo(clipX + clipWidth, clipY + clipHeight),\n        lineTo(clipX + clipWidth, clipY),\n        closePath(),\n        clip(),\n        endPath(),\n    ];\n    var background = drawRectangle({\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        borderWidth: options.borderWidth,\n        color: options.color,\n        borderColor: options.borderColor,\n        rotate: degrees(0),\n        xSkew: degrees(0),\n        ySkew: degrees(0),\n    });\n    var lines = drawTextLines(options.textLines, {\n        color: options.textColor,\n        font: options.font,\n        size: options.fontSize,\n        rotate: degrees(0),\n        xSkew: degrees(0),\n        ySkew: degrees(0),\n    });\n    var markedContent = __spreadArrays([\n        beginMarkedContent('Tx'),\n        pushGraphicsState()\n    ], lines, [\n        popGraphicsState(),\n        endMarkedContent(),\n    ]);\n    return __spreadArrays([\n        pushGraphicsState()\n    ], background, clippingArea, markedContent, [\n        popGraphicsState(),\n    ]);\n};\nexport var drawOptionList = function (options) {\n    var x = asNumber(options.x);\n    var y = asNumber(options.y);\n    var width = asNumber(options.width);\n    var height = asNumber(options.height);\n    var lineHeight = asNumber(options.lineHeight);\n    var borderWidth = asNumber(options.borderWidth);\n    var padding = asNumber(options.padding);\n    var clipX = x + borderWidth / 2 + padding;\n    var clipY = y + borderWidth / 2 + padding;\n    var clipWidth = width - (borderWidth / 2 + padding) * 2;\n    var clipHeight = height - (borderWidth / 2 + padding) * 2;\n    var clippingArea = [\n        moveTo(clipX, clipY),\n        lineTo(clipX, clipY + clipHeight),\n        lineTo(clipX + clipWidth, clipY + clipHeight),\n        lineTo(clipX + clipWidth, clipY),\n        closePath(),\n        clip(),\n        endPath(),\n    ];\n    var background = drawRectangle({\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        borderWidth: options.borderWidth,\n        color: options.color,\n        borderColor: options.borderColor,\n        rotate: degrees(0),\n        xSkew: degrees(0),\n        ySkew: degrees(0),\n    });\n    var highlights = [];\n    for (var idx = 0, len = options.selectedLines.length; idx < len; idx++) {\n        var line = options.textLines[options.selectedLines[idx]];\n        highlights.push.apply(highlights, drawRectangle({\n            x: line.x - padding,\n            y: line.y - (lineHeight - line.height) / 2,\n            width: width - borderWidth,\n            height: line.height + (lineHeight - line.height) / 2,\n            borderWidth: 0,\n            color: options.selectedColor,\n            borderColor: undefined,\n            rotate: degrees(0),\n            xSkew: degrees(0),\n            ySkew: degrees(0),\n        }));\n    }\n    var lines = drawTextLines(options.textLines, {\n        color: options.textColor,\n        font: options.font,\n        size: options.fontSize,\n        rotate: degrees(0),\n        xSkew: degrees(0),\n        ySkew: degrees(0),\n    });\n    var markedContent = __spreadArrays([\n        beginMarkedContent('Tx'),\n        pushGraphicsState()\n    ], lines, [\n        popGraphicsState(),\n        endMarkedContent(),\n    ]);\n    return __spreadArrays([\n        pushGraphicsState()\n    ], background, highlights, clippingArea, markedContent, [\n        popGraphicsState(),\n    ]);\n};\n//# sourceMappingURL=operations.js.map"]},"metadata":{},"sourceType":"module"}