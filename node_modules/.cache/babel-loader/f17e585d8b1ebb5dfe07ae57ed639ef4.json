{"ast":null,"code":"var flag = function (bitIndex) {\n  return 1 << bitIndex;\n};\n/** From PDF spec table 221 */\nexport var AcroFieldFlags;\n(function (AcroFieldFlags) {\n  /**\n   * If set, the user may not change the value of the field. Any associated\n   * widget annotations will not interact with the user; that is, they will not\n   * respond to mouse clicks or change their appearance in response to mouse\n   * motions. This flag is useful for fields whose values are computed or\n   * imported from a database.\n   */\n  AcroFieldFlags[AcroFieldFlags[\"ReadOnly\"] = flag(1 - 1)] = \"ReadOnly\";\n  /**\n   * If set, the field shall have a value at the time it is exported by a\n   * submit-form action (see 12.7.5.2, \"Submit-Form Action\").\n   */\n  AcroFieldFlags[AcroFieldFlags[\"Required\"] = flag(2 - 1)] = \"Required\";\n  /**\n   * If set, the field shall not be exported by a submit-form action\n   * (see 12.7.5.2, \"Submit-Form Action\").\n   */\n  AcroFieldFlags[AcroFieldFlags[\"NoExport\"] = flag(3 - 1)] = \"NoExport\";\n})(AcroFieldFlags || (AcroFieldFlags = {}));\n/** From PDF spec table 226 */\nexport var AcroButtonFlags;\n(function (AcroButtonFlags) {\n  /**\n   * (Radio buttons only) If set, exactly one radio button shall be selected at\n   * all times; selecting the currently selected button has no effect. If clear,\n   * clicking the selected button deselects it, leaving no button selected.\n   */\n  AcroButtonFlags[AcroButtonFlags[\"NoToggleToOff\"] = flag(15 - 1)] = \"NoToggleToOff\";\n  /**\n   * If set, the field is a set of radio buttons; if clear, the field is a check\n   * box. This flag may be set only if the Pushbutton flag is clear.\n   */\n  AcroButtonFlags[AcroButtonFlags[\"Radio\"] = flag(16 - 1)] = \"Radio\";\n  /**\n   * If set, the field is a pushbutton that does not retain a permanent value.\n   */\n  AcroButtonFlags[AcroButtonFlags[\"PushButton\"] = flag(17 - 1)] = \"PushButton\";\n  /**\n   * If set, a group of radio buttons within a radio button field that use the\n   * same value for the on state will turn on and off in unison; that is if one\n   * is checked, they are all checked. If clear, the buttons are mutually\n   * exclusive (the same behavior as HTML radio buttons).\n   */\n  AcroButtonFlags[AcroButtonFlags[\"RadiosInUnison\"] = flag(26 - 1)] = \"RadiosInUnison\";\n})(AcroButtonFlags || (AcroButtonFlags = {}));\n/** From PDF spec table 228 */\nexport var AcroTextFlags;\n(function (AcroTextFlags) {\n  /**\n   * If set, the field may contain multiple lines of text; if clear, the field's\n   * text shall be restricted to a single line.\n   */\n  AcroTextFlags[AcroTextFlags[\"Multiline\"] = flag(13 - 1)] = \"Multiline\";\n  /**\n   * If set, the field is intended for entering a secure password that should\n   * not be echoed visibly to the screen. Characters typed from the keyboard\n   * shall instead be echoed in some unreadable form, such as asterisks or\n   * bullet characters.\n   * > NOTE   To protect password confidentiality, readers should never store\n   * >        the value of the text field in the PDF file if this flag is set.\n   */\n  AcroTextFlags[AcroTextFlags[\"Password\"] = flag(14 - 1)] = \"Password\";\n  /**\n   * If set, the text entered in the field represents the pathname of a file\n   * whose contents shall be submitted as the value of the field.\n   */\n  AcroTextFlags[AcroTextFlags[\"FileSelect\"] = flag(21 - 1)] = \"FileSelect\";\n  /**\n   * If set, text entered in the field shall not be spell-checked.\n   */\n  AcroTextFlags[AcroTextFlags[\"DoNotSpellCheck\"] = flag(23 - 1)] = \"DoNotSpellCheck\";\n  /**\n   * If set, the field shall not scroll (horizontally for single-line fields,\n   * vertically for multiple-line fields) to accommodate more text than fits\n   * within its annotation rectangle. Once the field is full, no further text\n   * shall be accepted for interactive form filling; for non-interactive form\n   * filling, the filler should take care not to add more character than will\n   * visibly fit in the defined area.\n   */\n  AcroTextFlags[AcroTextFlags[\"DoNotScroll\"] = flag(24 - 1)] = \"DoNotScroll\";\n  /**\n   * May be set only if the MaxLen entry is present in the text field dictionary\n   * (see Table 229) and if the Multiline, Password, and FileSelect flags are\n   * clear. If set, the field shall be automatically divided into as many\n   * equally spaced positions, or combs, as the value of MaxLen, and the text\n   * is laid out into those combs.\n   */\n  AcroTextFlags[AcroTextFlags[\"Comb\"] = flag(25 - 1)] = \"Comb\";\n  /**\n   * If set, the value of this field shall be a rich text string\n   * (see 12.7.3.4, \"Rich Text Strings\"). If the field has a value, the RV\n   * entry of the field dictionary (Table 222) shall specify the rich text\n   * string.\n   */\n  AcroTextFlags[AcroTextFlags[\"RichText\"] = flag(26 - 1)] = \"RichText\";\n})(AcroTextFlags || (AcroTextFlags = {}));\n/** From PDF spec table 230 */\nexport var AcroChoiceFlags;\n(function (AcroChoiceFlags) {\n  /**\n   * If set, the field is a combo box; if clear, the field is a list box.\n   */\n  AcroChoiceFlags[AcroChoiceFlags[\"Combo\"] = flag(18 - 1)] = \"Combo\";\n  /**\n   * If set, the combo box shall include an editable text box as well as a\n   * drop-down list; if clear, it shall include only a drop-down list. This\n   * flag shall be used only if the Combo flag is set.\n   */\n  AcroChoiceFlags[AcroChoiceFlags[\"Edit\"] = flag(19 - 1)] = \"Edit\";\n  /**\n   * If set, the field's option items shall be sorted alphabetically. This flag\n   * is intended for use by writers, not by readers. Conforming readers shall\n   * display the options in the order in which they occur in the Opt array\n   * (see Table 231).\n   */\n  AcroChoiceFlags[AcroChoiceFlags[\"Sort\"] = flag(20 - 1)] = \"Sort\";\n  /**\n   * If set, more than one of the field's option items may be selected\n   * simultaneously; if clear, at most one item shall be selected.\n   */\n  AcroChoiceFlags[AcroChoiceFlags[\"MultiSelect\"] = flag(22 - 1)] = \"MultiSelect\";\n  /**\n   * If set, text entered in the field shall not be spell-checked. This flag\n   * shall not be used unless the Combo and Edit flags are both set.\n   */\n  AcroChoiceFlags[AcroChoiceFlags[\"DoNotSpellCheck\"] = flag(23 - 1)] = \"DoNotSpellCheck\";\n  /**\n   * If set, the new value shall be committed as soon as a selection is made\n   * (commonly with the pointing device). In this case, supplying a value for\n   * a field involves three actions: selecting the field for fill-in,\n   * selecting a choice for the fill-in value, and leaving that field, which\n   * finalizes or \"commits\" the data choice and triggers any actions associated\n   * with the entry or changing of this data. If this flag is on, then\n   * processing does not wait for leaving the field action to occur, but\n   * immediately proceeds to the third step.\n   *\n   * This option enables applications to perform an action once a selection is\n   * made, without requiring the user to exit the field. If clear, the new\n   * value is not committed until the user exits the field.\n   */\n  AcroChoiceFlags[AcroChoiceFlags[\"CommitOnSelChange\"] = flag(27 - 1)] = \"CommitOnSelChange\";\n})(AcroChoiceFlags || (AcroChoiceFlags = {}));","map":{"version":3,"sources":["../../../src/core/acroform/flags.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var flag = function (bitIndex) { return 1 << bitIndex; };\n/** From PDF spec table 221 */\nexport var AcroFieldFlags;\n(function (AcroFieldFlags) {\n    /**\n     * If set, the user may not change the value of the field. Any associated\n     * widget annotations will not interact with the user; that is, they will not\n     * respond to mouse clicks or change their appearance in response to mouse\n     * motions. This flag is useful for fields whose values are computed or\n     * imported from a database.\n     */\n    AcroFieldFlags[AcroFieldFlags[\"ReadOnly\"] = flag(1 - 1)] = \"ReadOnly\";\n    /**\n     * If set, the field shall have a value at the time it is exported by a\n     * submit-form action (see 12.7.5.2, \"Submit-Form Action\").\n     */\n    AcroFieldFlags[AcroFieldFlags[\"Required\"] = flag(2 - 1)] = \"Required\";\n    /**\n     * If set, the field shall not be exported by a submit-form action\n     * (see 12.7.5.2, \"Submit-Form Action\").\n     */\n    AcroFieldFlags[AcroFieldFlags[\"NoExport\"] = flag(3 - 1)] = \"NoExport\";\n})(AcroFieldFlags || (AcroFieldFlags = {}));\n/** From PDF spec table 226 */\nexport var AcroButtonFlags;\n(function (AcroButtonFlags) {\n    /**\n     * (Radio buttons only) If set, exactly one radio button shall be selected at\n     * all times; selecting the currently selected button has no effect. If clear,\n     * clicking the selected button deselects it, leaving no button selected.\n     */\n    AcroButtonFlags[AcroButtonFlags[\"NoToggleToOff\"] = flag(15 - 1)] = \"NoToggleToOff\";\n    /**\n     * If set, the field is a set of radio buttons; if clear, the field is a check\n     * box. This flag may be set only if the Pushbutton flag is clear.\n     */\n    AcroButtonFlags[AcroButtonFlags[\"Radio\"] = flag(16 - 1)] = \"Radio\";\n    /**\n     * If set, the field is a pushbutton that does not retain a permanent value.\n     */\n    AcroButtonFlags[AcroButtonFlags[\"PushButton\"] = flag(17 - 1)] = \"PushButton\";\n    /**\n     * If set, a group of radio buttons within a radio button field that use the\n     * same value for the on state will turn on and off in unison; that is if one\n     * is checked, they are all checked. If clear, the buttons are mutually\n     * exclusive (the same behavior as HTML radio buttons).\n     */\n    AcroButtonFlags[AcroButtonFlags[\"RadiosInUnison\"] = flag(26 - 1)] = \"RadiosInUnison\";\n})(AcroButtonFlags || (AcroButtonFlags = {}));\n/** From PDF spec table 228 */\nexport var AcroTextFlags;\n(function (AcroTextFlags) {\n    /**\n     * If set, the field may contain multiple lines of text; if clear, the field's\n     * text shall be restricted to a single line.\n     */\n    AcroTextFlags[AcroTextFlags[\"Multiline\"] = flag(13 - 1)] = \"Multiline\";\n    /**\n     * If set, the field is intended for entering a secure password that should\n     * not be echoed visibly to the screen. Characters typed from the keyboard\n     * shall instead be echoed in some unreadable form, such as asterisks or\n     * bullet characters.\n     * > NOTE   To protect password confidentiality, readers should never store\n     * >        the value of the text field in the PDF file if this flag is set.\n     */\n    AcroTextFlags[AcroTextFlags[\"Password\"] = flag(14 - 1)] = \"Password\";\n    /**\n     * If set, the text entered in the field represents the pathname of a file\n     * whose contents shall be submitted as the value of the field.\n     */\n    AcroTextFlags[AcroTextFlags[\"FileSelect\"] = flag(21 - 1)] = \"FileSelect\";\n    /**\n     * If set, text entered in the field shall not be spell-checked.\n     */\n    AcroTextFlags[AcroTextFlags[\"DoNotSpellCheck\"] = flag(23 - 1)] = \"DoNotSpellCheck\";\n    /**\n     * If set, the field shall not scroll (horizontally for single-line fields,\n     * vertically for multiple-line fields) to accommodate more text than fits\n     * within its annotation rectangle. Once the field is full, no further text\n     * shall be accepted for interactive form filling; for non-interactive form\n     * filling, the filler should take care not to add more character than will\n     * visibly fit in the defined area.\n     */\n    AcroTextFlags[AcroTextFlags[\"DoNotScroll\"] = flag(24 - 1)] = \"DoNotScroll\";\n    /**\n     * May be set only if the MaxLen entry is present in the text field dictionary\n     * (see Table 229) and if the Multiline, Password, and FileSelect flags are\n     * clear. If set, the field shall be automatically divided into as many\n     * equally spaced positions, or combs, as the value of MaxLen, and the text\n     * is laid out into those combs.\n     */\n    AcroTextFlags[AcroTextFlags[\"Comb\"] = flag(25 - 1)] = \"Comb\";\n    /**\n     * If set, the value of this field shall be a rich text string\n     * (see 12.7.3.4, \"Rich Text Strings\"). If the field has a value, the RV\n     * entry of the field dictionary (Table 222) shall specify the rich text\n     * string.\n     */\n    AcroTextFlags[AcroTextFlags[\"RichText\"] = flag(26 - 1)] = \"RichText\";\n})(AcroTextFlags || (AcroTextFlags = {}));\n/** From PDF spec table 230 */\nexport var AcroChoiceFlags;\n(function (AcroChoiceFlags) {\n    /**\n     * If set, the field is a combo box; if clear, the field is a list box.\n     */\n    AcroChoiceFlags[AcroChoiceFlags[\"Combo\"] = flag(18 - 1)] = \"Combo\";\n    /**\n     * If set, the combo box shall include an editable text box as well as a\n     * drop-down list; if clear, it shall include only a drop-down list. This\n     * flag shall be used only if the Combo flag is set.\n     */\n    AcroChoiceFlags[AcroChoiceFlags[\"Edit\"] = flag(19 - 1)] = \"Edit\";\n    /**\n     * If set, the field's option items shall be sorted alphabetically. This flag\n     * is intended for use by writers, not by readers. Conforming readers shall\n     * display the options in the order in which they occur in the Opt array\n     * (see Table 231).\n     */\n    AcroChoiceFlags[AcroChoiceFlags[\"Sort\"] = flag(20 - 1)] = \"Sort\";\n    /**\n     * If set, more than one of the field's option items may be selected\n     * simultaneously; if clear, at most one item shall be selected.\n     */\n    AcroChoiceFlags[AcroChoiceFlags[\"MultiSelect\"] = flag(22 - 1)] = \"MultiSelect\";\n    /**\n     * If set, text entered in the field shall not be spell-checked. This flag\n     * shall not be used unless the Combo and Edit flags are both set.\n     */\n    AcroChoiceFlags[AcroChoiceFlags[\"DoNotSpellCheck\"] = flag(23 - 1)] = \"DoNotSpellCheck\";\n    /**\n     * If set, the new value shall be committed as soon as a selection is made\n     * (commonly with the pointing device). In this case, supplying a value for\n     * a field involves three actions: selecting the field for fill-in,\n     * selecting a choice for the fill-in value, and leaving that field, which\n     * finalizes or \"commits\" the data choice and triggers any actions associated\n     * with the entry or changing of this data. If this flag is on, then\n     * processing does not wait for leaving the field action to occur, but\n     * immediately proceeds to the third step.\n     *\n     * This option enables applications to perform an action once a selection is\n     * made, without requiring the user to exit the field. If clear, the new\n     * value is not committed until the user exits the field.\n     */\n    AcroChoiceFlags[AcroChoiceFlags[\"CommitOnSelChange\"] = flag(27 - 1)] = \"CommitOnSelChange\";\n})(AcroChoiceFlags || (AcroChoiceFlags = {}));\n//# sourceMappingURL=flags.js.map"]},"metadata":{},"sourceType":"module"}