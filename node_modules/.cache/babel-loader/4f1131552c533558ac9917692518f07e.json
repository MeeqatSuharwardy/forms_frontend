{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFFlateStream from \"./PDFFlateStream\";\nimport CharCodes from \"../syntax/CharCodes\";\nvar PDFContentStream = /** @class */function (_super) {\n  __extends(PDFContentStream, _super);\n  function PDFContentStream(dict, operators, encode) {\n    if (encode === void 0) {\n      encode = true;\n    }\n    var _this = _super.call(this, dict, encode) || this;\n    _this.operators = operators;\n    return _this;\n  }\n  PDFContentStream.prototype.push = function () {\n    var _a;\n    var operators = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      operators[_i] = arguments[_i];\n    }\n    (_a = this.operators).push.apply(_a, operators);\n  };\n  PDFContentStream.prototype.clone = function (context) {\n    var operators = new Array(this.operators.length);\n    for (var idx = 0, len = this.operators.length; idx < len; idx++) {\n      operators[idx] = this.operators[idx].clone(context);\n    }\n    var _a = this,\n      dict = _a.dict,\n      encode = _a.encode;\n    return PDFContentStream.of(dict.clone(context), operators, encode);\n  };\n  PDFContentStream.prototype.getContentsString = function () {\n    var value = '';\n    for (var idx = 0, len = this.operators.length; idx < len; idx++) {\n      value += this.operators[idx] + \"\\n\";\n    }\n    return value;\n  };\n  PDFContentStream.prototype.getUnencodedContents = function () {\n    var buffer = new Uint8Array(this.getUnencodedContentsSize());\n    var offset = 0;\n    for (var idx = 0, len = this.operators.length; idx < len; idx++) {\n      offset += this.operators[idx].copyBytesInto(buffer, offset);\n      buffer[offset++] = CharCodes.Newline;\n    }\n    return buffer;\n  };\n  PDFContentStream.prototype.getUnencodedContentsSize = function () {\n    var size = 0;\n    for (var idx = 0, len = this.operators.length; idx < len; idx++) {\n      size += this.operators[idx].sizeInBytes() + 1;\n    }\n    return size;\n  };\n  PDFContentStream.of = function (dict, operators, encode) {\n    if (encode === void 0) {\n      encode = true;\n    }\n    return new PDFContentStream(dict, operators, encode);\n  };\n  return PDFContentStream;\n}(PDFFlateStream);\nexport default PDFContentStream;","map":{"version":3,"sources":["../../../src/core/structures/PDFContentStream.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport PDFFlateStream from \"./PDFFlateStream\";\nimport CharCodes from \"../syntax/CharCodes\";\nvar PDFContentStream = /** @class */ (function (_super) {\n    __extends(PDFContentStream, _super);\n    function PDFContentStream(dict, operators, encode) {\n        if (encode === void 0) { encode = true; }\n        var _this = _super.call(this, dict, encode) || this;\n        _this.operators = operators;\n        return _this;\n    }\n    PDFContentStream.prototype.push = function () {\n        var _a;\n        var operators = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operators[_i] = arguments[_i];\n        }\n        (_a = this.operators).push.apply(_a, operators);\n    };\n    PDFContentStream.prototype.clone = function (context) {\n        var operators = new Array(this.operators.length);\n        for (var idx = 0, len = this.operators.length; idx < len; idx++) {\n            operators[idx] = this.operators[idx].clone(context);\n        }\n        var _a = this, dict = _a.dict, encode = _a.encode;\n        return PDFContentStream.of(dict.clone(context), operators, encode);\n    };\n    PDFContentStream.prototype.getContentsString = function () {\n        var value = '';\n        for (var idx = 0, len = this.operators.length; idx < len; idx++) {\n            value += this.operators[idx] + \"\\n\";\n        }\n        return value;\n    };\n    PDFContentStream.prototype.getUnencodedContents = function () {\n        var buffer = new Uint8Array(this.getUnencodedContentsSize());\n        var offset = 0;\n        for (var idx = 0, len = this.operators.length; idx < len; idx++) {\n            offset += this.operators[idx].copyBytesInto(buffer, offset);\n            buffer[offset++] = CharCodes.Newline;\n        }\n        return buffer;\n    };\n    PDFContentStream.prototype.getUnencodedContentsSize = function () {\n        var size = 0;\n        for (var idx = 0, len = this.operators.length; idx < len; idx++) {\n            size += this.operators[idx].sizeInBytes() + 1;\n        }\n        return size;\n    };\n    PDFContentStream.of = function (dict, operators, encode) {\n        if (encode === void 0) { encode = true; }\n        return new PDFContentStream(dict, operators, encode);\n    };\n    return PDFContentStream;\n}(PDFFlateStream));\nexport default PDFContentStream;\n//# sourceMappingURL=PDFContentStream.js.map"]},"metadata":{},"sourceType":"module"}