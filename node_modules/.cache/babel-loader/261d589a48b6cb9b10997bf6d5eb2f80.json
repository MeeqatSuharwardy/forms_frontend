{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PrivateConstructorError } from \"../errors\";\nimport PDFObject from \"./PDFObject\";\nimport CharCodes from \"../syntax/CharCodes\";\nimport { IsIrregular } from \"../syntax/Irregular\";\nimport { charFromHexCode, copyStringIntoBuffer, toCharCode, toHexString } from \"../../utils\";\nvar decodeName = function (name) {\n  return name.replace(/#([\\dABCDEF]{2})/g, function (_, hex) {\n    return charFromHexCode(hex);\n  });\n};\nvar isRegularChar = function (charCode) {\n  return charCode >= CharCodes.ExclamationPoint && charCode <= CharCodes.Tilde && !IsIrregular[charCode];\n};\nvar ENFORCER = {};\nvar pool = new Map();\nvar PDFName = /** @class */function (_super) {\n  __extends(PDFName, _super);\n  function PDFName(enforcer, name) {\n    var _this = this;\n    if (enforcer !== ENFORCER) throw new PrivateConstructorError('PDFName');\n    _this = _super.call(this) || this;\n    var encodedName = '/';\n    for (var idx = 0, len = name.length; idx < len; idx++) {\n      var character = name[idx];\n      var code = toCharCode(character);\n      encodedName += isRegularChar(code) ? character : \"#\" + toHexString(code);\n    }\n    _this.encodedName = encodedName;\n    return _this;\n  }\n  PDFName.prototype.asBytes = function () {\n    var bytes = [];\n    var hex = '';\n    var escaped = false;\n    var pushByte = function (byte) {\n      if (byte !== undefined) bytes.push(byte);\n      escaped = false;\n    };\n    for (var idx = 1, len = this.encodedName.length; idx < len; idx++) {\n      var char = this.encodedName[idx];\n      var byte = toCharCode(char);\n      var nextChar = this.encodedName[idx + 1];\n      if (!escaped) {\n        if (byte === CharCodes.Hash) escaped = true;else pushByte(byte);\n      } else {\n        if (byte >= CharCodes.Zero && byte <= CharCodes.Nine || byte >= CharCodes.a && byte <= CharCodes.f || byte >= CharCodes.A && byte <= CharCodes.F) {\n          hex += char;\n          if (hex.length === 2 || !(nextChar >= '0' && nextChar <= '9' || nextChar >= 'a' && nextChar <= 'f' || nextChar >= 'A' && nextChar <= 'F')) {\n            pushByte(parseInt(hex, 16));\n            hex = '';\n          }\n        } else {\n          pushByte(byte);\n        }\n      }\n    }\n    return new Uint8Array(bytes);\n  };\n  // TODO: This should probably use `utf8Decode()`\n  // TODO: Polyfill Array.from?\n  PDFName.prototype.decodeText = function () {\n    var bytes = this.asBytes();\n    return String.fromCharCode.apply(String, Array.from(bytes));\n  };\n  PDFName.prototype.asString = function () {\n    return this.encodedName;\n  };\n  /** @deprecated in favor of [[PDFName.asString]] */\n  PDFName.prototype.value = function () {\n    return this.encodedName;\n  };\n  PDFName.prototype.clone = function () {\n    return this;\n  };\n  PDFName.prototype.toString = function () {\n    return this.encodedName;\n  };\n  PDFName.prototype.sizeInBytes = function () {\n    return this.encodedName.length;\n  };\n  PDFName.prototype.copyBytesInto = function (buffer, offset) {\n    offset += copyStringIntoBuffer(this.encodedName, buffer, offset);\n    return this.encodedName.length;\n  };\n  PDFName.of = function (name) {\n    var decodedValue = decodeName(name);\n    var instance = pool.get(decodedValue);\n    if (!instance) {\n      instance = new PDFName(ENFORCER, decodedValue);\n      pool.set(decodedValue, instance);\n    }\n    return instance;\n  };\n  /* tslint:disable member-ordering */\n  PDFName.Length = PDFName.of('Length');\n  PDFName.FlateDecode = PDFName.of('FlateDecode');\n  PDFName.Resources = PDFName.of('Resources');\n  PDFName.Font = PDFName.of('Font');\n  PDFName.XObject = PDFName.of('XObject');\n  PDFName.ExtGState = PDFName.of('ExtGState');\n  PDFName.Contents = PDFName.of('Contents');\n  PDFName.Type = PDFName.of('Type');\n  PDFName.Parent = PDFName.of('Parent');\n  PDFName.MediaBox = PDFName.of('MediaBox');\n  PDFName.Page = PDFName.of('Page');\n  PDFName.Annots = PDFName.of('Annots');\n  PDFName.TrimBox = PDFName.of('TrimBox');\n  PDFName.ArtBox = PDFName.of('ArtBox');\n  PDFName.BleedBox = PDFName.of('BleedBox');\n  PDFName.CropBox = PDFName.of('CropBox');\n  PDFName.Rotate = PDFName.of('Rotate');\n  PDFName.Title = PDFName.of('Title');\n  PDFName.Author = PDFName.of('Author');\n  PDFName.Subject = PDFName.of('Subject');\n  PDFName.Creator = PDFName.of('Creator');\n  PDFName.Keywords = PDFName.of('Keywords');\n  PDFName.Producer = PDFName.of('Producer');\n  PDFName.CreationDate = PDFName.of('CreationDate');\n  PDFName.ModDate = PDFName.of('ModDate');\n  return PDFName;\n}(PDFObject);\nexport default PDFName;","map":{"version":3,"sources":["../../../src/core/objects/PDFName.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { PrivateConstructorError } from \"../errors\";\nimport PDFObject from \"./PDFObject\";\nimport CharCodes from \"../syntax/CharCodes\";\nimport { IsIrregular } from \"../syntax/Irregular\";\nimport { charFromHexCode, copyStringIntoBuffer, toCharCode, toHexString, } from \"../../utils\";\nvar decodeName = function (name) {\n    return name.replace(/#([\\dABCDEF]{2})/g, function (_, hex) { return charFromHexCode(hex); });\n};\nvar isRegularChar = function (charCode) {\n    return charCode >= CharCodes.ExclamationPoint &&\n        charCode <= CharCodes.Tilde &&\n        !IsIrregular[charCode];\n};\nvar ENFORCER = {};\nvar pool = new Map();\nvar PDFName = /** @class */ (function (_super) {\n    __extends(PDFName, _super);\n    function PDFName(enforcer, name) {\n        var _this = this;\n        if (enforcer !== ENFORCER)\n            throw new PrivateConstructorError('PDFName');\n        _this = _super.call(this) || this;\n        var encodedName = '/';\n        for (var idx = 0, len = name.length; idx < len; idx++) {\n            var character = name[idx];\n            var code = toCharCode(character);\n            encodedName += isRegularChar(code) ? character : \"#\" + toHexString(code);\n        }\n        _this.encodedName = encodedName;\n        return _this;\n    }\n    PDFName.prototype.asBytes = function () {\n        var bytes = [];\n        var hex = '';\n        var escaped = false;\n        var pushByte = function (byte) {\n            if (byte !== undefined)\n                bytes.push(byte);\n            escaped = false;\n        };\n        for (var idx = 1, len = this.encodedName.length; idx < len; idx++) {\n            var char = this.encodedName[idx];\n            var byte = toCharCode(char);\n            var nextChar = this.encodedName[idx + 1];\n            if (!escaped) {\n                if (byte === CharCodes.Hash)\n                    escaped = true;\n                else\n                    pushByte(byte);\n            }\n            else {\n                if ((byte >= CharCodes.Zero && byte <= CharCodes.Nine) ||\n                    (byte >= CharCodes.a && byte <= CharCodes.f) ||\n                    (byte >= CharCodes.A && byte <= CharCodes.F)) {\n                    hex += char;\n                    if (hex.length === 2 ||\n                        !((nextChar >= '0' && nextChar <= '9') ||\n                            (nextChar >= 'a' && nextChar <= 'f') ||\n                            (nextChar >= 'A' && nextChar <= 'F'))) {\n                        pushByte(parseInt(hex, 16));\n                        hex = '';\n                    }\n                }\n                else {\n                    pushByte(byte);\n                }\n            }\n        }\n        return new Uint8Array(bytes);\n    };\n    // TODO: This should probably use `utf8Decode()`\n    // TODO: Polyfill Array.from?\n    PDFName.prototype.decodeText = function () {\n        var bytes = this.asBytes();\n        return String.fromCharCode.apply(String, Array.from(bytes));\n    };\n    PDFName.prototype.asString = function () {\n        return this.encodedName;\n    };\n    /** @deprecated in favor of [[PDFName.asString]] */\n    PDFName.prototype.value = function () {\n        return this.encodedName;\n    };\n    PDFName.prototype.clone = function () {\n        return this;\n    };\n    PDFName.prototype.toString = function () {\n        return this.encodedName;\n    };\n    PDFName.prototype.sizeInBytes = function () {\n        return this.encodedName.length;\n    };\n    PDFName.prototype.copyBytesInto = function (buffer, offset) {\n        offset += copyStringIntoBuffer(this.encodedName, buffer, offset);\n        return this.encodedName.length;\n    };\n    PDFName.of = function (name) {\n        var decodedValue = decodeName(name);\n        var instance = pool.get(decodedValue);\n        if (!instance) {\n            instance = new PDFName(ENFORCER, decodedValue);\n            pool.set(decodedValue, instance);\n        }\n        return instance;\n    };\n    /* tslint:disable member-ordering */\n    PDFName.Length = PDFName.of('Length');\n    PDFName.FlateDecode = PDFName.of('FlateDecode');\n    PDFName.Resources = PDFName.of('Resources');\n    PDFName.Font = PDFName.of('Font');\n    PDFName.XObject = PDFName.of('XObject');\n    PDFName.ExtGState = PDFName.of('ExtGState');\n    PDFName.Contents = PDFName.of('Contents');\n    PDFName.Type = PDFName.of('Type');\n    PDFName.Parent = PDFName.of('Parent');\n    PDFName.MediaBox = PDFName.of('MediaBox');\n    PDFName.Page = PDFName.of('Page');\n    PDFName.Annots = PDFName.of('Annots');\n    PDFName.TrimBox = PDFName.of('TrimBox');\n    PDFName.ArtBox = PDFName.of('ArtBox');\n    PDFName.BleedBox = PDFName.of('BleedBox');\n    PDFName.CropBox = PDFName.of('CropBox');\n    PDFName.Rotate = PDFName.of('Rotate');\n    PDFName.Title = PDFName.of('Title');\n    PDFName.Author = PDFName.of('Author');\n    PDFName.Subject = PDFName.of('Subject');\n    PDFName.Creator = PDFName.of('Creator');\n    PDFName.Keywords = PDFName.of('Keywords');\n    PDFName.Producer = PDFName.of('Producer');\n    PDFName.CreationDate = PDFName.of('CreationDate');\n    PDFName.ModDate = PDFName.of('ModDate');\n    return PDFName;\n}(PDFObject));\nexport default PDFName;\n//# sourceMappingURL=PDFName.js.map"]},"metadata":{},"sourceType":"module"}