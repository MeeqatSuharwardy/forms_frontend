{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFPage from \"../PDFPage\";\nimport { normalizeAppearance, defaultCheckBoxAppearanceProvider } from \"./appearances\";\nimport { rgb } from \"../colors\";\nimport { degrees } from \"../rotations\";\nimport PDFField, { assertFieldAppearanceOptions } from \"./PDFField\";\nimport { PDFName, PDFDict, PDFAcroCheckBox } from \"../../core\";\nimport { assertIs, assertOrUndefined } from \"../../utils\";\n/**\n * Represents a check box field of a [[PDFForm]].\n *\n * [[PDFCheckBox]] fields are interactive boxes that users can click with their\n * mouse. This type of [[PDFField]] has two states: `on` and `off`. The purpose\n * of a check box is to enable users to select from one or more options, where\n * each option is represented by a single check box. Check boxes are typically\n * square in shape and display a check mark when they are in the `on` state.\n */\nvar PDFCheckBox = /** @class */function (_super) {\n  __extends(PDFCheckBox, _super);\n  function PDFCheckBox(acroCheckBox, ref, doc) {\n    var _this = _super.call(this, acroCheckBox, ref, doc) || this;\n    assertIs(acroCheckBox, 'acroCheckBox', [[PDFAcroCheckBox, 'PDFAcroCheckBox']]);\n    _this.acroField = acroCheckBox;\n    return _this;\n  }\n  /**\n   * Mark this check box. This operation is analogous to a human user clicking\n   * a check box to fill it in a PDF reader. This method will update the\n   * underlying state of the check box field to indicate it has been selected.\n   * PDF libraries and readers will be able to extract this value from the\n   * saved document and determine that it was selected.\n   *\n   * For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * checkBox.check()\n   * ```\n   *\n   * This method will mark this check box as dirty, causing its appearance\n   * streams to be updated when either [[PDFDocument.save]] or\n   * [[PDFForm.updateFieldAppearances]] is called. The updated appearance\n   * streams will display a check mark inside the widgets of this check box\n   * field.\n   */\n  PDFCheckBox.prototype.check = function () {\n    var _a;\n    var onValue = (_a = this.acroField.getOnValue()) !== null && _a !== void 0 ? _a : PDFName.of('Yes');\n    this.markAsDirty();\n    this.acroField.setValue(onValue);\n  };\n  /**\n   * Clears this check box. This operation is analogous to a human user clicking\n   * a check box to unmark it in a PDF reader. This method will update the\n   * underlying state of the check box field to indicate it has been deselected.\n   * PDF libraries and readers will be able to extract this value from the\n   * saved document and determine that it was not selected.\n   *\n   * For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * checkBox.uncheck()\n   * ```\n   *\n   * This method will mark this check box as dirty. See [[PDFCheckBox.check]]\n   * for more details about what this means.\n   */\n  PDFCheckBox.prototype.uncheck = function () {\n    this.markAsDirty();\n    this.acroField.setValue(PDFName.of('Off'));\n  };\n  /**\n   * Returns `true` if this check box is selected (either by a human user via\n   * a PDF reader, or else programmatically via software). For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * if (checkBox.isChecked()) console.log('check box is selected')\n   * ```\n   * @returns Whether or not this check box is selected.\n   */\n  PDFCheckBox.prototype.isChecked = function () {\n    var onValue = this.acroField.getOnValue();\n    return !!onValue && onValue === this.acroField.getValue();\n  };\n  /**\n   * Show this check box on the specified page. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const checkBox = form.createCheckBox('some.checkBox.field')\n   *\n   * checkBox.addToPage(page, {\n   *   x: 50,\n   *   y: 75,\n   *   width: 25,\n   *   height: 25,\n   *   textColor: rgb(1, 0, 0),\n   *   backgroundColor: rgb(0, 1, 0),\n   *   borderColor: rgb(0, 0, 1),\n   *   borderWidth: 2,\n   *   rotate: degrees(90),\n   * })\n   * ```\n   * This will create a new widget for this check box field.\n   * @param page The page to which this check box widget should be added.\n   * @param options The options to be used when adding this check box widget.\n   */\n  PDFCheckBox.prototype.addToPage = function (page, options) {\n    var _a, _b, _c, _d, _e, _f;\n    assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\n    assertFieldAppearanceOptions(options);\n    if (!options) options = {};\n    if (!('textColor' in options)) options.textColor = rgb(0, 0, 0);\n    if (!('backgroundColor' in options)) options.backgroundColor = rgb(1, 1, 1);\n    if (!('borderColor' in options)) options.borderColor = rgb(0, 0, 0);\n    if (!('borderWidth' in options)) options.borderWidth = 1;\n    // Create a widget for this check box\n    var widget = this.createWidget({\n      x: (_a = options.x) !== null && _a !== void 0 ? _a : 0,\n      y: (_b = options.y) !== null && _b !== void 0 ? _b : 0,\n      width: (_c = options.width) !== null && _c !== void 0 ? _c : 50,\n      height: (_d = options.height) !== null && _d !== void 0 ? _d : 50,\n      textColor: options.textColor,\n      backgroundColor: options.backgroundColor,\n      borderColor: options.borderColor,\n      borderWidth: (_e = options.borderWidth) !== null && _e !== void 0 ? _e : 0,\n      rotate: (_f = options.rotate) !== null && _f !== void 0 ? _f : degrees(0),\n      hidden: options.hidden,\n      page: page.ref\n    });\n    var widgetRef = this.doc.context.register(widget.dict);\n    // Add widget to this field\n    this.acroField.addWidget(widgetRef);\n    // Set appearance streams for widget\n    widget.setAppearanceState(PDFName.of('Off'));\n    this.updateWidgetAppearance(widget, PDFName.of('Yes'));\n    // Add widget to the given page\n    page.node.addAnnot(widgetRef);\n  };\n  /**\n   * Returns `true` if any of this check box's widgets do not have an\n   * appearance stream for its current state. For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * if (checkBox.needsAppearancesUpdate()) console.log('Needs update')\n   * ```\n   * @returns Whether or not this check box needs an appearance update.\n   */\n  PDFCheckBox.prototype.needsAppearancesUpdate = function () {\n    var _a;\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var state = widget.getAppearanceState();\n      var normal = (_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal;\n      if (!(normal instanceof PDFDict)) return true;\n      if (state && !normal.has(state)) return true;\n    }\n    return false;\n  };\n  /**\n   * Update the appearance streams for each of this check box's widgets using\n   * the default appearance provider for check boxes. For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * checkBox.defaultUpdateAppearances()\n   * ```\n   */\n  PDFCheckBox.prototype.defaultUpdateAppearances = function () {\n    this.updateAppearances();\n  };\n  /**\n   * Update the appearance streams for each of this check box's widgets using\n   * the given appearance provider. If no `provider` is passed, the default\n   * appearance provider for check boxs will be used. For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * checkBox.updateAppearances((field, widget) => {\n   *   ...\n   *   return {\n   *     normal: { on: drawCheckBox(...), off: drawCheckBox(...) },\n   *     down: { on: drawCheckBox(...), off: drawCheckBox(...) },\n   *   }\n   * })\n   * ```\n   * @param provider Optionally, the appearance provider to be used for\n   *                 generating the contents of the appearance streams.\n   */\n  PDFCheckBox.prototype.updateAppearances = function (provider) {\n    var _a;\n    assertOrUndefined(provider, 'provider', [Function]);\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var onValue = (_a = widget.getOnValue()) !== null && _a !== void 0 ? _a : PDFName.of('Yes');\n      if (!onValue) continue;\n      this.updateWidgetAppearance(widget, onValue, provider);\n    }\n    this.markAsClean();\n  };\n  PDFCheckBox.prototype.updateWidgetAppearance = function (widget, onValue, provider) {\n    var apProvider = provider !== null && provider !== void 0 ? provider : defaultCheckBoxAppearanceProvider;\n    var appearances = normalizeAppearance(apProvider(this, widget));\n    this.updateOnOffWidgetAppearance(widget, onValue, appearances);\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFForm.getCheckBox]] method, which will create an\n   * > instance of [[PDFCheckBox]] for you.\n   *\n   * Create an instance of [[PDFCheckBox]] from an existing acroCheckBox and ref\n   *\n   * @param acroCheckBox The underlying `PDFAcroCheckBox` for this check box.\n   * @param ref The unique reference for this check box.\n   * @param doc The document to which this check box will belong.\n   */\n  PDFCheckBox.of = function (acroCheckBox, ref, doc) {\n    return new PDFCheckBox(acroCheckBox, ref, doc);\n  };\n  return PDFCheckBox;\n}(PDFField);\nexport default PDFCheckBox;","map":{"version":3,"sources":["../../../src/api/form/PDFCheckBox.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport PDFPage from \"../PDFPage\";\nimport { normalizeAppearance, defaultCheckBoxAppearanceProvider, } from \"./appearances\";\nimport { rgb } from \"../colors\";\nimport { degrees } from \"../rotations\";\nimport PDFField, { assertFieldAppearanceOptions, } from \"./PDFField\";\nimport { PDFName, PDFDict, PDFAcroCheckBox, } from \"../../core\";\nimport { assertIs, assertOrUndefined } from \"../../utils\";\n/**\n * Represents a check box field of a [[PDFForm]].\n *\n * [[PDFCheckBox]] fields are interactive boxes that users can click with their\n * mouse. This type of [[PDFField]] has two states: `on` and `off`. The purpose\n * of a check box is to enable users to select from one or more options, where\n * each option is represented by a single check box. Check boxes are typically\n * square in shape and display a check mark when they are in the `on` state.\n */\nvar PDFCheckBox = /** @class */ (function (_super) {\n    __extends(PDFCheckBox, _super);\n    function PDFCheckBox(acroCheckBox, ref, doc) {\n        var _this = _super.call(this, acroCheckBox, ref, doc) || this;\n        assertIs(acroCheckBox, 'acroCheckBox', [\n            [PDFAcroCheckBox, 'PDFAcroCheckBox'],\n        ]);\n        _this.acroField = acroCheckBox;\n        return _this;\n    }\n    /**\n     * Mark this check box. This operation is analogous to a human user clicking\n     * a check box to fill it in a PDF reader. This method will update the\n     * underlying state of the check box field to indicate it has been selected.\n     * PDF libraries and readers will be able to extract this value from the\n     * saved document and determine that it was selected.\n     *\n     * For example:\n     * ```js\n     * const checkBox = form.getCheckBox('some.checkBox.field')\n     * checkBox.check()\n     * ```\n     *\n     * This method will mark this check box as dirty, causing its appearance\n     * streams to be updated when either [[PDFDocument.save]] or\n     * [[PDFForm.updateFieldAppearances]] is called. The updated appearance\n     * streams will display a check mark inside the widgets of this check box\n     * field.\n     */\n    PDFCheckBox.prototype.check = function () {\n        var _a;\n        var onValue = (_a = this.acroField.getOnValue()) !== null && _a !== void 0 ? _a : PDFName.of('Yes');\n        this.markAsDirty();\n        this.acroField.setValue(onValue);\n    };\n    /**\n     * Clears this check box. This operation is analogous to a human user clicking\n     * a check box to unmark it in a PDF reader. This method will update the\n     * underlying state of the check box field to indicate it has been deselected.\n     * PDF libraries and readers will be able to extract this value from the\n     * saved document and determine that it was not selected.\n     *\n     * For example:\n     * ```js\n     * const checkBox = form.getCheckBox('some.checkBox.field')\n     * checkBox.uncheck()\n     * ```\n     *\n     * This method will mark this check box as dirty. See [[PDFCheckBox.check]]\n     * for more details about what this means.\n     */\n    PDFCheckBox.prototype.uncheck = function () {\n        this.markAsDirty();\n        this.acroField.setValue(PDFName.of('Off'));\n    };\n    /**\n     * Returns `true` if this check box is selected (either by a human user via\n     * a PDF reader, or else programmatically via software). For example:\n     * ```js\n     * const checkBox = form.getCheckBox('some.checkBox.field')\n     * if (checkBox.isChecked()) console.log('check box is selected')\n     * ```\n     * @returns Whether or not this check box is selected.\n     */\n    PDFCheckBox.prototype.isChecked = function () {\n        var onValue = this.acroField.getOnValue();\n        return !!onValue && onValue === this.acroField.getValue();\n    };\n    /**\n     * Show this check box on the specified page. For example:\n     * ```js\n     * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n     * const page = pdfDoc.addPage()\n     *\n     * const form = pdfDoc.getForm()\n     * const checkBox = form.createCheckBox('some.checkBox.field')\n     *\n     * checkBox.addToPage(page, {\n     *   x: 50,\n     *   y: 75,\n     *   width: 25,\n     *   height: 25,\n     *   textColor: rgb(1, 0, 0),\n     *   backgroundColor: rgb(0, 1, 0),\n     *   borderColor: rgb(0, 0, 1),\n     *   borderWidth: 2,\n     *   rotate: degrees(90),\n     * })\n     * ```\n     * This will create a new widget for this check box field.\n     * @param page The page to which this check box widget should be added.\n     * @param options The options to be used when adding this check box widget.\n     */\n    PDFCheckBox.prototype.addToPage = function (page, options) {\n        var _a, _b, _c, _d, _e, _f;\n        assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\n        assertFieldAppearanceOptions(options);\n        if (!options)\n            options = {};\n        if (!('textColor' in options))\n            options.textColor = rgb(0, 0, 0);\n        if (!('backgroundColor' in options))\n            options.backgroundColor = rgb(1, 1, 1);\n        if (!('borderColor' in options))\n            options.borderColor = rgb(0, 0, 0);\n        if (!('borderWidth' in options))\n            options.borderWidth = 1;\n        // Create a widget for this check box\n        var widget = this.createWidget({\n            x: (_a = options.x) !== null && _a !== void 0 ? _a : 0,\n            y: (_b = options.y) !== null && _b !== void 0 ? _b : 0,\n            width: (_c = options.width) !== null && _c !== void 0 ? _c : 50,\n            height: (_d = options.height) !== null && _d !== void 0 ? _d : 50,\n            textColor: options.textColor,\n            backgroundColor: options.backgroundColor,\n            borderColor: options.borderColor,\n            borderWidth: (_e = options.borderWidth) !== null && _e !== void 0 ? _e : 0,\n            rotate: (_f = options.rotate) !== null && _f !== void 0 ? _f : degrees(0),\n            hidden: options.hidden,\n            page: page.ref,\n        });\n        var widgetRef = this.doc.context.register(widget.dict);\n        // Add widget to this field\n        this.acroField.addWidget(widgetRef);\n        // Set appearance streams for widget\n        widget.setAppearanceState(PDFName.of('Off'));\n        this.updateWidgetAppearance(widget, PDFName.of('Yes'));\n        // Add widget to the given page\n        page.node.addAnnot(widgetRef);\n    };\n    /**\n     * Returns `true` if any of this check box's widgets do not have an\n     * appearance stream for its current state. For example:\n     * ```js\n     * const checkBox = form.getCheckBox('some.checkBox.field')\n     * if (checkBox.needsAppearancesUpdate()) console.log('Needs update')\n     * ```\n     * @returns Whether or not this check box needs an appearance update.\n     */\n    PDFCheckBox.prototype.needsAppearancesUpdate = function () {\n        var _a;\n        var widgets = this.acroField.getWidgets();\n        for (var idx = 0, len = widgets.length; idx < len; idx++) {\n            var widget = widgets[idx];\n            var state = widget.getAppearanceState();\n            var normal = (_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal;\n            if (!(normal instanceof PDFDict))\n                return true;\n            if (state && !normal.has(state))\n                return true;\n        }\n        return false;\n    };\n    /**\n     * Update the appearance streams for each of this check box's widgets using\n     * the default appearance provider for check boxes. For example:\n     * ```js\n     * const checkBox = form.getCheckBox('some.checkBox.field')\n     * checkBox.defaultUpdateAppearances()\n     * ```\n     */\n    PDFCheckBox.prototype.defaultUpdateAppearances = function () {\n        this.updateAppearances();\n    };\n    /**\n     * Update the appearance streams for each of this check box's widgets using\n     * the given appearance provider. If no `provider` is passed, the default\n     * appearance provider for check boxs will be used. For example:\n     * ```js\n     * const checkBox = form.getCheckBox('some.checkBox.field')\n     * checkBox.updateAppearances((field, widget) => {\n     *   ...\n     *   return {\n     *     normal: { on: drawCheckBox(...), off: drawCheckBox(...) },\n     *     down: { on: drawCheckBox(...), off: drawCheckBox(...) },\n     *   }\n     * })\n     * ```\n     * @param provider Optionally, the appearance provider to be used for\n     *                 generating the contents of the appearance streams.\n     */\n    PDFCheckBox.prototype.updateAppearances = function (provider) {\n        var _a;\n        assertOrUndefined(provider, 'provider', [Function]);\n        var widgets = this.acroField.getWidgets();\n        for (var idx = 0, len = widgets.length; idx < len; idx++) {\n            var widget = widgets[idx];\n            var onValue = (_a = widget.getOnValue()) !== null && _a !== void 0 ? _a : PDFName.of('Yes');\n            if (!onValue)\n                continue;\n            this.updateWidgetAppearance(widget, onValue, provider);\n        }\n        this.markAsClean();\n    };\n    PDFCheckBox.prototype.updateWidgetAppearance = function (widget, onValue, provider) {\n        var apProvider = provider !== null && provider !== void 0 ? provider : defaultCheckBoxAppearanceProvider;\n        var appearances = normalizeAppearance(apProvider(this, widget));\n        this.updateOnOffWidgetAppearance(widget, onValue, appearances);\n    };\n    /**\n     * > **NOTE:** You probably don't want to call this method directly. Instead,\n     * > consider using the [[PDFForm.getCheckBox]] method, which will create an\n     * > instance of [[PDFCheckBox]] for you.\n     *\n     * Create an instance of [[PDFCheckBox]] from an existing acroCheckBox and ref\n     *\n     * @param acroCheckBox The underlying `PDFAcroCheckBox` for this check box.\n     * @param ref The unique reference for this check box.\n     * @param doc The document to which this check box will belong.\n     */\n    PDFCheckBox.of = function (acroCheckBox, ref, doc) {\n        return new PDFCheckBox(acroCheckBox, ref, doc);\n    };\n    return PDFCheckBox;\n}(PDFField));\nexport default PDFCheckBox;\n//# sourceMappingURL=PDFCheckBox.js.map"]},"metadata":{},"sourceType":"module"}