{"ast":null,"code":"import PDFObject from \"../objects/PDFObject\";\nimport CharCodes from \"../syntax/CharCodes\";\nimport { copyStringIntoBuffer } from \"../../utils\";\nvar PDFOperator = /** @class */function () {\n  function PDFOperator(name, args) {\n    this.name = name;\n    this.args = args || [];\n  }\n  PDFOperator.prototype.clone = function (context) {\n    var args = new Array(this.args.length);\n    for (var idx = 0, len = args.length; idx < len; idx++) {\n      var arg = this.args[idx];\n      args[idx] = arg instanceof PDFObject ? arg.clone(context) : arg;\n    }\n    return PDFOperator.of(this.name, args);\n  };\n  PDFOperator.prototype.toString = function () {\n    var value = '';\n    for (var idx = 0, len = this.args.length; idx < len; idx++) {\n      value += String(this.args[idx]) + ' ';\n    }\n    value += this.name;\n    return value;\n  };\n  PDFOperator.prototype.sizeInBytes = function () {\n    var size = 0;\n    for (var idx = 0, len = this.args.length; idx < len; idx++) {\n      var arg = this.args[idx];\n      size += (arg instanceof PDFObject ? arg.sizeInBytes() : arg.length) + 1;\n    }\n    size += this.name.length;\n    return size;\n  };\n  PDFOperator.prototype.copyBytesInto = function (buffer, offset) {\n    var initialOffset = offset;\n    for (var idx = 0, len = this.args.length; idx < len; idx++) {\n      var arg = this.args[idx];\n      if (arg instanceof PDFObject) {\n        offset += arg.copyBytesInto(buffer, offset);\n      } else {\n        offset += copyStringIntoBuffer(arg, buffer, offset);\n      }\n      buffer[offset++] = CharCodes.Space;\n    }\n    offset += copyStringIntoBuffer(this.name, buffer, offset);\n    return offset - initialOffset;\n  };\n  PDFOperator.of = function (name, args) {\n    return new PDFOperator(name, args);\n  };\n  return PDFOperator;\n}();\nexport default PDFOperator;","map":{"version":3,"sources":["../../../src/core/operators/PDFOperator.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import PDFObject from \"../objects/PDFObject\";\nimport CharCodes from \"../syntax/CharCodes\";\nimport { copyStringIntoBuffer } from \"../../utils\";\nvar PDFOperator = /** @class */ (function () {\n    function PDFOperator(name, args) {\n        this.name = name;\n        this.args = args || [];\n    }\n    PDFOperator.prototype.clone = function (context) {\n        var args = new Array(this.args.length);\n        for (var idx = 0, len = args.length; idx < len; idx++) {\n            var arg = this.args[idx];\n            args[idx] = arg instanceof PDFObject ? arg.clone(context) : arg;\n        }\n        return PDFOperator.of(this.name, args);\n    };\n    PDFOperator.prototype.toString = function () {\n        var value = '';\n        for (var idx = 0, len = this.args.length; idx < len; idx++) {\n            value += String(this.args[idx]) + ' ';\n        }\n        value += this.name;\n        return value;\n    };\n    PDFOperator.prototype.sizeInBytes = function () {\n        var size = 0;\n        for (var idx = 0, len = this.args.length; idx < len; idx++) {\n            var arg = this.args[idx];\n            size += (arg instanceof PDFObject ? arg.sizeInBytes() : arg.length) + 1;\n        }\n        size += this.name.length;\n        return size;\n    };\n    PDFOperator.prototype.copyBytesInto = function (buffer, offset) {\n        var initialOffset = offset;\n        for (var idx = 0, len = this.args.length; idx < len; idx++) {\n            var arg = this.args[idx];\n            if (arg instanceof PDFObject) {\n                offset += arg.copyBytesInto(buffer, offset);\n            }\n            else {\n                offset += copyStringIntoBuffer(arg, buffer, offset);\n            }\n            buffer[offset++] = CharCodes.Space;\n        }\n        offset += copyStringIntoBuffer(this.name, buffer, offset);\n        return offset - initialOffset;\n    };\n    PDFOperator.of = function (name, args) {\n        return new PDFOperator(name, args);\n    };\n    return PDFOperator;\n}());\nexport default PDFOperator;\n//# sourceMappingURL=PDFOperator.js.map"]},"metadata":{},"sourceType":"module"}