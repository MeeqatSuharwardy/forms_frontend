{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport { drawCheckBox, rotateInPlace, drawRadioButton, drawButton, drawTextField, drawOptionList } from \"../operations\";\nimport { rgb, componentsToColor, setFillingColor, grayscale, cmyk } from \"../colors\";\nimport { reduceRotation, adjustDimsForRotation } from \"../rotations\";\nimport { layoutMultilineText, layoutCombedText, layoutSinglelineText } from \"../text/layout\";\nimport { TextAlignment } from \"../text/alignment\";\nimport { setFontAndSize } from \"../operators\";\nimport { findLastMatch } from \"../../utils\";\n/********************* Appearance Provider Functions **************************/\nexport var normalizeAppearance = function (appearance) {\n  if ('normal' in appearance) return appearance;\n  return {\n    normal: appearance\n  };\n};\n// Examples:\n//   `/Helv 12 Tf` -> ['/Helv 12 Tf', 'Helv', '12']\n//   `/HeBo 8.00 Tf` -> ['/HeBo 8 Tf', 'HeBo', '8.00']\nvar tfRegex = /\\/([^\\0\\t\\n\\f\\r\\ ]+)[\\0\\t\\n\\f\\r\\ ]+(\\d*\\.\\d+|\\d+)[\\0\\t\\n\\f\\r\\ ]+Tf/;\nvar getDefaultFontSize = function (field) {\n  var _a, _b;\n  var da = (_a = field.getDefaultAppearance()) !== null && _a !== void 0 ? _a : '';\n  var daMatch = (_b = findLastMatch(da, tfRegex).match) !== null && _b !== void 0 ? _b : [];\n  var defaultFontSize = Number(daMatch[2]);\n  return isFinite(defaultFontSize) ? defaultFontSize : undefined;\n};\n// Examples:\n//   `0.3 g` -> ['0.3', 'g']\n//   `0.3 1 .3 rg` -> ['0.3', '1', '.3', 'rg']\n//   `0.3 1 .3 0 k` -> ['0.3', '1', '.3', '0', 'k']\nvar colorRegex = /(\\d*\\.\\d+|\\d+)[\\0\\t\\n\\f\\r\\ ]*(\\d*\\.\\d+|\\d+)?[\\0\\t\\n\\f\\r\\ ]*(\\d*\\.\\d+|\\d+)?[\\0\\t\\n\\f\\r\\ ]*(\\d*\\.\\d+|\\d+)?[\\0\\t\\n\\f\\r\\ ]+(g|rg|k)/;\nvar getDefaultColor = function (field) {\n  var _a;\n  var da = (_a = field.getDefaultAppearance()) !== null && _a !== void 0 ? _a : '';\n  var daMatch = findLastMatch(da, colorRegex).match;\n  var _b = daMatch !== null && daMatch !== void 0 ? daMatch : [],\n    c1 = _b[1],\n    c2 = _b[2],\n    c3 = _b[3],\n    c4 = _b[4],\n    colorSpace = _b[5];\n  if (colorSpace === 'g' && c1) {\n    return grayscale(Number(c1));\n  }\n  if (colorSpace === 'rg' && c1 && c2 && c3) {\n    return rgb(Number(c1), Number(c2), Number(c3));\n  }\n  if (colorSpace === 'k' && c1 && c2 && c3 && c4) {\n    return cmyk(Number(c1), Number(c2), Number(c3), Number(c4));\n  }\n  return undefined;\n};\nvar updateDefaultAppearance = function (field, color, font, fontSize) {\n  var _a;\n  if (fontSize === void 0) {\n    fontSize = 0;\n  }\n  var da = [setFillingColor(color).toString(), setFontAndSize((_a = font === null || font === void 0 ? void 0 : font.name) !== null && _a !== void 0 ? _a : 'dummy__noop', fontSize).toString()].join('\\n');\n  field.setDefaultAppearance(da);\n};\nexport var defaultCheckBoxAppearanceProvider = function (checkBox, widget) {\n  var _a, _b, _c;\n  // The `/DA` entry can be at the widget or field level - so we handle both\n  var widgetColor = getDefaultColor(widget);\n  var fieldColor = getDefaultColor(checkBox.acroField);\n  var rectangle = widget.getRectangle();\n  var ap = widget.getAppearanceCharacteristics();\n  var bs = widget.getBorderStyle();\n  var borderWidth = (_a = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _a !== void 0 ? _a : 0;\n  var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n  var _d = adjustDimsForRotation(rectangle, rotation),\n    width = _d.width,\n    height = _d.height;\n  var rotate = rotateInPlace(__assign(__assign({}, rectangle), {\n    rotation: rotation\n  }));\n  var black = rgb(0, 0, 0);\n  var borderColor = (_b = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor())) !== null && _b !== void 0 ? _b : black;\n  var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n  var downBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor(), 0.8);\n  // Update color\n  var textColor = (_c = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _c !== void 0 ? _c : black;\n  if (widgetColor) {\n    updateDefaultAppearance(widget, textColor);\n  } else {\n    updateDefaultAppearance(checkBox.acroField, textColor);\n  }\n  var options = {\n    x: 0 + borderWidth / 2,\n    y: 0 + borderWidth / 2,\n    width: width - borderWidth,\n    height: height - borderWidth,\n    thickness: 1.5,\n    borderWidth: borderWidth,\n    borderColor: borderColor,\n    markColor: textColor\n  };\n  return {\n    normal: {\n      on: __spreadArrays(rotate, drawCheckBox(__assign(__assign({}, options), {\n        color: normalBackgroundColor,\n        filled: true\n      }))),\n      off: __spreadArrays(rotate, drawCheckBox(__assign(__assign({}, options), {\n        color: normalBackgroundColor,\n        filled: false\n      })))\n    },\n    down: {\n      on: __spreadArrays(rotate, drawCheckBox(__assign(__assign({}, options), {\n        color: downBackgroundColor,\n        filled: true\n      }))),\n      off: __spreadArrays(rotate, drawCheckBox(__assign(__assign({}, options), {\n        color: downBackgroundColor,\n        filled: false\n      })))\n    }\n  };\n};\nexport var defaultRadioGroupAppearanceProvider = function (radioGroup, widget) {\n  var _a, _b, _c;\n  // The `/DA` entry can be at the widget or field level - so we handle both\n  var widgetColor = getDefaultColor(widget);\n  var fieldColor = getDefaultColor(radioGroup.acroField);\n  var rectangle = widget.getRectangle();\n  var ap = widget.getAppearanceCharacteristics();\n  var bs = widget.getBorderStyle();\n  var borderWidth = (_a = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _a !== void 0 ? _a : 0;\n  var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n  var _d = adjustDimsForRotation(rectangle, rotation),\n    width = _d.width,\n    height = _d.height;\n  var rotate = rotateInPlace(__assign(__assign({}, rectangle), {\n    rotation: rotation\n  }));\n  var black = rgb(0, 0, 0);\n  var borderColor = (_b = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor())) !== null && _b !== void 0 ? _b : black;\n  var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n  var downBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor(), 0.8);\n  // Update color\n  var textColor = (_c = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _c !== void 0 ? _c : black;\n  if (widgetColor) {\n    updateDefaultAppearance(widget, textColor);\n  } else {\n    updateDefaultAppearance(radioGroup.acroField, textColor);\n  }\n  var options = {\n    x: width / 2,\n    y: height / 2,\n    width: width - borderWidth,\n    height: height - borderWidth,\n    borderWidth: borderWidth,\n    borderColor: borderColor,\n    dotColor: textColor\n  };\n  return {\n    normal: {\n      on: __spreadArrays(rotate, drawRadioButton(__assign(__assign({}, options), {\n        color: normalBackgroundColor,\n        filled: true\n      }))),\n      off: __spreadArrays(rotate, drawRadioButton(__assign(__assign({}, options), {\n        color: normalBackgroundColor,\n        filled: false\n      })))\n    },\n    down: {\n      on: __spreadArrays(rotate, drawRadioButton(__assign(__assign({}, options), {\n        color: downBackgroundColor,\n        filled: true\n      }))),\n      off: __spreadArrays(rotate, drawRadioButton(__assign(__assign({}, options), {\n        color: downBackgroundColor,\n        filled: false\n      })))\n    }\n  };\n};\nexport var defaultButtonAppearanceProvider = function (button, widget, font) {\n  var _a, _b, _c, _d, _e;\n  // The `/DA` entry can be at the widget or field level - so we handle both\n  var widgetColor = getDefaultColor(widget);\n  var fieldColor = getDefaultColor(button.acroField);\n  var widgetFontSize = getDefaultFontSize(widget);\n  var fieldFontSize = getDefaultFontSize(button.acroField);\n  var rectangle = widget.getRectangle();\n  var ap = widget.getAppearanceCharacteristics();\n  var bs = widget.getBorderStyle();\n  var captions = ap === null || ap === void 0 ? void 0 : ap.getCaptions();\n  var normalText = (_a = captions === null || captions === void 0 ? void 0 : captions.normal) !== null && _a !== void 0 ? _a : '';\n  var downText = (_c = (_b = captions === null || captions === void 0 ? void 0 : captions.down) !== null && _b !== void 0 ? _b : normalText) !== null && _c !== void 0 ? _c : '';\n  var borderWidth = (_d = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _d !== void 0 ? _d : 0;\n  var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n  var _f = adjustDimsForRotation(rectangle, rotation),\n    width = _f.width,\n    height = _f.height;\n  var rotate = rotateInPlace(__assign(__assign({}, rectangle), {\n    rotation: rotation\n  }));\n  var black = rgb(0, 0, 0);\n  var borderColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor());\n  var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n  var downBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor(), 0.8);\n  var bounds = {\n    x: borderWidth,\n    y: borderWidth,\n    width: width - borderWidth * 2,\n    height: height - borderWidth * 2\n  };\n  var normalLayout = layoutSinglelineText(normalText, {\n    alignment: TextAlignment.Center,\n    fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n    font: font,\n    bounds: bounds\n  });\n  var downLayout = layoutSinglelineText(downText, {\n    alignment: TextAlignment.Center,\n    fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n    font: font,\n    bounds: bounds\n  });\n  // Update font size and color\n  var fontSize = Math.min(normalLayout.fontSize, downLayout.fontSize);\n  var textColor = (_e = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _e !== void 0 ? _e : black;\n  if (widgetColor || widgetFontSize !== undefined) {\n    updateDefaultAppearance(widget, textColor, font, fontSize);\n  } else {\n    updateDefaultAppearance(button.acroField, textColor, font, fontSize);\n  }\n  var options = {\n    x: 0 + borderWidth / 2,\n    y: 0 + borderWidth / 2,\n    width: width - borderWidth,\n    height: height - borderWidth,\n    borderWidth: borderWidth,\n    borderColor: borderColor,\n    textColor: textColor,\n    font: font.name,\n    fontSize: fontSize\n  };\n  return {\n    normal: __spreadArrays(rotate, drawButton(__assign(__assign({}, options), {\n      color: normalBackgroundColor,\n      textLines: [normalLayout.line]\n    }))),\n    down: __spreadArrays(rotate, drawButton(__assign(__assign({}, options), {\n      color: downBackgroundColor,\n      textLines: [downLayout.line]\n    })))\n  };\n};\nexport var defaultTextFieldAppearanceProvider = function (textField, widget, font) {\n  var _a, _b, _c, _d;\n  // The `/DA` entry can be at the widget or field level - so we handle both\n  var widgetColor = getDefaultColor(widget);\n  var fieldColor = getDefaultColor(textField.acroField);\n  var widgetFontSize = getDefaultFontSize(widget);\n  var fieldFontSize = getDefaultFontSize(textField.acroField);\n  var rectangle = widget.getRectangle();\n  var ap = widget.getAppearanceCharacteristics();\n  var bs = widget.getBorderStyle();\n  var text = (_a = textField.getText()) !== null && _a !== void 0 ? _a : '';\n  var borderWidth = (_b = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _b !== void 0 ? _b : 0;\n  var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n  var _e = adjustDimsForRotation(rectangle, rotation),\n    width = _e.width,\n    height = _e.height;\n  var rotate = rotateInPlace(__assign(__assign({}, rectangle), {\n    rotation: rotation\n  }));\n  var black = rgb(0, 0, 0);\n  var borderColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor());\n  var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n  var textLines;\n  var fontSize;\n  var padding = textField.isCombed() ? 0 : 1;\n  var bounds = {\n    x: borderWidth + padding,\n    y: borderWidth + padding,\n    width: width - (borderWidth + padding) * 2,\n    height: height - (borderWidth + padding) * 2\n  };\n  if (textField.isMultiline()) {\n    var layout = layoutMultilineText(text, {\n      alignment: textField.getAlignment(),\n      fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n      font: font,\n      bounds: bounds\n    });\n    textLines = layout.lines;\n    fontSize = layout.fontSize;\n  } else if (textField.isCombed()) {\n    var layout = layoutCombedText(text, {\n      fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n      font: font,\n      bounds: bounds,\n      cellCount: (_c = textField.getMaxLength()) !== null && _c !== void 0 ? _c : 0\n    });\n    textLines = layout.cells;\n    fontSize = layout.fontSize;\n  } else {\n    var layout = layoutSinglelineText(text, {\n      alignment: textField.getAlignment(),\n      fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n      font: font,\n      bounds: bounds\n    });\n    textLines = [layout.line];\n    fontSize = layout.fontSize;\n  }\n  // Update font size and color\n  var textColor = (_d = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _d !== void 0 ? _d : black;\n  if (widgetColor || widgetFontSize !== undefined) {\n    updateDefaultAppearance(widget, textColor, font, fontSize);\n  } else {\n    updateDefaultAppearance(textField.acroField, textColor, font, fontSize);\n  }\n  var options = {\n    x: 0 + borderWidth / 2,\n    y: 0 + borderWidth / 2,\n    width: width - borderWidth,\n    height: height - borderWidth,\n    borderWidth: borderWidth !== null && borderWidth !== void 0 ? borderWidth : 0,\n    borderColor: borderColor,\n    textColor: textColor,\n    font: font.name,\n    fontSize: fontSize,\n    color: normalBackgroundColor,\n    textLines: textLines,\n    padding: padding\n  };\n  return __spreadArrays(rotate, drawTextField(options));\n};\nexport var defaultDropdownAppearanceProvider = function (dropdown, widget, font) {\n  var _a, _b, _c;\n  // The `/DA` entry can be at the widget or field level - so we handle both\n  var widgetColor = getDefaultColor(widget);\n  var fieldColor = getDefaultColor(dropdown.acroField);\n  var widgetFontSize = getDefaultFontSize(widget);\n  var fieldFontSize = getDefaultFontSize(dropdown.acroField);\n  var rectangle = widget.getRectangle();\n  var ap = widget.getAppearanceCharacteristics();\n  var bs = widget.getBorderStyle();\n  var text = (_a = dropdown.getSelected()[0]) !== null && _a !== void 0 ? _a : '';\n  var borderWidth = (_b = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _b !== void 0 ? _b : 0;\n  var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n  var _d = adjustDimsForRotation(rectangle, rotation),\n    width = _d.width,\n    height = _d.height;\n  var rotate = rotateInPlace(__assign(__assign({}, rectangle), {\n    rotation: rotation\n  }));\n  var black = rgb(0, 0, 0);\n  var borderColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor());\n  var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n  var padding = 1;\n  var bounds = {\n    x: borderWidth + padding,\n    y: borderWidth + padding,\n    width: width - (borderWidth + padding) * 2,\n    height: height - (borderWidth + padding) * 2\n  };\n  var _e = layoutSinglelineText(text, {\n      alignment: TextAlignment.Left,\n      fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n      font: font,\n      bounds: bounds\n    }),\n    line = _e.line,\n    fontSize = _e.fontSize;\n  // Update font size and color\n  var textColor = (_c = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _c !== void 0 ? _c : black;\n  if (widgetColor || widgetFontSize !== undefined) {\n    updateDefaultAppearance(widget, textColor, font, fontSize);\n  } else {\n    updateDefaultAppearance(dropdown.acroField, textColor, font, fontSize);\n  }\n  var options = {\n    x: 0 + borderWidth / 2,\n    y: 0 + borderWidth / 2,\n    width: width - borderWidth,\n    height: height - borderWidth,\n    borderWidth: borderWidth !== null && borderWidth !== void 0 ? borderWidth : 0,\n    borderColor: borderColor,\n    textColor: textColor,\n    font: font.name,\n    fontSize: fontSize,\n    color: normalBackgroundColor,\n    textLines: [line],\n    padding: padding\n  };\n  return __spreadArrays(rotate, drawTextField(options));\n};\nexport var defaultOptionListAppearanceProvider = function (optionList, widget, font) {\n  var _a, _b;\n  // The `/DA` entry can be at the widget or field level - so we handle both\n  var widgetColor = getDefaultColor(widget);\n  var fieldColor = getDefaultColor(optionList.acroField);\n  var widgetFontSize = getDefaultFontSize(widget);\n  var fieldFontSize = getDefaultFontSize(optionList.acroField);\n  var rectangle = widget.getRectangle();\n  var ap = widget.getAppearanceCharacteristics();\n  var bs = widget.getBorderStyle();\n  var borderWidth = (_a = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _a !== void 0 ? _a : 0;\n  var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n  var _c = adjustDimsForRotation(rectangle, rotation),\n    width = _c.width,\n    height = _c.height;\n  var rotate = rotateInPlace(__assign(__assign({}, rectangle), {\n    rotation: rotation\n  }));\n  var black = rgb(0, 0, 0);\n  var borderColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor());\n  var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n  var options = optionList.getOptions();\n  var selected = optionList.getSelected();\n  if (optionList.isSorted()) options.sort();\n  var text = '';\n  for (var idx = 0, len = options.length; idx < len; idx++) {\n    text += options[idx];\n    if (idx < len - 1) text += '\\n';\n  }\n  var padding = 1;\n  var bounds = {\n    x: borderWidth + padding,\n    y: borderWidth + padding,\n    width: width - (borderWidth + padding) * 2,\n    height: height - (borderWidth + padding) * 2\n  };\n  var _d = layoutMultilineText(text, {\n      alignment: TextAlignment.Left,\n      fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n      font: font,\n      bounds: bounds\n    }),\n    lines = _d.lines,\n    fontSize = _d.fontSize,\n    lineHeight = _d.lineHeight;\n  var selectedLines = [];\n  for (var idx = 0, len = lines.length; idx < len; idx++) {\n    var line = lines[idx];\n    if (selected.includes(line.text)) selectedLines.push(idx);\n  }\n  var blue = rgb(153 / 255, 193 / 255, 218 / 255);\n  // Update font size and color\n  var textColor = (_b = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _b !== void 0 ? _b : black;\n  if (widgetColor || widgetFontSize !== undefined) {\n    updateDefaultAppearance(widget, textColor, font, fontSize);\n  } else {\n    updateDefaultAppearance(optionList.acroField, textColor, font, fontSize);\n  }\n  return __spreadArrays(rotate, drawOptionList({\n    x: 0 + borderWidth / 2,\n    y: 0 + borderWidth / 2,\n    width: width - borderWidth,\n    height: height - borderWidth,\n    borderWidth: borderWidth !== null && borderWidth !== void 0 ? borderWidth : 0,\n    borderColor: borderColor,\n    textColor: textColor,\n    font: font.name,\n    fontSize: fontSize,\n    color: normalBackgroundColor,\n    textLines: lines,\n    lineHeight: lineHeight,\n    selectedColor: blue,\n    selectedLines: selectedLines,\n    padding: padding\n  }));\n};","map":{"version":3,"sources":["../../../src/api/form/appearances.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __spreadArrays } from \"tslib\";\nimport { drawCheckBox, rotateInPlace, drawRadioButton, drawButton, drawTextField, drawOptionList, } from \"../operations\";\nimport { rgb, componentsToColor, setFillingColor, grayscale, cmyk, } from \"../colors\";\nimport { reduceRotation, adjustDimsForRotation } from \"../rotations\";\nimport { layoutMultilineText, layoutCombedText, layoutSinglelineText, } from \"../text/layout\";\nimport { TextAlignment } from \"../text/alignment\";\nimport { setFontAndSize } from \"../operators\";\nimport { findLastMatch } from \"../../utils\";\n/********************* Appearance Provider Functions **************************/\nexport var normalizeAppearance = function (appearance) {\n    if ('normal' in appearance)\n        return appearance;\n    return { normal: appearance };\n};\n// Examples:\n//   `/Helv 12 Tf` -> ['/Helv 12 Tf', 'Helv', '12']\n//   `/HeBo 8.00 Tf` -> ['/HeBo 8 Tf', 'HeBo', '8.00']\nvar tfRegex = /\\/([^\\0\\t\\n\\f\\r\\ ]+)[\\0\\t\\n\\f\\r\\ ]+(\\d*\\.\\d+|\\d+)[\\0\\t\\n\\f\\r\\ ]+Tf/;\nvar getDefaultFontSize = function (field) {\n    var _a, _b;\n    var da = (_a = field.getDefaultAppearance()) !== null && _a !== void 0 ? _a : '';\n    var daMatch = (_b = findLastMatch(da, tfRegex).match) !== null && _b !== void 0 ? _b : [];\n    var defaultFontSize = Number(daMatch[2]);\n    return isFinite(defaultFontSize) ? defaultFontSize : undefined;\n};\n// Examples:\n//   `0.3 g` -> ['0.3', 'g']\n//   `0.3 1 .3 rg` -> ['0.3', '1', '.3', 'rg']\n//   `0.3 1 .3 0 k` -> ['0.3', '1', '.3', '0', 'k']\nvar colorRegex = /(\\d*\\.\\d+|\\d+)[\\0\\t\\n\\f\\r\\ ]*(\\d*\\.\\d+|\\d+)?[\\0\\t\\n\\f\\r\\ ]*(\\d*\\.\\d+|\\d+)?[\\0\\t\\n\\f\\r\\ ]*(\\d*\\.\\d+|\\d+)?[\\0\\t\\n\\f\\r\\ ]+(g|rg|k)/;\nvar getDefaultColor = function (field) {\n    var _a;\n    var da = (_a = field.getDefaultAppearance()) !== null && _a !== void 0 ? _a : '';\n    var daMatch = findLastMatch(da, colorRegex).match;\n    var _b = daMatch !== null && daMatch !== void 0 ? daMatch : [], c1 = _b[1], c2 = _b[2], c3 = _b[3], c4 = _b[4], colorSpace = _b[5];\n    if (colorSpace === 'g' && c1) {\n        return grayscale(Number(c1));\n    }\n    if (colorSpace === 'rg' && c1 && c2 && c3) {\n        return rgb(Number(c1), Number(c2), Number(c3));\n    }\n    if (colorSpace === 'k' && c1 && c2 && c3 && c4) {\n        return cmyk(Number(c1), Number(c2), Number(c3), Number(c4));\n    }\n    return undefined;\n};\nvar updateDefaultAppearance = function (field, color, font, fontSize) {\n    var _a;\n    if (fontSize === void 0) { fontSize = 0; }\n    var da = [\n        setFillingColor(color).toString(),\n        setFontAndSize((_a = font === null || font === void 0 ? void 0 : font.name) !== null && _a !== void 0 ? _a : 'dummy__noop', fontSize).toString(),\n    ].join('\\n');\n    field.setDefaultAppearance(da);\n};\nexport var defaultCheckBoxAppearanceProvider = function (checkBox, widget) {\n    var _a, _b, _c;\n    // The `/DA` entry can be at the widget or field level - so we handle both\n    var widgetColor = getDefaultColor(widget);\n    var fieldColor = getDefaultColor(checkBox.acroField);\n    var rectangle = widget.getRectangle();\n    var ap = widget.getAppearanceCharacteristics();\n    var bs = widget.getBorderStyle();\n    var borderWidth = (_a = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _a !== void 0 ? _a : 0;\n    var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n    var _d = adjustDimsForRotation(rectangle, rotation), width = _d.width, height = _d.height;\n    var rotate = rotateInPlace(__assign(__assign({}, rectangle), { rotation: rotation }));\n    var black = rgb(0, 0, 0);\n    var borderColor = (_b = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor())) !== null && _b !== void 0 ? _b : black;\n    var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n    var downBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor(), 0.8);\n    // Update color\n    var textColor = (_c = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _c !== void 0 ? _c : black;\n    if (widgetColor) {\n        updateDefaultAppearance(widget, textColor);\n    }\n    else {\n        updateDefaultAppearance(checkBox.acroField, textColor);\n    }\n    var options = {\n        x: 0 + borderWidth / 2,\n        y: 0 + borderWidth / 2,\n        width: width - borderWidth,\n        height: height - borderWidth,\n        thickness: 1.5,\n        borderWidth: borderWidth,\n        borderColor: borderColor,\n        markColor: textColor,\n    };\n    return {\n        normal: {\n            on: __spreadArrays(rotate, drawCheckBox(__assign(__assign({}, options), { color: normalBackgroundColor, filled: true }))),\n            off: __spreadArrays(rotate, drawCheckBox(__assign(__assign({}, options), { color: normalBackgroundColor, filled: false }))),\n        },\n        down: {\n            on: __spreadArrays(rotate, drawCheckBox(__assign(__assign({}, options), { color: downBackgroundColor, filled: true }))),\n            off: __spreadArrays(rotate, drawCheckBox(__assign(__assign({}, options), { color: downBackgroundColor, filled: false }))),\n        },\n    };\n};\nexport var defaultRadioGroupAppearanceProvider = function (radioGroup, widget) {\n    var _a, _b, _c;\n    // The `/DA` entry can be at the widget or field level - so we handle both\n    var widgetColor = getDefaultColor(widget);\n    var fieldColor = getDefaultColor(radioGroup.acroField);\n    var rectangle = widget.getRectangle();\n    var ap = widget.getAppearanceCharacteristics();\n    var bs = widget.getBorderStyle();\n    var borderWidth = (_a = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _a !== void 0 ? _a : 0;\n    var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n    var _d = adjustDimsForRotation(rectangle, rotation), width = _d.width, height = _d.height;\n    var rotate = rotateInPlace(__assign(__assign({}, rectangle), { rotation: rotation }));\n    var black = rgb(0, 0, 0);\n    var borderColor = (_b = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor())) !== null && _b !== void 0 ? _b : black;\n    var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n    var downBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor(), 0.8);\n    // Update color\n    var textColor = (_c = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _c !== void 0 ? _c : black;\n    if (widgetColor) {\n        updateDefaultAppearance(widget, textColor);\n    }\n    else {\n        updateDefaultAppearance(radioGroup.acroField, textColor);\n    }\n    var options = {\n        x: width / 2,\n        y: height / 2,\n        width: width - borderWidth,\n        height: height - borderWidth,\n        borderWidth: borderWidth,\n        borderColor: borderColor,\n        dotColor: textColor,\n    };\n    return {\n        normal: {\n            on: __spreadArrays(rotate, drawRadioButton(__assign(__assign({}, options), { color: normalBackgroundColor, filled: true }))),\n            off: __spreadArrays(rotate, drawRadioButton(__assign(__assign({}, options), { color: normalBackgroundColor, filled: false }))),\n        },\n        down: {\n            on: __spreadArrays(rotate, drawRadioButton(__assign(__assign({}, options), { color: downBackgroundColor, filled: true }))),\n            off: __spreadArrays(rotate, drawRadioButton(__assign(__assign({}, options), { color: downBackgroundColor, filled: false }))),\n        },\n    };\n};\nexport var defaultButtonAppearanceProvider = function (button, widget, font) {\n    var _a, _b, _c, _d, _e;\n    // The `/DA` entry can be at the widget or field level - so we handle both\n    var widgetColor = getDefaultColor(widget);\n    var fieldColor = getDefaultColor(button.acroField);\n    var widgetFontSize = getDefaultFontSize(widget);\n    var fieldFontSize = getDefaultFontSize(button.acroField);\n    var rectangle = widget.getRectangle();\n    var ap = widget.getAppearanceCharacteristics();\n    var bs = widget.getBorderStyle();\n    var captions = ap === null || ap === void 0 ? void 0 : ap.getCaptions();\n    var normalText = (_a = captions === null || captions === void 0 ? void 0 : captions.normal) !== null && _a !== void 0 ? _a : '';\n    var downText = (_c = (_b = captions === null || captions === void 0 ? void 0 : captions.down) !== null && _b !== void 0 ? _b : normalText) !== null && _c !== void 0 ? _c : '';\n    var borderWidth = (_d = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _d !== void 0 ? _d : 0;\n    var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n    var _f = adjustDimsForRotation(rectangle, rotation), width = _f.width, height = _f.height;\n    var rotate = rotateInPlace(__assign(__assign({}, rectangle), { rotation: rotation }));\n    var black = rgb(0, 0, 0);\n    var borderColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor());\n    var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n    var downBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor(), 0.8);\n    var bounds = {\n        x: borderWidth,\n        y: borderWidth,\n        width: width - borderWidth * 2,\n        height: height - borderWidth * 2,\n    };\n    var normalLayout = layoutSinglelineText(normalText, {\n        alignment: TextAlignment.Center,\n        fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n        font: font,\n        bounds: bounds,\n    });\n    var downLayout = layoutSinglelineText(downText, {\n        alignment: TextAlignment.Center,\n        fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n        font: font,\n        bounds: bounds,\n    });\n    // Update font size and color\n    var fontSize = Math.min(normalLayout.fontSize, downLayout.fontSize);\n    var textColor = (_e = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _e !== void 0 ? _e : black;\n    if (widgetColor || widgetFontSize !== undefined) {\n        updateDefaultAppearance(widget, textColor, font, fontSize);\n    }\n    else {\n        updateDefaultAppearance(button.acroField, textColor, font, fontSize);\n    }\n    var options = {\n        x: 0 + borderWidth / 2,\n        y: 0 + borderWidth / 2,\n        width: width - borderWidth,\n        height: height - borderWidth,\n        borderWidth: borderWidth,\n        borderColor: borderColor,\n        textColor: textColor,\n        font: font.name,\n        fontSize: fontSize,\n    };\n    return {\n        normal: __spreadArrays(rotate, drawButton(__assign(__assign({}, options), { color: normalBackgroundColor, textLines: [normalLayout.line] }))),\n        down: __spreadArrays(rotate, drawButton(__assign(__assign({}, options), { color: downBackgroundColor, textLines: [downLayout.line] }))),\n    };\n};\nexport var defaultTextFieldAppearanceProvider = function (textField, widget, font) {\n    var _a, _b, _c, _d;\n    // The `/DA` entry can be at the widget or field level - so we handle both\n    var widgetColor = getDefaultColor(widget);\n    var fieldColor = getDefaultColor(textField.acroField);\n    var widgetFontSize = getDefaultFontSize(widget);\n    var fieldFontSize = getDefaultFontSize(textField.acroField);\n    var rectangle = widget.getRectangle();\n    var ap = widget.getAppearanceCharacteristics();\n    var bs = widget.getBorderStyle();\n    var text = (_a = textField.getText()) !== null && _a !== void 0 ? _a : '';\n    var borderWidth = (_b = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _b !== void 0 ? _b : 0;\n    var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n    var _e = adjustDimsForRotation(rectangle, rotation), width = _e.width, height = _e.height;\n    var rotate = rotateInPlace(__assign(__assign({}, rectangle), { rotation: rotation }));\n    var black = rgb(0, 0, 0);\n    var borderColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor());\n    var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n    var textLines;\n    var fontSize;\n    var padding = textField.isCombed() ? 0 : 1;\n    var bounds = {\n        x: borderWidth + padding,\n        y: borderWidth + padding,\n        width: width - (borderWidth + padding) * 2,\n        height: height - (borderWidth + padding) * 2,\n    };\n    if (textField.isMultiline()) {\n        var layout = layoutMultilineText(text, {\n            alignment: textField.getAlignment(),\n            fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n            font: font,\n            bounds: bounds,\n        });\n        textLines = layout.lines;\n        fontSize = layout.fontSize;\n    }\n    else if (textField.isCombed()) {\n        var layout = layoutCombedText(text, {\n            fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n            font: font,\n            bounds: bounds,\n            cellCount: (_c = textField.getMaxLength()) !== null && _c !== void 0 ? _c : 0,\n        });\n        textLines = layout.cells;\n        fontSize = layout.fontSize;\n    }\n    else {\n        var layout = layoutSinglelineText(text, {\n            alignment: textField.getAlignment(),\n            fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n            font: font,\n            bounds: bounds,\n        });\n        textLines = [layout.line];\n        fontSize = layout.fontSize;\n    }\n    // Update font size and color\n    var textColor = (_d = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _d !== void 0 ? _d : black;\n    if (widgetColor || widgetFontSize !== undefined) {\n        updateDefaultAppearance(widget, textColor, font, fontSize);\n    }\n    else {\n        updateDefaultAppearance(textField.acroField, textColor, font, fontSize);\n    }\n    var options = {\n        x: 0 + borderWidth / 2,\n        y: 0 + borderWidth / 2,\n        width: width - borderWidth,\n        height: height - borderWidth,\n        borderWidth: borderWidth !== null && borderWidth !== void 0 ? borderWidth : 0,\n        borderColor: borderColor,\n        textColor: textColor,\n        font: font.name,\n        fontSize: fontSize,\n        color: normalBackgroundColor,\n        textLines: textLines,\n        padding: padding,\n    };\n    return __spreadArrays(rotate, drawTextField(options));\n};\nexport var defaultDropdownAppearanceProvider = function (dropdown, widget, font) {\n    var _a, _b, _c;\n    // The `/DA` entry can be at the widget or field level - so we handle both\n    var widgetColor = getDefaultColor(widget);\n    var fieldColor = getDefaultColor(dropdown.acroField);\n    var widgetFontSize = getDefaultFontSize(widget);\n    var fieldFontSize = getDefaultFontSize(dropdown.acroField);\n    var rectangle = widget.getRectangle();\n    var ap = widget.getAppearanceCharacteristics();\n    var bs = widget.getBorderStyle();\n    var text = (_a = dropdown.getSelected()[0]) !== null && _a !== void 0 ? _a : '';\n    var borderWidth = (_b = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _b !== void 0 ? _b : 0;\n    var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n    var _d = adjustDimsForRotation(rectangle, rotation), width = _d.width, height = _d.height;\n    var rotate = rotateInPlace(__assign(__assign({}, rectangle), { rotation: rotation }));\n    var black = rgb(0, 0, 0);\n    var borderColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor());\n    var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n    var padding = 1;\n    var bounds = {\n        x: borderWidth + padding,\n        y: borderWidth + padding,\n        width: width - (borderWidth + padding) * 2,\n        height: height - (borderWidth + padding) * 2,\n    };\n    var _e = layoutSinglelineText(text, {\n        alignment: TextAlignment.Left,\n        fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n        font: font,\n        bounds: bounds,\n    }), line = _e.line, fontSize = _e.fontSize;\n    // Update font size and color\n    var textColor = (_c = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _c !== void 0 ? _c : black;\n    if (widgetColor || widgetFontSize !== undefined) {\n        updateDefaultAppearance(widget, textColor, font, fontSize);\n    }\n    else {\n        updateDefaultAppearance(dropdown.acroField, textColor, font, fontSize);\n    }\n    var options = {\n        x: 0 + borderWidth / 2,\n        y: 0 + borderWidth / 2,\n        width: width - borderWidth,\n        height: height - borderWidth,\n        borderWidth: borderWidth !== null && borderWidth !== void 0 ? borderWidth : 0,\n        borderColor: borderColor,\n        textColor: textColor,\n        font: font.name,\n        fontSize: fontSize,\n        color: normalBackgroundColor,\n        textLines: [line],\n        padding: padding,\n    };\n    return __spreadArrays(rotate, drawTextField(options));\n};\nexport var defaultOptionListAppearanceProvider = function (optionList, widget, font) {\n    var _a, _b;\n    // The `/DA` entry can be at the widget or field level - so we handle both\n    var widgetColor = getDefaultColor(widget);\n    var fieldColor = getDefaultColor(optionList.acroField);\n    var widgetFontSize = getDefaultFontSize(widget);\n    var fieldFontSize = getDefaultFontSize(optionList.acroField);\n    var rectangle = widget.getRectangle();\n    var ap = widget.getAppearanceCharacteristics();\n    var bs = widget.getBorderStyle();\n    var borderWidth = (_a = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _a !== void 0 ? _a : 0;\n    var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n    var _c = adjustDimsForRotation(rectangle, rotation), width = _c.width, height = _c.height;\n    var rotate = rotateInPlace(__assign(__assign({}, rectangle), { rotation: rotation }));\n    var black = rgb(0, 0, 0);\n    var borderColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor());\n    var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n    var options = optionList.getOptions();\n    var selected = optionList.getSelected();\n    if (optionList.isSorted())\n        options.sort();\n    var text = '';\n    for (var idx = 0, len = options.length; idx < len; idx++) {\n        text += options[idx];\n        if (idx < len - 1)\n            text += '\\n';\n    }\n    var padding = 1;\n    var bounds = {\n        x: borderWidth + padding,\n        y: borderWidth + padding,\n        width: width - (borderWidth + padding) * 2,\n        height: height - (borderWidth + padding) * 2,\n    };\n    var _d = layoutMultilineText(text, {\n        alignment: TextAlignment.Left,\n        fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n        font: font,\n        bounds: bounds,\n    }), lines = _d.lines, fontSize = _d.fontSize, lineHeight = _d.lineHeight;\n    var selectedLines = [];\n    for (var idx = 0, len = lines.length; idx < len; idx++) {\n        var line = lines[idx];\n        if (selected.includes(line.text))\n            selectedLines.push(idx);\n    }\n    var blue = rgb(153 / 255, 193 / 255, 218 / 255);\n    // Update font size and color\n    var textColor = (_b = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _b !== void 0 ? _b : black;\n    if (widgetColor || widgetFontSize !== undefined) {\n        updateDefaultAppearance(widget, textColor, font, fontSize);\n    }\n    else {\n        updateDefaultAppearance(optionList.acroField, textColor, font, fontSize);\n    }\n    return __spreadArrays(rotate, drawOptionList({\n        x: 0 + borderWidth / 2,\n        y: 0 + borderWidth / 2,\n        width: width - borderWidth,\n        height: height - borderWidth,\n        borderWidth: borderWidth !== null && borderWidth !== void 0 ? borderWidth : 0,\n        borderColor: borderColor,\n        textColor: textColor,\n        font: font.name,\n        fontSize: fontSize,\n        color: normalBackgroundColor,\n        textLines: lines,\n        lineHeight: lineHeight,\n        selectedColor: blue,\n        selectedLines: selectedLines,\n        padding: padding,\n    }));\n};\n//# sourceMappingURL=appearances.js.map"]},"metadata":{},"sourceType":"module"}