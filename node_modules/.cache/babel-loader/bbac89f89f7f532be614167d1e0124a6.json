{"ast":null,"code":"import { toHexString, toHexStringOfMinLength } from \"../../utils\";\nimport { hasSurrogates, highSurrogate, isWithinBMP, lowSurrogate } from \"../../utils/unicode\";\n/** `glyphs` should be an array of unique glyphs */\nexport var createCmap = function (glyphs, glyphId) {\n  var bfChars = new Array(glyphs.length);\n  for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n    var glyph = glyphs[idx];\n    var id = cmapHexFormat(cmapHexString(glyphId(glyph)));\n    var unicode = cmapHexFormat.apply(void 0, glyph.codePoints.map(cmapCodePointFormat));\n    bfChars[idx] = [id, unicode];\n  }\n  return fillCmapTemplate(bfChars);\n};\n/* =============================== Templates ================================ */\nvar fillCmapTemplate = function (bfChars) {\n  return \"/CIDInit /ProcSet findresource begin\\n12 dict begin\\nbegincmap\\n/CIDSystemInfo <<\\n  /Registry (Adobe)\\n  /Ordering (UCS)\\n  /Supplement 0\\n>> def\\n/CMapName /Adobe-Identity-UCS def\\n/CMapType 2 def\\n1 begincodespacerange\\n<0000><ffff>\\nendcodespacerange\\n\" + bfChars.length + \" beginbfchar\\n\" + bfChars.map(function (_a) {\n    var glyphId = _a[0],\n      codePoint = _a[1];\n    return glyphId + \" \" + codePoint;\n  }).join('\\n') + \"\\nendbfchar\\nendcmap\\nCMapName currentdict /CMap defineresource pop\\nend\\nend\";\n};\n/* =============================== Utilities ================================ */\nvar cmapHexFormat = function () {\n  var values = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    values[_i] = arguments[_i];\n  }\n  return \"<\" + values.join('') + \">\";\n};\nvar cmapHexString = function (value) {\n  return toHexStringOfMinLength(value, 4);\n};\nvar cmapCodePointFormat = function (codePoint) {\n  if (isWithinBMP(codePoint)) return cmapHexString(codePoint);\n  if (hasSurrogates(codePoint)) {\n    var hs = highSurrogate(codePoint);\n    var ls = lowSurrogate(codePoint);\n    return \"\" + cmapHexString(hs) + cmapHexString(ls);\n  }\n  var hex = toHexString(codePoint);\n  var msg = \"0x\" + hex + \" is not a valid UTF-8 or UTF-16 codepoint.\";\n  throw new Error(msg);\n};","map":{"version":3,"sources":["../../../src/core/embedders/CMap.ts"],"names":[],"mappings":"AAEA,SAAS,WAAW,EAAE,sBAAsB,QAAE,aAAA;AAC9C,SACE,aAAa,EACb,aAAa,EACb,WAAW,EACX,YAAY,QACb,qBAAA;AAKD;AACA,OAAO,IAAM,UAAU,GAAG,SAAA,CAAC,MAAe,EAAE,OAA8B,EAAA;EACxE,IAAM,OAAO,GAAa,IAAI,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC;EAClD,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE;IACvD,IAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC;IACzB,IAAM,EAAE,GAAG,aAAa,CAAC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;IACvD,IAAM,OAAO,GAAG,aAAa,CAAA,KAAA,CAAA,KAAA,CAAA,EAAI,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;IAC3E,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,OAAO,CAAC;EAC7B;EAED,OAAO,gBAAgB,CAAC,OAAO,CAAC;AAClC,CAAC;AAED;AAEA,IAAM,gBAAgB,GAAG,SAAA,CAAC,OAAiB,EAAA;EAAK,OAAA,kQAAA,GAc9C,OAAO,CAAC,MAAM,GAAA,gBAAA,GACd,OAAO,CAAC,GAAG,CAAC,UAAC,EAAoB,EAAA;QAAnB,OAAO,GAAA,EAAA,CAAA,CAAA,CAAA;MAAE,SAAS,GAAA,EAAA,CAAA,CAAA,CAAA;IAAM,OAAG,OAAO,GAAA,GAAA,GAAI,SAAW;EAAzB,CAAyB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAA,+EAM5E;AArB+C,CAqB/C;AAED;AAEA,IAAM,aAAa,GAAG,SAAA,CAAA,EAAA;EAAC,IAAA,MAAA,GAAA,EAAA;OAAA,IAAA,EAAA,GAAA,CAAmB,EAAnB,EAAA,GAAA,SAAA,CAAA,MAAmB,EAAnB,EAAA,EAAmB,EAAA;IAAnB,MAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;EAAwB,OAAA,GAAA,GAAI,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,GAAA,GAAG;AAAtB,CAAsB;AAErE,IAAM,aAAa,GAAG,SAAA,CAAC,KAAa,EAAA;EAAK,OAAA,sBAAsB,CAAC,KAAK,EAAE,CAAC,CAAC;AAAhC,CAAgC;AAEzE,IAAM,mBAAmB,GAAG,SAAA,CAAC,SAAiB,EAAA;EAC5C,IAAI,WAAW,CAAC,SAAS,CAAC,EAAE,OAAO,aAAa,CAAC,SAAS,CAAC;EAE3D,IAAI,aAAa,CAAC,SAAS,CAAC,EAAE;IAC5B,IAAM,EAAE,GAAG,aAAa,CAAC,SAAS,CAAC;IACnC,IAAM,EAAE,GAAG,YAAY,CAAC,SAAS,CAAC;IAClC,OAAO,EAAA,GAAG,aAAa,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,EAAE,CAAG;EAClD;EAED,IAAM,GAAG,GAAG,WAAW,CAAC,SAAS,CAAC;EAClC,IAAM,GAAG,GAAG,IAAA,GAAK,GAAG,GAAA,4CAA4C;EAChE,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC;AACtB,CAAC","sourceRoot":"","sourcesContent":["import { toHexString, toHexStringOfMinLength } from \"../../utils\";\nimport { hasSurrogates, highSurrogate, isWithinBMP, lowSurrogate, } from \"../../utils/unicode\";\n/** `glyphs` should be an array of unique glyphs */\nexport var createCmap = function (glyphs, glyphId) {\n    var bfChars = new Array(glyphs.length);\n    for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n        var glyph = glyphs[idx];\n        var id = cmapHexFormat(cmapHexString(glyphId(glyph)));\n        var unicode = cmapHexFormat.apply(void 0, glyph.codePoints.map(cmapCodePointFormat));\n        bfChars[idx] = [id, unicode];\n    }\n    return fillCmapTemplate(bfChars);\n};\n/* =============================== Templates ================================ */\nvar fillCmapTemplate = function (bfChars) { return \"/CIDInit /ProcSet findresource begin\\n12 dict begin\\nbegincmap\\n/CIDSystemInfo <<\\n  /Registry (Adobe)\\n  /Ordering (UCS)\\n  /Supplement 0\\n>> def\\n/CMapName /Adobe-Identity-UCS def\\n/CMapType 2 def\\n1 begincodespacerange\\n<0000><ffff>\\nendcodespacerange\\n\" + bfChars.length + \" beginbfchar\\n\" + bfChars.map(function (_a) {\n    var glyphId = _a[0], codePoint = _a[1];\n    return glyphId + \" \" + codePoint;\n}).join('\\n') + \"\\nendbfchar\\nendcmap\\nCMapName currentdict /CMap defineresource pop\\nend\\nend\"; };\n/* =============================== Utilities ================================ */\nvar cmapHexFormat = function () {\n    var values = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        values[_i] = arguments[_i];\n    }\n    return \"<\" + values.join('') + \">\";\n};\nvar cmapHexString = function (value) { return toHexStringOfMinLength(value, 4); };\nvar cmapCodePointFormat = function (codePoint) {\n    if (isWithinBMP(codePoint))\n        return cmapHexString(codePoint);\n    if (hasSurrogates(codePoint)) {\n        var hs = highSurrogate(codePoint);\n        var ls = lowSurrogate(codePoint);\n        return \"\" + cmapHexString(hs) + cmapHexString(ls);\n    }\n    var hex = toHexString(codePoint);\n    var msg = \"0x\" + hex + \" is not a valid UTF-8 or UTF-16 codepoint.\";\n    throw new Error(msg);\n};\n//# sourceMappingURL=CMap.js.map"]},"metadata":{},"sourceType":"module"}