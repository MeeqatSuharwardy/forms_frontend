{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFAcroButton from \"./PDFAcroButton\";\nimport { InvalidAcroFieldValueError } from \"../errors\";\nvar PDFAcroCheckBox = /** @class */function (_super) {\n  __extends(PDFAcroCheckBox, _super);\n  function PDFAcroCheckBox() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  PDFAcroCheckBox.prototype.setValue = function (value) {\n    var _a;\n    var onValue = (_a = this.getOnValue()) !== null && _a !== void 0 ? _a : PDFName.of('Yes');\n    if (value !== onValue && value !== PDFName.of('Off')) {\n      throw new InvalidAcroFieldValueError();\n    }\n    this.dict.set(PDFName.of('V'), value);\n    var widgets = this.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var state = widget.getOnValue() === value ? value : PDFName.of('Off');\n      widget.setAppearanceState(state);\n    }\n  };\n  PDFAcroCheckBox.prototype.getValue = function () {\n    var v = this.V();\n    if (v instanceof PDFName) return v;\n    return PDFName.of('Off');\n  };\n  PDFAcroCheckBox.prototype.getOnValue = function () {\n    var widget = this.getWidgets()[0];\n    return widget === null || widget === void 0 ? void 0 : widget.getOnValue();\n  };\n  PDFAcroCheckBox.fromDict = function (dict, ref) {\n    return new PDFAcroCheckBox(dict, ref);\n  };\n  PDFAcroCheckBox.create = function (context) {\n    var dict = context.obj({\n      FT: 'Btn',\n      Kids: []\n    });\n    var ref = context.register(dict);\n    return new PDFAcroCheckBox(dict, ref);\n  };\n  return PDFAcroCheckBox;\n}(PDFAcroButton);\nexport default PDFAcroCheckBox;","map":{"version":3,"sources":["../../../src/core/acroform/PDFAcroCheckBox.ts"],"names":[],"mappings":";AAGA,OAAO,OAAO,MAAA,oBAAA;AACd,OAAO,aAAa,MAAA,iBAAA;AACpB,SAAS,0BAA0B,QAAE,WAAA;AAErC,IAAA,eAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA8B,SAAA,CAAA,eAAA,EAAA,MAAA,CAAA;EAA9B,SAAA,eAAA,CAAA,EAAA;;EAuCA;EA1BE,eAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,UAAS,KAAc,EAAA;;IACrB,IAAM,OAAO,GAAA,CAAA,EAAA,GAAG,IAAI,CAAC,UAAU,CAAA,CAAE,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC;IACtD,IAAI,KAAK,KAAK,OAAO,IAAI,KAAK,KAAK,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE;MACpD,MAAM,IAAI,0BAA0B,CAAA,CAAE;IACvC;IAED,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC;IAErC,IAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAA,CAAE;IACjC,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,OAAO,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE;MACxD,IAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC;MAC3B,IAAM,KAAK,GAAG,MAAM,CAAC,UAAU,CAAA,CAAE,KAAK,KAAK,GAAG,KAAK,GAAG,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC;MACvE,MAAM,CAAC,kBAAkB,CAAC,KAAK,CAAC;IACjC;EACH,CAAC;EAED,eAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,YAAA;IACE,IAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAA,CAAE;IAClB,IAAI,CAAC,YAAY,OAAO,EAAE,OAAO,CAAC;IAClC,OAAO,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC;EAC1B,CAAC;EAED,eAAA,CAAA,SAAA,CAAA,UAAU,GAAV,YAAA;IACS,IAAA,MAAM,GAAI,IAAI,CAAC,UAAU,CAAA,CAAE,CAAA,CAAA,CAArB;IACb,OAAO,MAAM,KAAA,IAAA,IAAN,MAAM,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAN,MAAM,CAAE,UAAU,CAAA,CAAA;EAC3B,CAAC;EArCM,eAAA,CAAA,QAAQ,GAAG,UAAC,IAAa,EAAE,GAAW,EAAA;IAC3C,OAAA,IAAI,eAAe,CAAC,IAAI,EAAE,GAAG,CAAC;EAA9B,CAA8B;EAEzB,eAAA,CAAA,MAAM,GAAG,UAAC,OAAmB,EAAA;IAClC,IAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC;MACvB,EAAE,EAAE,KAAK;MACT,IAAI,EAAE;KACP,CAAC;IACF,IAAM,GAAG,GAAG,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC;IAClC,OAAO,IAAI,eAAe,CAAC,IAAI,EAAE,GAAG,CAAC;EACvC,CAAC;EA4BH,OAAA,eAAC;CAAA,CAvC6B,aAAa,CAAA;AAyC3C,eAAe,eAAe","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFAcroButton from \"./PDFAcroButton\";\nimport { InvalidAcroFieldValueError } from \"../errors\";\nvar PDFAcroCheckBox = /** @class */ (function (_super) {\n    __extends(PDFAcroCheckBox, _super);\n    function PDFAcroCheckBox() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    PDFAcroCheckBox.prototype.setValue = function (value) {\n        var _a;\n        var onValue = (_a = this.getOnValue()) !== null && _a !== void 0 ? _a : PDFName.of('Yes');\n        if (value !== onValue && value !== PDFName.of('Off')) {\n            throw new InvalidAcroFieldValueError();\n        }\n        this.dict.set(PDFName.of('V'), value);\n        var widgets = this.getWidgets();\n        for (var idx = 0, len = widgets.length; idx < len; idx++) {\n            var widget = widgets[idx];\n            var state = widget.getOnValue() === value ? value : PDFName.of('Off');\n            widget.setAppearanceState(state);\n        }\n    };\n    PDFAcroCheckBox.prototype.getValue = function () {\n        var v = this.V();\n        if (v instanceof PDFName)\n            return v;\n        return PDFName.of('Off');\n    };\n    PDFAcroCheckBox.prototype.getOnValue = function () {\n        var widget = this.getWidgets()[0];\n        return widget === null || widget === void 0 ? void 0 : widget.getOnValue();\n    };\n    PDFAcroCheckBox.fromDict = function (dict, ref) {\n        return new PDFAcroCheckBox(dict, ref);\n    };\n    PDFAcroCheckBox.create = function (context) {\n        var dict = context.obj({\n            FT: 'Btn',\n            Kids: [],\n        });\n        var ref = context.register(dict);\n        return new PDFAcroCheckBox(dict, ref);\n    };\n    return PDFAcroCheckBox;\n}(PDFAcroButton));\nexport default PDFAcroCheckBox;\n//# sourceMappingURL=PDFAcroCheckBox.js.map"]},"metadata":{},"sourceType":"module"}