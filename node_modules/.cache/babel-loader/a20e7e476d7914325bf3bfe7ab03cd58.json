{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFPage from \"../PDFPage\";\nimport PDFField, { assertFieldAppearanceOptions } from \"./PDFField\";\nimport { normalizeAppearance, defaultRadioGroupAppearanceProvider } from \"./appearances\";\nimport { rgb } from \"../colors\";\nimport { degrees } from \"../rotations\";\nimport { PDFName, PDFHexString, PDFDict, PDFAcroRadioButton, AcroButtonFlags } from \"../../core\";\nimport { assertIs, assertOrUndefined, assertIsOneOf } from \"../../utils\";\n/**\n * Represents a radio group field of a [[PDFForm]].\n *\n * [[PDFRadioGroup]] fields are collections of radio buttons. The purpose of a\n * radio group is to enable users to select one option from a set of mutually\n * exclusive choices. Each choice in a radio group is represented by a radio\n * button. Radio buttons each have two states: `on` and `off`. At most one\n * radio button in a group may be in the `on` state at any time. Users can\n * click on a radio button to select it (and thereby automatically deselect any\n * other radio button that might have already been selected). Some radio\n * groups allow users to toggle a selected radio button `off` by clicking on\n * it (see [[PDFRadioGroup.isOffToggleable]]).\n *\n * Note that some radio groups allow multiple radio buttons to be in the `on`\n * state at the same type **if** they represent the same underlying value (see\n * [[PDFRadioGroup.isMutuallyExclusive]]).\n */\nvar PDFRadioGroup = /** @class */function (_super) {\n  __extends(PDFRadioGroup, _super);\n  function PDFRadioGroup(acroRadioButton, ref, doc) {\n    var _this = _super.call(this, acroRadioButton, ref, doc) || this;\n    assertIs(acroRadioButton, 'acroRadioButton', [[PDFAcroRadioButton, 'PDFAcroRadioButton']]);\n    _this.acroField = acroRadioButton;\n    return _this;\n  }\n  /**\n   * Get the list of available options for this radio group. Each option is\n   * represented by a radio button. These radio buttons are displayed at\n   * various locations in the document, potentially on different pages (though\n   * typically they are stacked horizontally or vertically on the same page).\n   * For example:\n   * ```js\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n   * const options = radioGroup.getOptions()\n   * console.log('Radio Group options:', options)\n   * ```\n   * @returns The options for this radio group.\n   */\n  PDFRadioGroup.prototype.getOptions = function () {\n    var exportValues = this.acroField.getExportValues();\n    if (exportValues) {\n      var exportOptions = new Array(exportValues.length);\n      for (var idx = 0, len = exportValues.length; idx < len; idx++) {\n        exportOptions[idx] = exportValues[idx].decodeText();\n      }\n      return exportOptions;\n    }\n    var onValues = this.acroField.getOnValues();\n    var onOptions = new Array(onValues.length);\n    for (var idx = 0, len = onOptions.length; idx < len; idx++) {\n      onOptions[idx] = onValues[idx].decodeText();\n    }\n    return onOptions;\n  };\n  /**\n   * Get the selected option for this radio group. The selected option is\n   * represented by the radio button in this group that is turned on. At most\n   * one radio button in a group can be selected. If no buttons in this group\n   * are selected, `undefined` is returned.\n   * For example:\n   * ```js\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n   * const selected = radioGroup.getSelected()\n   * console.log('Selected radio button:', selected)\n   * ```\n   * @returns The selected option for this radio group.\n   */\n  PDFRadioGroup.prototype.getSelected = function () {\n    var value = this.acroField.getValue();\n    if (value === PDFName.of('Off')) return undefined;\n    var exportValues = this.acroField.getExportValues();\n    if (exportValues) {\n      var onValues = this.acroField.getOnValues();\n      for (var idx = 0, len = onValues.length; idx < len; idx++) {\n        if (onValues[idx] === value) return exportValues[idx].decodeText();\n      }\n    }\n    return value.decodeText();\n  };\n  // // TODO: Figure out why this seems to crash Acrobat. Maybe it's because we\n  // //       aren't removing the widget reference from the page's Annots?\n  // removeOption(option: string) {\n  //   assertIs(option, 'option', ['string']);\n  //   // TODO: Assert is valid `option`!\n  //   const onValues = this.acroField.getOnValues();\n  //   const exportValues = this.acroField.getExportValues();\n  //   if (exportValues) {\n  //     for (let idx = 0, len = exportValues.length; idx < len; idx++) {\n  //       if (exportValues[idx].decodeText() === option) {\n  //         this.acroField.removeWidget(idx);\n  //         this.acroField.removeExportValue(idx);\n  //       }\n  //     }\n  //   } else {\n  //     for (let idx = 0, len = onValues.length; idx < len; idx++) {\n  //       const value = onValues[idx];\n  //       if (value.decodeText() === option) {\n  //         this.acroField.removeWidget(idx);\n  //         this.acroField.removeExportValue(idx);\n  //       }\n  //     }\n  //   }\n  // }\n  /**\n   * Select an option for this radio group. This operation is analogous to a\n   * human user clicking one of the radio buttons in this group via a PDF\n   * reader to toggle it on. This method will update the underlying state of\n   * the radio group to indicate which option has been selected. PDF libraries\n   * and readers will be able to extract this value from the saved document and\n   * determine which option was selected.\n   *\n   * For example:\n   * ```js\n   * const radioGroup = form.getRadioGroup('best.superhero.radioGroup')\n   * radioGroup.select('One Punch Man')\n   * ```\n   *\n   * This method will mark this radio group as dirty, causing its appearance\n   * streams to be updated when either [[PDFDocument.save]] or\n   * [[PDFForm.updateFieldAppearances]] is called. The updated appearance\n   * streams will display a dot inside the widget of this check box field\n   * that represents the selected option.\n   *\n   * @param option The option to be selected.\n   */\n  PDFRadioGroup.prototype.select = function (option) {\n    assertIs(option, 'option', ['string']);\n    var validOptions = this.getOptions();\n    assertIsOneOf(option, 'option', validOptions);\n    this.markAsDirty();\n    var onValues = this.acroField.getOnValues();\n    var exportValues = this.acroField.getExportValues();\n    if (exportValues) {\n      for (var idx = 0, len = exportValues.length; idx < len; idx++) {\n        if (exportValues[idx].decodeText() === option) {\n          this.acroField.setValue(onValues[idx]);\n        }\n      }\n    } else {\n      for (var idx = 0, len = onValues.length; idx < len; idx++) {\n        var value = onValues[idx];\n        if (value.decodeText() === option) this.acroField.setValue(value);\n      }\n    }\n  };\n  /**\n   * Clear any selected option for this dropdown. This will result in all\n   * radio buttons in this group being toggled off. This method will update\n   * the underlying state of the dropdown to indicate that no radio buttons\n   * have been selected.\n   * For example:\n   * ```js\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n   * radioGroup.clear()\n   * ```\n   * This method will mark this radio group as dirty. See\n   * [[PDFRadioGroup.select]] for more details about what this means.\n   */\n  PDFRadioGroup.prototype.clear = function () {\n    this.markAsDirty();\n    this.acroField.setValue(PDFName.of('Off'));\n  };\n  /**\n   * Returns `true` if users can click on radio buttons in this group to toggle\n   * them off. The alternative is that once a user clicks on a radio button\n   * to select it, the only way to deselect it is by selecting on another radio\n   * button in the group. See [[PDFRadioGroup.enableOffToggling]] and\n   * [[PDFRadioGroup.disableOffToggling]]. For example:\n   * ```js\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n   * if (radioGroup.isOffToggleable()) console.log('Off toggling is enabled')\n   * ```\n   */\n  PDFRadioGroup.prototype.isOffToggleable = function () {\n    return !this.acroField.hasFlag(AcroButtonFlags.NoToggleToOff);\n  };\n  /**\n   * Allow users to click on selected radio buttons in this group to toggle\n   * them off. For example:\n   * ```js\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n   * radioGroup.enableOffToggling()\n   * ```\n   * > **NOTE:** This feature is documented in the PDF specification\n   * > (Table 226). However, most PDF readers do not respect this option and\n   * > prevent users from toggling radio buttons off even when it is enabled.\n   * > At the time of this writing (9/6/2020) Mac's Preview software did\n   * > respect the option. Adobe Acrobat, Foxit Reader, and Google Chrome did\n   * > not.\n   */\n  PDFRadioGroup.prototype.enableOffToggling = function () {\n    this.acroField.setFlagTo(AcroButtonFlags.NoToggleToOff, false);\n  };\n  /**\n   * Prevent users from clicking on selected radio buttons in this group to\n   * toggle them off. Clicking on a selected radio button will have no effect.\n   * The only way to deselect a selected radio button is to click on a\n   * different radio button in the group. For example:\n   * ```js\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n   * radioGroup.disableOffToggling()\n   * ```\n   */\n  PDFRadioGroup.prototype.disableOffToggling = function () {\n    this.acroField.setFlagTo(AcroButtonFlags.NoToggleToOff, true);\n  };\n  /**\n   * Returns `true` if the radio buttons in this group are mutually exclusive.\n   * This means that when the user selects a radio button, only that specific\n   * button will be turned on. Even if other radio buttons in the group\n   * represent the same value, they will not be enabled. The alternative to\n   * this is that clicking a radio button will select that button along with\n   * any other radio buttons in the group that share the same value. See\n   * [[PDFRadioGroup.enableMutualExclusion]] and\n   * [[PDFRadioGroup.disableMutualExclusion]].\n   * For example:\n   * ```js\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n   * if (radioGroup.isMutuallyExclusive()) console.log('Mutual exclusion is enabled')\n   * ```\n   */\n  PDFRadioGroup.prototype.isMutuallyExclusive = function () {\n    return !this.acroField.hasFlag(AcroButtonFlags.RadiosInUnison);\n  };\n  /**\n   * When the user clicks a radio button in this group it will be selected. In\n   * addition, any other radio buttons in this group that share the same\n   * underlying value will also be selected. For example:\n   * ```js\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n   * radioGroup.enableMutualExclusion()\n   * ```\n   * Note that this option must be enabled prior to adding options to the\n   * radio group. It does not currently apply retroactively to existing\n   * radio buttons in the group.\n   */\n  PDFRadioGroup.prototype.enableMutualExclusion = function () {\n    this.acroField.setFlagTo(AcroButtonFlags.RadiosInUnison, false);\n  };\n  /**\n   * When the user clicks a radio button in this group only it will be selected.\n   * No other radio buttons in the group will be selected, even if they share\n   * the same underlying value. For example:\n   * ```js\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n   * radioGroup.disableMutualExclusion()\n   * ```\n   * Note that this option must be disabled prior to adding options to the\n   * radio group. It does not currently apply retroactively to existing\n   * radio buttons in the group.\n   */\n  PDFRadioGroup.prototype.disableMutualExclusion = function () {\n    this.acroField.setFlagTo(AcroButtonFlags.RadiosInUnison, true);\n  };\n  /**\n   * Add a new radio button to this group on the specified page. For example:\n   * ```js\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const radioGroup = form.createRadioGroup('best.gundam')\n   *\n   * const options = {\n   *   x: 50,\n   *   width: 25,\n   *   height: 25,\n   *   textColor: rgb(1, 0, 0),\n   *   backgroundColor: rgb(0, 1, 0),\n   *   borderColor: rgb(0, 0, 1),\n   *   borderWidth: 2,\n   *   rotate: degrees(90),\n   * }\n   *\n   * radioGroup.addOptionToPage('Exia', page, { ...options, y: 50 })\n   * radioGroup.addOptionToPage('Dynames', page, { ...options, y: 110 })\n   * ```\n   * This will create a new radio button widget for this radio group field.\n   * @param option The option that the radio button widget represents.\n   * @param page The page to which the radio button widget should be added.\n   * @param options The options to be used when adding the radio button widget.\n   */\n  PDFRadioGroup.prototype.addOptionToPage = function (option, page, options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n    assertIs(option, 'option', ['string']);\n    assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\n    assertFieldAppearanceOptions(options);\n    // Create a widget for this radio button\n    var widget = this.createWidget({\n      x: (_a = options === null || options === void 0 ? void 0 : options.x) !== null && _a !== void 0 ? _a : 0,\n      y: (_b = options === null || options === void 0 ? void 0 : options.y) !== null && _b !== void 0 ? _b : 0,\n      width: (_c = options === null || options === void 0 ? void 0 : options.width) !== null && _c !== void 0 ? _c : 50,\n      height: (_d = options === null || options === void 0 ? void 0 : options.height) !== null && _d !== void 0 ? _d : 50,\n      textColor: (_e = options === null || options === void 0 ? void 0 : options.textColor) !== null && _e !== void 0 ? _e : rgb(0, 0, 0),\n      backgroundColor: (_f = options === null || options === void 0 ? void 0 : options.backgroundColor) !== null && _f !== void 0 ? _f : rgb(1, 1, 1),\n      borderColor: (_g = options === null || options === void 0 ? void 0 : options.borderColor) !== null && _g !== void 0 ? _g : rgb(0, 0, 0),\n      borderWidth: (_h = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _h !== void 0 ? _h : 1,\n      rotate: (_j = options === null || options === void 0 ? void 0 : options.rotate) !== null && _j !== void 0 ? _j : degrees(0),\n      hidden: options === null || options === void 0 ? void 0 : options.hidden,\n      page: page.ref\n    });\n    var widgetRef = this.doc.context.register(widget.dict);\n    // Add widget to this field\n    var apStateValue = this.acroField.addWidgetWithOpt(widgetRef, PDFHexString.fromText(option), !this.isMutuallyExclusive());\n    // Set appearance streams for widget\n    widget.setAppearanceState(PDFName.of('Off'));\n    this.updateWidgetAppearance(widget, apStateValue);\n    // Add widget to the given page\n    page.node.addAnnot(widgetRef);\n  };\n  /**\n   * Returns `true` if any of this group's radio button widgets do not have an\n   * appearance stream for their current state. For example:\n   * ```js\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n   * if (radioGroup.needsAppearancesUpdate()) console.log('Needs update')\n   * ```\n   * @returns Whether or not this radio group needs an appearance update.\n   */\n  PDFRadioGroup.prototype.needsAppearancesUpdate = function () {\n    var _a;\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var state = widget.getAppearanceState();\n      var normal = (_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal;\n      if (!(normal instanceof PDFDict)) return true;\n      if (state && !normal.has(state)) return true;\n    }\n    return false;\n  };\n  /**\n   * Update the appearance streams for each of this group's radio button widgets\n   * using the default appearance provider for radio groups. For example:\n   * ```js\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n   * radioGroup.defaultUpdateAppearances()\n   * ```\n   */\n  PDFRadioGroup.prototype.defaultUpdateAppearances = function () {\n    this.updateAppearances();\n  };\n  // rg.updateAppearances((field: any, widget: any) => {\n  //   assert(field === rg);\n  //   assert(widget instanceof PDFWidgetAnnotation);\n  //   return { on: [...rectangle, ...circle], off: [...rectangle, ...circle] };\n  // });\n  /**\n   * Update the appearance streams for each of this group's radio button widgets\n   * using the given appearance provider. If no `provider` is passed, the\n   * default appearance provider for radio groups will be used. For example:\n   * ```js\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n   * radioGroup.updateAppearances((field, widget) => {\n   *   ...\n   *   return {\n   *     normal: { on: drawRadioButton(...), off: drawRadioButton(...) },\n   *     down: { on: drawRadioButton(...), off: drawRadioButton(...) },\n   *   }\n   * })\n   * ```\n   * @param provider Optionally, the appearance provider to be used for\n   *                 generating the contents of the appearance streams.\n   */\n  PDFRadioGroup.prototype.updateAppearances = function (provider) {\n    assertOrUndefined(provider, 'provider', [Function]);\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var onValue = widget.getOnValue();\n      if (!onValue) continue;\n      this.updateWidgetAppearance(widget, onValue, provider);\n    }\n  };\n  PDFRadioGroup.prototype.updateWidgetAppearance = function (widget, onValue, provider) {\n    var apProvider = provider !== null && provider !== void 0 ? provider : defaultRadioGroupAppearanceProvider;\n    var appearances = normalizeAppearance(apProvider(this, widget));\n    this.updateOnOffWidgetAppearance(widget, onValue, appearances);\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFForm.getOptionList]] method, which will create an\n   * > instance of [[PDFOptionList]] for you.\n   *\n   * Create an instance of [[PDFOptionList]] from an existing acroRadioButton\n   * and ref\n   *\n   * @param acroRadioButton The underlying `PDFAcroRadioButton` for this\n   *                        radio group.\n   * @param ref The unique reference for this radio group.\n   * @param doc The document to which this radio group will belong.\n   */\n  PDFRadioGroup.of = function (acroRadioButton, ref, doc) {\n    return new PDFRadioGroup(acroRadioButton, ref, doc);\n  };\n  return PDFRadioGroup;\n}(PDFField);\nexport default PDFRadioGroup;","map":{"version":3,"sources":["../../../src/api/form/PDFRadioGroup.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport PDFPage from \"../PDFPage\";\nimport PDFField, { assertFieldAppearanceOptions, } from \"./PDFField\";\nimport { normalizeAppearance, defaultRadioGroupAppearanceProvider, } from \"./appearances\";\nimport { rgb } from \"../colors\";\nimport { degrees } from \"../rotations\";\nimport { PDFName, PDFHexString, PDFDict, PDFAcroRadioButton, AcroButtonFlags, } from \"../../core\";\nimport { assertIs, assertOrUndefined, assertIsOneOf } from \"../../utils\";\n/**\n * Represents a radio group field of a [[PDFForm]].\n *\n * [[PDFRadioGroup]] fields are collections of radio buttons. The purpose of a\n * radio group is to enable users to select one option from a set of mutually\n * exclusive choices. Each choice in a radio group is represented by a radio\n * button. Radio buttons each have two states: `on` and `off`. At most one\n * radio button in a group may be in the `on` state at any time. Users can\n * click on a radio button to select it (and thereby automatically deselect any\n * other radio button that might have already been selected). Some radio\n * groups allow users to toggle a selected radio button `off` by clicking on\n * it (see [[PDFRadioGroup.isOffToggleable]]).\n *\n * Note that some radio groups allow multiple radio buttons to be in the `on`\n * state at the same type **if** they represent the same underlying value (see\n * [[PDFRadioGroup.isMutuallyExclusive]]).\n */\nvar PDFRadioGroup = /** @class */ (function (_super) {\n    __extends(PDFRadioGroup, _super);\n    function PDFRadioGroup(acroRadioButton, ref, doc) {\n        var _this = _super.call(this, acroRadioButton, ref, doc) || this;\n        assertIs(acroRadioButton, 'acroRadioButton', [\n            [PDFAcroRadioButton, 'PDFAcroRadioButton'],\n        ]);\n        _this.acroField = acroRadioButton;\n        return _this;\n    }\n    /**\n     * Get the list of available options for this radio group. Each option is\n     * represented by a radio button. These radio buttons are displayed at\n     * various locations in the document, potentially on different pages (though\n     * typically they are stacked horizontally or vertically on the same page).\n     * For example:\n     * ```js\n     * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n     * const options = radioGroup.getOptions()\n     * console.log('Radio Group options:', options)\n     * ```\n     * @returns The options for this radio group.\n     */\n    PDFRadioGroup.prototype.getOptions = function () {\n        var exportValues = this.acroField.getExportValues();\n        if (exportValues) {\n            var exportOptions = new Array(exportValues.length);\n            for (var idx = 0, len = exportValues.length; idx < len; idx++) {\n                exportOptions[idx] = exportValues[idx].decodeText();\n            }\n            return exportOptions;\n        }\n        var onValues = this.acroField.getOnValues();\n        var onOptions = new Array(onValues.length);\n        for (var idx = 0, len = onOptions.length; idx < len; idx++) {\n            onOptions[idx] = onValues[idx].decodeText();\n        }\n        return onOptions;\n    };\n    /**\n     * Get the selected option for this radio group. The selected option is\n     * represented by the radio button in this group that is turned on. At most\n     * one radio button in a group can be selected. If no buttons in this group\n     * are selected, `undefined` is returned.\n     * For example:\n     * ```js\n     * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n     * const selected = radioGroup.getSelected()\n     * console.log('Selected radio button:', selected)\n     * ```\n     * @returns The selected option for this radio group.\n     */\n    PDFRadioGroup.prototype.getSelected = function () {\n        var value = this.acroField.getValue();\n        if (value === PDFName.of('Off'))\n            return undefined;\n        var exportValues = this.acroField.getExportValues();\n        if (exportValues) {\n            var onValues = this.acroField.getOnValues();\n            for (var idx = 0, len = onValues.length; idx < len; idx++) {\n                if (onValues[idx] === value)\n                    return exportValues[idx].decodeText();\n            }\n        }\n        return value.decodeText();\n    };\n    // // TODO: Figure out why this seems to crash Acrobat. Maybe it's because we\n    // //       aren't removing the widget reference from the page's Annots?\n    // removeOption(option: string) {\n    //   assertIs(option, 'option', ['string']);\n    //   // TODO: Assert is valid `option`!\n    //   const onValues = this.acroField.getOnValues();\n    //   const exportValues = this.acroField.getExportValues();\n    //   if (exportValues) {\n    //     for (let idx = 0, len = exportValues.length; idx < len; idx++) {\n    //       if (exportValues[idx].decodeText() === option) {\n    //         this.acroField.removeWidget(idx);\n    //         this.acroField.removeExportValue(idx);\n    //       }\n    //     }\n    //   } else {\n    //     for (let idx = 0, len = onValues.length; idx < len; idx++) {\n    //       const value = onValues[idx];\n    //       if (value.decodeText() === option) {\n    //         this.acroField.removeWidget(idx);\n    //         this.acroField.removeExportValue(idx);\n    //       }\n    //     }\n    //   }\n    // }\n    /**\n     * Select an option for this radio group. This operation is analogous to a\n     * human user clicking one of the radio buttons in this group via a PDF\n     * reader to toggle it on. This method will update the underlying state of\n     * the radio group to indicate which option has been selected. PDF libraries\n     * and readers will be able to extract this value from the saved document and\n     * determine which option was selected.\n     *\n     * For example:\n     * ```js\n     * const radioGroup = form.getRadioGroup('best.superhero.radioGroup')\n     * radioGroup.select('One Punch Man')\n     * ```\n     *\n     * This method will mark this radio group as dirty, causing its appearance\n     * streams to be updated when either [[PDFDocument.save]] or\n     * [[PDFForm.updateFieldAppearances]] is called. The updated appearance\n     * streams will display a dot inside the widget of this check box field\n     * that represents the selected option.\n     *\n     * @param option The option to be selected.\n     */\n    PDFRadioGroup.prototype.select = function (option) {\n        assertIs(option, 'option', ['string']);\n        var validOptions = this.getOptions();\n        assertIsOneOf(option, 'option', validOptions);\n        this.markAsDirty();\n        var onValues = this.acroField.getOnValues();\n        var exportValues = this.acroField.getExportValues();\n        if (exportValues) {\n            for (var idx = 0, len = exportValues.length; idx < len; idx++) {\n                if (exportValues[idx].decodeText() === option) {\n                    this.acroField.setValue(onValues[idx]);\n                }\n            }\n        }\n        else {\n            for (var idx = 0, len = onValues.length; idx < len; idx++) {\n                var value = onValues[idx];\n                if (value.decodeText() === option)\n                    this.acroField.setValue(value);\n            }\n        }\n    };\n    /**\n     * Clear any selected option for this dropdown. This will result in all\n     * radio buttons in this group being toggled off. This method will update\n     * the underlying state of the dropdown to indicate that no radio buttons\n     * have been selected.\n     * For example:\n     * ```js\n     * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n     * radioGroup.clear()\n     * ```\n     * This method will mark this radio group as dirty. See\n     * [[PDFRadioGroup.select]] for more details about what this means.\n     */\n    PDFRadioGroup.prototype.clear = function () {\n        this.markAsDirty();\n        this.acroField.setValue(PDFName.of('Off'));\n    };\n    /**\n     * Returns `true` if users can click on radio buttons in this group to toggle\n     * them off. The alternative is that once a user clicks on a radio button\n     * to select it, the only way to deselect it is by selecting on another radio\n     * button in the group. See [[PDFRadioGroup.enableOffToggling]] and\n     * [[PDFRadioGroup.disableOffToggling]]. For example:\n     * ```js\n     * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n     * if (radioGroup.isOffToggleable()) console.log('Off toggling is enabled')\n     * ```\n     */\n    PDFRadioGroup.prototype.isOffToggleable = function () {\n        return !this.acroField.hasFlag(AcroButtonFlags.NoToggleToOff);\n    };\n    /**\n     * Allow users to click on selected radio buttons in this group to toggle\n     * them off. For example:\n     * ```js\n     * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n     * radioGroup.enableOffToggling()\n     * ```\n     * > **NOTE:** This feature is documented in the PDF specification\n     * > (Table 226). However, most PDF readers do not respect this option and\n     * > prevent users from toggling radio buttons off even when it is enabled.\n     * > At the time of this writing (9/6/2020) Mac's Preview software did\n     * > respect the option. Adobe Acrobat, Foxit Reader, and Google Chrome did\n     * > not.\n     */\n    PDFRadioGroup.prototype.enableOffToggling = function () {\n        this.acroField.setFlagTo(AcroButtonFlags.NoToggleToOff, false);\n    };\n    /**\n     * Prevent users from clicking on selected radio buttons in this group to\n     * toggle them off. Clicking on a selected radio button will have no effect.\n     * The only way to deselect a selected radio button is to click on a\n     * different radio button in the group. For example:\n     * ```js\n     * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n     * radioGroup.disableOffToggling()\n     * ```\n     */\n    PDFRadioGroup.prototype.disableOffToggling = function () {\n        this.acroField.setFlagTo(AcroButtonFlags.NoToggleToOff, true);\n    };\n    /**\n     * Returns `true` if the radio buttons in this group are mutually exclusive.\n     * This means that when the user selects a radio button, only that specific\n     * button will be turned on. Even if other radio buttons in the group\n     * represent the same value, they will not be enabled. The alternative to\n     * this is that clicking a radio button will select that button along with\n     * any other radio buttons in the group that share the same value. See\n     * [[PDFRadioGroup.enableMutualExclusion]] and\n     * [[PDFRadioGroup.disableMutualExclusion]].\n     * For example:\n     * ```js\n     * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n     * if (radioGroup.isMutuallyExclusive()) console.log('Mutual exclusion is enabled')\n     * ```\n     */\n    PDFRadioGroup.prototype.isMutuallyExclusive = function () {\n        return !this.acroField.hasFlag(AcroButtonFlags.RadiosInUnison);\n    };\n    /**\n     * When the user clicks a radio button in this group it will be selected. In\n     * addition, any other radio buttons in this group that share the same\n     * underlying value will also be selected. For example:\n     * ```js\n     * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n     * radioGroup.enableMutualExclusion()\n     * ```\n     * Note that this option must be enabled prior to adding options to the\n     * radio group. It does not currently apply retroactively to existing\n     * radio buttons in the group.\n     */\n    PDFRadioGroup.prototype.enableMutualExclusion = function () {\n        this.acroField.setFlagTo(AcroButtonFlags.RadiosInUnison, false);\n    };\n    /**\n     * When the user clicks a radio button in this group only it will be selected.\n     * No other radio buttons in the group will be selected, even if they share\n     * the same underlying value. For example:\n     * ```js\n     * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n     * radioGroup.disableMutualExclusion()\n     * ```\n     * Note that this option must be disabled prior to adding options to the\n     * radio group. It does not currently apply retroactively to existing\n     * radio buttons in the group.\n     */\n    PDFRadioGroup.prototype.disableMutualExclusion = function () {\n        this.acroField.setFlagTo(AcroButtonFlags.RadiosInUnison, true);\n    };\n    /**\n     * Add a new radio button to this group on the specified page. For example:\n     * ```js\n     * const page = pdfDoc.addPage()\n     *\n     * const form = pdfDoc.getForm()\n     * const radioGroup = form.createRadioGroup('best.gundam')\n     *\n     * const options = {\n     *   x: 50,\n     *   width: 25,\n     *   height: 25,\n     *   textColor: rgb(1, 0, 0),\n     *   backgroundColor: rgb(0, 1, 0),\n     *   borderColor: rgb(0, 0, 1),\n     *   borderWidth: 2,\n     *   rotate: degrees(90),\n     * }\n     *\n     * radioGroup.addOptionToPage('Exia', page, { ...options, y: 50 })\n     * radioGroup.addOptionToPage('Dynames', page, { ...options, y: 110 })\n     * ```\n     * This will create a new radio button widget for this radio group field.\n     * @param option The option that the radio button widget represents.\n     * @param page The page to which the radio button widget should be added.\n     * @param options The options to be used when adding the radio button widget.\n     */\n    PDFRadioGroup.prototype.addOptionToPage = function (option, page, options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        assertIs(option, 'option', ['string']);\n        assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\n        assertFieldAppearanceOptions(options);\n        // Create a widget for this radio button\n        var widget = this.createWidget({\n            x: (_a = options === null || options === void 0 ? void 0 : options.x) !== null && _a !== void 0 ? _a : 0,\n            y: (_b = options === null || options === void 0 ? void 0 : options.y) !== null && _b !== void 0 ? _b : 0,\n            width: (_c = options === null || options === void 0 ? void 0 : options.width) !== null && _c !== void 0 ? _c : 50,\n            height: (_d = options === null || options === void 0 ? void 0 : options.height) !== null && _d !== void 0 ? _d : 50,\n            textColor: (_e = options === null || options === void 0 ? void 0 : options.textColor) !== null && _e !== void 0 ? _e : rgb(0, 0, 0),\n            backgroundColor: (_f = options === null || options === void 0 ? void 0 : options.backgroundColor) !== null && _f !== void 0 ? _f : rgb(1, 1, 1),\n            borderColor: (_g = options === null || options === void 0 ? void 0 : options.borderColor) !== null && _g !== void 0 ? _g : rgb(0, 0, 0),\n            borderWidth: (_h = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _h !== void 0 ? _h : 1,\n            rotate: (_j = options === null || options === void 0 ? void 0 : options.rotate) !== null && _j !== void 0 ? _j : degrees(0),\n            hidden: options === null || options === void 0 ? void 0 : options.hidden,\n            page: page.ref,\n        });\n        var widgetRef = this.doc.context.register(widget.dict);\n        // Add widget to this field\n        var apStateValue = this.acroField.addWidgetWithOpt(widgetRef, PDFHexString.fromText(option), !this.isMutuallyExclusive());\n        // Set appearance streams for widget\n        widget.setAppearanceState(PDFName.of('Off'));\n        this.updateWidgetAppearance(widget, apStateValue);\n        // Add widget to the given page\n        page.node.addAnnot(widgetRef);\n    };\n    /**\n     * Returns `true` if any of this group's radio button widgets do not have an\n     * appearance stream for their current state. For example:\n     * ```js\n     * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n     * if (radioGroup.needsAppearancesUpdate()) console.log('Needs update')\n     * ```\n     * @returns Whether or not this radio group needs an appearance update.\n     */\n    PDFRadioGroup.prototype.needsAppearancesUpdate = function () {\n        var _a;\n        var widgets = this.acroField.getWidgets();\n        for (var idx = 0, len = widgets.length; idx < len; idx++) {\n            var widget = widgets[idx];\n            var state = widget.getAppearanceState();\n            var normal = (_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal;\n            if (!(normal instanceof PDFDict))\n                return true;\n            if (state && !normal.has(state))\n                return true;\n        }\n        return false;\n    };\n    /**\n     * Update the appearance streams for each of this group's radio button widgets\n     * using the default appearance provider for radio groups. For example:\n     * ```js\n     * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n     * radioGroup.defaultUpdateAppearances()\n     * ```\n     */\n    PDFRadioGroup.prototype.defaultUpdateAppearances = function () {\n        this.updateAppearances();\n    };\n    // rg.updateAppearances((field: any, widget: any) => {\n    //   assert(field === rg);\n    //   assert(widget instanceof PDFWidgetAnnotation);\n    //   return { on: [...rectangle, ...circle], off: [...rectangle, ...circle] };\n    // });\n    /**\n     * Update the appearance streams for each of this group's radio button widgets\n     * using the given appearance provider. If no `provider` is passed, the\n     * default appearance provider for radio groups will be used. For example:\n     * ```js\n     * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n     * radioGroup.updateAppearances((field, widget) => {\n     *   ...\n     *   return {\n     *     normal: { on: drawRadioButton(...), off: drawRadioButton(...) },\n     *     down: { on: drawRadioButton(...), off: drawRadioButton(...) },\n     *   }\n     * })\n     * ```\n     * @param provider Optionally, the appearance provider to be used for\n     *                 generating the contents of the appearance streams.\n     */\n    PDFRadioGroup.prototype.updateAppearances = function (provider) {\n        assertOrUndefined(provider, 'provider', [Function]);\n        var widgets = this.acroField.getWidgets();\n        for (var idx = 0, len = widgets.length; idx < len; idx++) {\n            var widget = widgets[idx];\n            var onValue = widget.getOnValue();\n            if (!onValue)\n                continue;\n            this.updateWidgetAppearance(widget, onValue, provider);\n        }\n    };\n    PDFRadioGroup.prototype.updateWidgetAppearance = function (widget, onValue, provider) {\n        var apProvider = provider !== null && provider !== void 0 ? provider : defaultRadioGroupAppearanceProvider;\n        var appearances = normalizeAppearance(apProvider(this, widget));\n        this.updateOnOffWidgetAppearance(widget, onValue, appearances);\n    };\n    /**\n     * > **NOTE:** You probably don't want to call this method directly. Instead,\n     * > consider using the [[PDFForm.getOptionList]] method, which will create an\n     * > instance of [[PDFOptionList]] for you.\n     *\n     * Create an instance of [[PDFOptionList]] from an existing acroRadioButton\n     * and ref\n     *\n     * @param acroRadioButton The underlying `PDFAcroRadioButton` for this\n     *                        radio group.\n     * @param ref The unique reference for this radio group.\n     * @param doc The document to which this radio group will belong.\n     */\n    PDFRadioGroup.of = function (acroRadioButton, ref, doc) { return new PDFRadioGroup(acroRadioButton, ref, doc); };\n    return PDFRadioGroup;\n}(PDFField));\nexport default PDFRadioGroup;\n//# sourceMappingURL=PDFRadioGroup.js.map"]},"metadata":{},"sourceType":"module"}