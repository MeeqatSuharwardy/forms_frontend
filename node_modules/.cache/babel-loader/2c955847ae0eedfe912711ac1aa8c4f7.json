{"ast":null,"code":"/*\n * Copyright 2012 Mozilla Foundation\n *\n * The AsciiHexStream class contained in this file is a TypeScript port of the\n * JavaScript AsciiHexStream class in Mozilla's pdf.js project, made available\n * under the Apache 2.0 open source license.\n */\nimport { __extends } from \"tslib\";\nimport DecodeStream from \"./DecodeStream\";\nvar AsciiHexStream = /** @class */function (_super) {\n  __extends(AsciiHexStream, _super);\n  function AsciiHexStream(stream, maybeLength) {\n    var _this = _super.call(this, maybeLength) || this;\n    _this.stream = stream;\n    _this.firstDigit = -1;\n    // Most streams increase in size when decoded, but AsciiHex streams shrink\n    // by 50%.\n    if (maybeLength) {\n      maybeLength = 0.5 * maybeLength;\n    }\n    return _this;\n  }\n  AsciiHexStream.prototype.readBlock = function () {\n    var UPSTREAM_BLOCK_SIZE = 8000;\n    var bytes = this.stream.getBytes(UPSTREAM_BLOCK_SIZE);\n    if (!bytes.length) {\n      this.eof = true;\n      return;\n    }\n    var maxDecodeLength = bytes.length + 1 >> 1;\n    var buffer = this.ensureBuffer(this.bufferLength + maxDecodeLength);\n    var bufferLength = this.bufferLength;\n    var firstDigit = this.firstDigit;\n    for (var i = 0, ii = bytes.length; i < ii; i++) {\n      var ch = bytes[i];\n      var digit = void 0;\n      if (ch >= 0x30 && ch <= 0x39) {\n        // '0'-'9'\n        digit = ch & 0x0f;\n      } else if (ch >= 0x41 && ch <= 0x46 || ch >= 0x61 && ch <= 0x66) {\n        // 'A'-'Z', 'a'-'z'\n        digit = (ch & 0x0f) + 9;\n      } else if (ch === 0x3e) {\n        // '>'\n        this.eof = true;\n        break;\n      } else {\n        // probably whitespace\n        continue; // ignoring\n      }\n      if (firstDigit < 0) {\n        firstDigit = digit;\n      } else {\n        buffer[bufferLength++] = firstDigit << 4 | digit;\n        firstDigit = -1;\n      }\n    }\n    if (firstDigit >= 0 && this.eof) {\n      // incomplete byte\n      buffer[bufferLength++] = firstDigit << 4;\n      firstDigit = -1;\n    }\n    this.firstDigit = firstDigit;\n    this.bufferLength = bufferLength;\n  };\n  return AsciiHexStream;\n}(DecodeStream);\nexport default AsciiHexStream;","map":{"version":3,"sources":["../../../src/core/streams/AsciiHexStream.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;AAEH,OAAO,YAAY,MAAA,gBAAA;AAGnB,IAAA,cAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA6B,SAAA,CAAA,cAAA,EAAA,MAAA,CAAA;EAI3B,SAAA,cAAA,CAAY,MAAkB,EAAE,WAAoB,EAAA;IAApD,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,WAAW,CAAC,IAAA,IAAA;IAElB,KAAI,CAAC,MAAM,GAAG,MAAM;IAEpB,KAAI,CAAC,UAAU,GAAG,CAAC,CAAC;IAEpB;IACA;IACA,IAAI,WAAW,EAAE;MACf,WAAW,GAAG,GAAG,GAAG,WAAW;IAChC;;EACH;EAEU,cAAA,CAAA,SAAA,CAAA,SAAS,GAAnB,YAAA;IACE,IAAM,mBAAmB,GAAG,IAAI;IAChC,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,mBAAmB,CAAC;IACvD,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;MACjB,IAAI,CAAC,GAAG,GAAG,IAAI;MACf;IACD;IAED,IAAM,eAAe,GAAI,KAAK,CAAC,MAAM,GAAG,CAAC,IAAK,CAAC;IAC/C,IAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,GAAG,eAAe,CAAC;IACrE,IAAI,YAAY,GAAG,IAAI,CAAC,YAAY;IAEpC,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU;IAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;MAC9C,IAAM,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC;MACnB,IAAI,KAAK,GAAA,KAAA,CAAA;MACT,IAAI,EAAE,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,EAAE;QAC5B;QACA,KAAK,GAAG,EAAE,GAAG,IAAI;OAClB,MAAM,IAAK,EAAE,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,IAAM,EAAE,IAAI,IAAI,IAAI,EAAE,IAAI,IAAK,EAAE;QACnE;QACA,KAAK,GAAG,CAAC,EAAE,GAAG,IAAI,IAAI,CAAC;OACxB,MAAM,IAAI,EAAE,KAAK,IAAI,EAAE;QACtB;QACA,IAAI,CAAC,GAAG,GAAG,IAAI;QACf;OACD,MAAM;QACL;QACA,SAAS,CAAC;MACX;MACD,IAAI,UAAU,GAAG,CAAC,EAAE;QAClB,UAAU,GAAG,KAAK;OACnB,MAAM;QACL,MAAM,CAAC,YAAY,EAAE,CAAC,GAAI,UAAU,IAAI,CAAC,GAAI,KAAK;QAClD,UAAU,GAAG,CAAC,CAAC;MAChB;IACF;IACD,IAAI,UAAU,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,EAAE;MAC/B;MACA,MAAM,CAAC,YAAY,EAAE,CAAC,GAAG,UAAU,IAAI,CAAC;MACxC,UAAU,GAAG,CAAC,CAAC;IAChB;IACD,IAAI,CAAC,UAAU,GAAG,UAAU;IAC5B,IAAI,CAAC,YAAY,GAAG,YAAY;EAClC,CAAC;EACH,OAAA,cAAC;AAAD,CAAC,CA/D4B,YAAY,CAAA;AAiEzC,eAAe,cAAc","sourceRoot":"","sourcesContent":["/*\n * Copyright 2012 Mozilla Foundation\n *\n * The AsciiHexStream class contained in this file is a TypeScript port of the\n * JavaScript AsciiHexStream class in Mozilla's pdf.js project, made available\n * under the Apache 2.0 open source license.\n */\nimport { __extends } from \"tslib\";\nimport DecodeStream from \"./DecodeStream\";\nvar AsciiHexStream = /** @class */ (function (_super) {\n    __extends(AsciiHexStream, _super);\n    function AsciiHexStream(stream, maybeLength) {\n        var _this = _super.call(this, maybeLength) || this;\n        _this.stream = stream;\n        _this.firstDigit = -1;\n        // Most streams increase in size when decoded, but AsciiHex streams shrink\n        // by 50%.\n        if (maybeLength) {\n            maybeLength = 0.5 * maybeLength;\n        }\n        return _this;\n    }\n    AsciiHexStream.prototype.readBlock = function () {\n        var UPSTREAM_BLOCK_SIZE = 8000;\n        var bytes = this.stream.getBytes(UPSTREAM_BLOCK_SIZE);\n        if (!bytes.length) {\n            this.eof = true;\n            return;\n        }\n        var maxDecodeLength = (bytes.length + 1) >> 1;\n        var buffer = this.ensureBuffer(this.bufferLength + maxDecodeLength);\n        var bufferLength = this.bufferLength;\n        var firstDigit = this.firstDigit;\n        for (var i = 0, ii = bytes.length; i < ii; i++) {\n            var ch = bytes[i];\n            var digit = void 0;\n            if (ch >= 0x30 && ch <= 0x39) {\n                // '0'-'9'\n                digit = ch & 0x0f;\n            }\n            else if ((ch >= 0x41 && ch <= 0x46) || (ch >= 0x61 && ch <= 0x66)) {\n                // 'A'-'Z', 'a'-'z'\n                digit = (ch & 0x0f) + 9;\n            }\n            else if (ch === 0x3e) {\n                // '>'\n                this.eof = true;\n                break;\n            }\n            else {\n                // probably whitespace\n                continue; // ignoring\n            }\n            if (firstDigit < 0) {\n                firstDigit = digit;\n            }\n            else {\n                buffer[bufferLength++] = (firstDigit << 4) | digit;\n                firstDigit = -1;\n            }\n        }\n        if (firstDigit >= 0 && this.eof) {\n            // incomplete byte\n            buffer[bufferLength++] = firstDigit << 4;\n            firstDigit = -1;\n        }\n        this.firstDigit = firstDigit;\n        this.bufferLength = bufferLength;\n    };\n    return AsciiHexStream;\n}(DecodeStream));\nexport default AsciiHexStream;\n//# sourceMappingURL=AsciiHexStream.js.map"]},"metadata":{},"sourceType":"module"}