{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport PDFDocument from \"../PDFDocument\";\nimport { colorToComponents, setFillingColor } from \"../colors\";\nimport { toDegrees, rotateRectangle, reduceRotation, adjustDimsForRotation, degrees } from \"../rotations\";\nimport { PDFRef, PDFWidgetAnnotation, PDFName, MethodNotImplementedError, AcroFieldFlags, PDFAcroTerminal, AnnotationFlags } from \"../../core\";\nimport { assertIs, assertMultiple, assertOrUndefined } from \"../../utils\";\nimport { ImageAlignment } from '../image';\nimport { drawImage, rotateInPlace } from '../operations';\nexport var assertFieldAppearanceOptions = function (options) {\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.x, 'options.x', ['number']);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.y, 'options.y', ['number']);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.width, 'options.width', ['number']);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.height, 'options.height', ['number']);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.textColor, 'options.textColor', [[Object, 'Color']]);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.backgroundColor, 'options.backgroundColor', [[Object, 'Color']]);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.borderColor, 'options.borderColor', [[Object, 'Color']]);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.borderWidth, 'options.borderWidth', ['number']);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n};\n/**\n * Represents a field of a [[PDFForm]].\n *\n * This class is effectively abstract. All fields in a [[PDFForm]] will\n * actually be an instance of a subclass of this class.\n *\n * Note that each field in a PDF is represented by a single field object.\n * However, a given field object may be rendered at multiple locations within\n * the document (across one or more pages). The rendering of a field is\n * controlled by its widgets. Each widget causes its field to be displayed at a\n * particular location in the document.\n *\n * Most of the time each field in a PDF has only a single widget, and thus is\n * only rendered once. However, if a field is rendered multiple times, it will\n * have multiple widgets - one for each location it is rendered.\n *\n * This abstraction of field objects and widgets is defined in the PDF\n * specification and dictates how PDF files store fields and where they are\n * to be rendered.\n */\nvar PDFField = /** @class */function () {\n  function PDFField(acroField, ref, doc) {\n    assertIs(acroField, 'acroField', [[PDFAcroTerminal, 'PDFAcroTerminal']]);\n    assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n    this.acroField = acroField;\n    this.ref = ref;\n    this.doc = doc;\n  }\n  /**\n   * Get the fully qualified name of this field. For example:\n   * ```js\n   * const fields = form.getFields()\n   * fields.forEach(field => {\n   *   const name = field.getName()\n   *   console.log('Field name:', name)\n   * })\n   * ```\n   * Note that PDF fields are structured as a tree. Each field is the\n   * descendent of a series of ancestor nodes all the way up to the form node,\n   * which is always the root of the tree. Each node in the tree (except for\n   * the form node) has a partial name. Partial names can be composed of any\n   * unicode characters except a period (`.`). The fully qualified name of a\n   * field is composed of the partial names of all its ancestors joined\n   * with periods. This means that splitting the fully qualified name on\n   * periods and taking the last element of the resulting array will give you\n   * the partial name of a specific field.\n   * @returns The fully qualified name of this field.\n   */\n  PDFField.prototype.getName = function () {\n    var _a;\n    return (_a = this.acroField.getFullyQualifiedName()) !== null && _a !== void 0 ? _a : '';\n  };\n  /**\n   * Returns `true` if this field is read only. This means that PDF readers\n   * will not allow users to interact with the field or change its value. See\n   * [[PDFField.enableReadOnly]] and [[PDFField.disableReadOnly]].\n   * For example:\n   * ```js\n   * const field = form.getField('some.field')\n   * if (field.isReadOnly()) console.log('Read only is enabled')\n   * ```\n   * @returns Whether or not this is a read only field.\n   */\n  PDFField.prototype.isReadOnly = function () {\n    return this.acroField.hasFlag(AcroFieldFlags.ReadOnly);\n  };\n  /**\n   * Prevent PDF readers from allowing users to interact with this field or\n   * change its value. The field will not respond to mouse or keyboard input.\n   * For example:\n   * ```js\n   * const field = form.getField('some.field')\n   * field.enableReadOnly()\n   * ```\n   * Useful for fields whose values are computed, imported from a database, or\n   * prefilled by software before being displayed to the user.\n   */\n  PDFField.prototype.enableReadOnly = function () {\n    this.acroField.setFlagTo(AcroFieldFlags.ReadOnly, true);\n  };\n  /**\n   * Allow users to interact with this field and change its value in PDF\n   * readers via mouse and keyboard input. For example:\n   * ```js\n   * const field = form.getField('some.field')\n   * field.disableReadOnly()\n   * ```\n   */\n  PDFField.prototype.disableReadOnly = function () {\n    this.acroField.setFlagTo(AcroFieldFlags.ReadOnly, false);\n  };\n  /**\n   * Returns `true` if this field must have a value when the form is submitted.\n   * See [[PDFField.enableRequired]] and [[PDFField.disableRequired]].\n   * For example:\n   * ```js\n   * const field = form.getField('some.field')\n   * if (field.isRequired()) console.log('Field is required')\n   * ```\n   * @returns Whether or not this field is required.\n   */\n  PDFField.prototype.isRequired = function () {\n    return this.acroField.hasFlag(AcroFieldFlags.Required);\n  };\n  /**\n   * Require this field to have a value when the form is submitted.\n   * For example:\n   * ```js\n   * const field = form.getField('some.field')\n   * field.enableRequired()\n   * ```\n   */\n  PDFField.prototype.enableRequired = function () {\n    this.acroField.setFlagTo(AcroFieldFlags.Required, true);\n  };\n  /**\n   * Do not require this field to have a value when the form is submitted.\n   * For example:\n   * ```js\n   * const field = form.getField('some.field')\n   * field.disableRequired()\n   * ```\n   */\n  PDFField.prototype.disableRequired = function () {\n    this.acroField.setFlagTo(AcroFieldFlags.Required, false);\n  };\n  /**\n   * Returns `true` if this field's value should be exported when the form is\n   * submitted. See [[PDFField.enableExporting]] and\n   * [[PDFField.disableExporting]].\n   * For example:\n   * ```js\n   * const field = form.getField('some.field')\n   * if (field.isExported()) console.log('Exporting is enabled')\n   * ```\n   * @returns Whether or not this field's value should be exported.\n   */\n  PDFField.prototype.isExported = function () {\n    return !this.acroField.hasFlag(AcroFieldFlags.NoExport);\n  };\n  /**\n   * Indicate that this field's value should be exported when the form is\n   * submitted in a PDF reader. For example:\n   * ```js\n   * const field = form.getField('some.field')\n   * field.enableExporting()\n   * ```\n   */\n  PDFField.prototype.enableExporting = function () {\n    this.acroField.setFlagTo(AcroFieldFlags.NoExport, false);\n  };\n  /**\n   * Indicate that this field's value should **not** be exported when the form\n   * is submitted in a PDF reader. For example:\n   * ```js\n   * const field = form.getField('some.field')\n   * field.disableExporting()\n   * ```\n   */\n  PDFField.prototype.disableExporting = function () {\n    this.acroField.setFlagTo(AcroFieldFlags.NoExport, true);\n  };\n  /** @ignore */\n  PDFField.prototype.needsAppearancesUpdate = function () {\n    throw new MethodNotImplementedError(this.constructor.name, 'needsAppearancesUpdate');\n  };\n  /** @ignore */\n  PDFField.prototype.defaultUpdateAppearances = function (_font) {\n    throw new MethodNotImplementedError(this.constructor.name, 'defaultUpdateAppearances');\n  };\n  PDFField.prototype.markAsDirty = function () {\n    this.doc.getForm().markFieldAsDirty(this.ref);\n  };\n  PDFField.prototype.markAsClean = function () {\n    this.doc.getForm().markFieldAsClean(this.ref);\n  };\n  PDFField.prototype.isDirty = function () {\n    return this.doc.getForm().fieldIsDirty(this.ref);\n  };\n  PDFField.prototype.createWidget = function (options) {\n    var _a;\n    var textColor = options.textColor;\n    var backgroundColor = options.backgroundColor;\n    var borderColor = options.borderColor;\n    var borderWidth = options.borderWidth;\n    var degreesAngle = toDegrees(options.rotate);\n    var caption = options.caption;\n    var x = options.x;\n    var y = options.y;\n    var width = options.width + borderWidth;\n    var height = options.height + borderWidth;\n    var hidden = Boolean(options.hidden);\n    var pageRef = options.page;\n    assertMultiple(degreesAngle, 'degreesAngle', 90);\n    // Create a widget for this field\n    var widget = PDFWidgetAnnotation.create(this.doc.context, this.ref);\n    // Set widget properties\n    var rect = rotateRectangle({\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    }, borderWidth, degreesAngle);\n    widget.setRectangle(rect);\n    if (pageRef) widget.setP(pageRef);\n    var ac = widget.getOrCreateAppearanceCharacteristics();\n    if (backgroundColor) {\n      ac.setBackgroundColor(colorToComponents(backgroundColor));\n    }\n    ac.setRotation(degreesAngle);\n    if (caption) ac.setCaptions({\n      normal: caption\n    });\n    if (borderColor) ac.setBorderColor(colorToComponents(borderColor));\n    var bs = widget.getOrCreateBorderStyle();\n    if (borderWidth !== undefined) bs.setWidth(borderWidth);\n    widget.setFlagTo(AnnotationFlags.Print, true);\n    widget.setFlagTo(AnnotationFlags.Hidden, hidden);\n    widget.setFlagTo(AnnotationFlags.Invisible, false);\n    // Set acrofield properties\n    if (textColor) {\n      var da = (_a = this.acroField.getDefaultAppearance()) !== null && _a !== void 0 ? _a : '';\n      var newDa = da + '\\n' + setFillingColor(textColor).toString();\n      this.acroField.setDefaultAppearance(newDa);\n    }\n    return widget;\n  };\n  PDFField.prototype.updateWidgetAppearanceWithFont = function (widget, font, _a) {\n    var normal = _a.normal,\n      rollover = _a.rollover,\n      down = _a.down;\n    this.updateWidgetAppearances(widget, {\n      normal: this.createAppearanceStream(widget, normal, font),\n      rollover: rollover && this.createAppearanceStream(widget, rollover, font),\n      down: down && this.createAppearanceStream(widget, down, font)\n    });\n  };\n  PDFField.prototype.updateOnOffWidgetAppearance = function (widget, onValue, _a) {\n    var normal = _a.normal,\n      rollover = _a.rollover,\n      down = _a.down;\n    this.updateWidgetAppearances(widget, {\n      normal: this.createAppearanceDict(widget, normal, onValue),\n      rollover: rollover && this.createAppearanceDict(widget, rollover, onValue),\n      down: down && this.createAppearanceDict(widget, down, onValue)\n    });\n  };\n  PDFField.prototype.updateWidgetAppearances = function (widget, _a) {\n    var normal = _a.normal,\n      rollover = _a.rollover,\n      down = _a.down;\n    widget.setNormalAppearance(normal);\n    if (rollover) {\n      widget.setRolloverAppearance(rollover);\n    } else {\n      widget.removeRolloverAppearance();\n    }\n    if (down) {\n      widget.setDownAppearance(down);\n    } else {\n      widget.removeDownAppearance();\n    }\n  };\n  // // TODO: Do we need to do this...?\n  // private foo(font: PDFFont, dict: PDFDict) {\n  //   if (!dict.lookup(PDFName.of('DR'))) {\n  //     dict.set(PDFName.of('DR'), dict.context.obj({}));\n  //   }\n  //   const DR = dict.lookup(PDFName.of('DR'), PDFDict);\n  //   if (!DR.lookup(PDFName.of('Font'))) {\n  //     DR.set(PDFName.of('Font'), dict.context.obj({}));\n  //   }\n  //   const Font = DR.lookup(PDFName.of('Font'), PDFDict);\n  //   Font.set(PDFName.of(font.name), font.ref);\n  // }\n  PDFField.prototype.createAppearanceStream = function (widget, appearance, font) {\n    var _a;\n    var context = this.acroField.dict.context;\n    var _b = widget.getRectangle(),\n      width = _b.width,\n      height = _b.height;\n    // TODO: Do we need to do this...?\n    // if (font) {\n    //   this.foo(font, widget.dict);\n    //   this.foo(font, this.doc.getForm().acroForm.dict);\n    // }\n    // END TODO\n    var Resources = font && {\n      Font: (_a = {}, _a[font.name] = font.ref, _a)\n    };\n    var stream = context.formXObject(appearance, {\n      Resources: Resources,\n      BBox: context.obj([0, 0, width, height]),\n      Matrix: context.obj([1, 0, 0, 1, 0, 0])\n    });\n    var streamRef = context.register(stream);\n    return streamRef;\n  };\n  /**\n   * Create a FormXObject of the supplied image and add it to context.\n   * The FormXObject size is calculated based on the widget (including\n   * the alignment).\n   * @param widget The widget that should display the image.\n   * @param alignment The alignment of the image.\n   * @param image The image that should be displayed.\n   * @returns The ref for the FormXObject that was added to the context.\n   */\n  PDFField.prototype.createImageAppearanceStream = function (widget, image, alignment) {\n    // NOTE: This implementation doesn't handle image borders.\n    // NOTE: Acrobat seems to resize the image (maybe even skewing its aspect\n    //       ratio) to fit perfectly within the widget's rectangle. This method\n    //       does not currently do that. Should there be an option for that?\n    var _a;\n    var _b;\n    var context = this.acroField.dict.context;\n    var rectangle = widget.getRectangle();\n    var ap = widget.getAppearanceCharacteristics();\n    var bs = widget.getBorderStyle();\n    var borderWidth = (_b = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _b !== void 0 ? _b : 0;\n    var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n    var rotate = rotateInPlace(__assign(__assign({}, rectangle), {\n      rotation: rotation\n    }));\n    var adj = adjustDimsForRotation(rectangle, rotation);\n    var imageDims = image.scaleToFit(adj.width - borderWidth * 2, adj.height - borderWidth * 2);\n    // Support borders on images and maybe other properties\n    var options = {\n      x: borderWidth,\n      y: borderWidth,\n      width: imageDims.width,\n      height: imageDims.height,\n      //\n      rotate: degrees(0),\n      xSkew: degrees(0),\n      ySkew: degrees(0)\n    };\n    if (alignment === ImageAlignment.Center) {\n      options.x += (adj.width - borderWidth * 2) / 2 - imageDims.width / 2;\n      options.y += (adj.height - borderWidth * 2) / 2 - imageDims.height / 2;\n    } else if (alignment === ImageAlignment.Right) {\n      options.x = adj.width - borderWidth - imageDims.width;\n      options.y = adj.height - borderWidth - imageDims.height;\n    }\n    var imageName = this.doc.context.addRandomSuffix('Image', 10);\n    var appearance = __spreadArrays(rotate, drawImage(imageName, options));\n    ////////////\n    var Resources = {\n      XObject: (_a = {}, _a[imageName] = image.ref, _a)\n    };\n    var stream = context.formXObject(appearance, {\n      Resources: Resources,\n      BBox: context.obj([0, 0, rectangle.width, rectangle.height]),\n      Matrix: context.obj([1, 0, 0, 1, 0, 0])\n    });\n    return context.register(stream);\n  };\n  PDFField.prototype.createAppearanceDict = function (widget, appearance, onValue) {\n    var context = this.acroField.dict.context;\n    var onStreamRef = this.createAppearanceStream(widget, appearance.on);\n    var offStreamRef = this.createAppearanceStream(widget, appearance.off);\n    var appearanceDict = context.obj({});\n    appearanceDict.set(onValue, onStreamRef);\n    appearanceDict.set(PDFName.of('Off'), offStreamRef);\n    return appearanceDict;\n  };\n  return PDFField;\n}();\nexport default PDFField;","map":{"version":3,"sources":["../../../src/api/form/PDFField.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __spreadArrays } from \"tslib\";\nimport PDFDocument from \"../PDFDocument\";\nimport { colorToComponents, setFillingColor } from \"../colors\";\nimport { toDegrees, rotateRectangle, reduceRotation, adjustDimsForRotation, degrees, } from \"../rotations\";\nimport { PDFRef, PDFWidgetAnnotation, PDFName, MethodNotImplementedError, AcroFieldFlags, PDFAcroTerminal, AnnotationFlags, } from \"../../core\";\nimport { assertIs, assertMultiple, assertOrUndefined } from \"../../utils\";\nimport { ImageAlignment } from '../image';\nimport { drawImage, rotateInPlace } from '../operations';\nexport var assertFieldAppearanceOptions = function (options) {\n    assertOrUndefined(options === null || options === void 0 ? void 0 : options.x, 'options.x', ['number']);\n    assertOrUndefined(options === null || options === void 0 ? void 0 : options.y, 'options.y', ['number']);\n    assertOrUndefined(options === null || options === void 0 ? void 0 : options.width, 'options.width', ['number']);\n    assertOrUndefined(options === null || options === void 0 ? void 0 : options.height, 'options.height', ['number']);\n    assertOrUndefined(options === null || options === void 0 ? void 0 : options.textColor, 'options.textColor', [\n        [Object, 'Color'],\n    ]);\n    assertOrUndefined(options === null || options === void 0 ? void 0 : options.backgroundColor, 'options.backgroundColor', [\n        [Object, 'Color'],\n    ]);\n    assertOrUndefined(options === null || options === void 0 ? void 0 : options.borderColor, 'options.borderColor', [\n        [Object, 'Color'],\n    ]);\n    assertOrUndefined(options === null || options === void 0 ? void 0 : options.borderWidth, 'options.borderWidth', ['number']);\n    assertOrUndefined(options === null || options === void 0 ? void 0 : options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n};\n/**\n * Represents a field of a [[PDFForm]].\n *\n * This class is effectively abstract. All fields in a [[PDFForm]] will\n * actually be an instance of a subclass of this class.\n *\n * Note that each field in a PDF is represented by a single field object.\n * However, a given field object may be rendered at multiple locations within\n * the document (across one or more pages). The rendering of a field is\n * controlled by its widgets. Each widget causes its field to be displayed at a\n * particular location in the document.\n *\n * Most of the time each field in a PDF has only a single widget, and thus is\n * only rendered once. However, if a field is rendered multiple times, it will\n * have multiple widgets - one for each location it is rendered.\n *\n * This abstraction of field objects and widgets is defined in the PDF\n * specification and dictates how PDF files store fields and where they are\n * to be rendered.\n */\nvar PDFField = /** @class */ (function () {\n    function PDFField(acroField, ref, doc) {\n        assertIs(acroField, 'acroField', [[PDFAcroTerminal, 'PDFAcroTerminal']]);\n        assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n        assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n        this.acroField = acroField;\n        this.ref = ref;\n        this.doc = doc;\n    }\n    /**\n     * Get the fully qualified name of this field. For example:\n     * ```js\n     * const fields = form.getFields()\n     * fields.forEach(field => {\n     *   const name = field.getName()\n     *   console.log('Field name:', name)\n     * })\n     * ```\n     * Note that PDF fields are structured as a tree. Each field is the\n     * descendent of a series of ancestor nodes all the way up to the form node,\n     * which is always the root of the tree. Each node in the tree (except for\n     * the form node) has a partial name. Partial names can be composed of any\n     * unicode characters except a period (`.`). The fully qualified name of a\n     * field is composed of the partial names of all its ancestors joined\n     * with periods. This means that splitting the fully qualified name on\n     * periods and taking the last element of the resulting array will give you\n     * the partial name of a specific field.\n     * @returns The fully qualified name of this field.\n     */\n    PDFField.prototype.getName = function () {\n        var _a;\n        return (_a = this.acroField.getFullyQualifiedName()) !== null && _a !== void 0 ? _a : '';\n    };\n    /**\n     * Returns `true` if this field is read only. This means that PDF readers\n     * will not allow users to interact with the field or change its value. See\n     * [[PDFField.enableReadOnly]] and [[PDFField.disableReadOnly]].\n     * For example:\n     * ```js\n     * const field = form.getField('some.field')\n     * if (field.isReadOnly()) console.log('Read only is enabled')\n     * ```\n     * @returns Whether or not this is a read only field.\n     */\n    PDFField.prototype.isReadOnly = function () {\n        return this.acroField.hasFlag(AcroFieldFlags.ReadOnly);\n    };\n    /**\n     * Prevent PDF readers from allowing users to interact with this field or\n     * change its value. The field will not respond to mouse or keyboard input.\n     * For example:\n     * ```js\n     * const field = form.getField('some.field')\n     * field.enableReadOnly()\n     * ```\n     * Useful for fields whose values are computed, imported from a database, or\n     * prefilled by software before being displayed to the user.\n     */\n    PDFField.prototype.enableReadOnly = function () {\n        this.acroField.setFlagTo(AcroFieldFlags.ReadOnly, true);\n    };\n    /**\n     * Allow users to interact with this field and change its value in PDF\n     * readers via mouse and keyboard input. For example:\n     * ```js\n     * const field = form.getField('some.field')\n     * field.disableReadOnly()\n     * ```\n     */\n    PDFField.prototype.disableReadOnly = function () {\n        this.acroField.setFlagTo(AcroFieldFlags.ReadOnly, false);\n    };\n    /**\n     * Returns `true` if this field must have a value when the form is submitted.\n     * See [[PDFField.enableRequired]] and [[PDFField.disableRequired]].\n     * For example:\n     * ```js\n     * const field = form.getField('some.field')\n     * if (field.isRequired()) console.log('Field is required')\n     * ```\n     * @returns Whether or not this field is required.\n     */\n    PDFField.prototype.isRequired = function () {\n        return this.acroField.hasFlag(AcroFieldFlags.Required);\n    };\n    /**\n     * Require this field to have a value when the form is submitted.\n     * For example:\n     * ```js\n     * const field = form.getField('some.field')\n     * field.enableRequired()\n     * ```\n     */\n    PDFField.prototype.enableRequired = function () {\n        this.acroField.setFlagTo(AcroFieldFlags.Required, true);\n    };\n    /**\n     * Do not require this field to have a value when the form is submitted.\n     * For example:\n     * ```js\n     * const field = form.getField('some.field')\n     * field.disableRequired()\n     * ```\n     */\n    PDFField.prototype.disableRequired = function () {\n        this.acroField.setFlagTo(AcroFieldFlags.Required, false);\n    };\n    /**\n     * Returns `true` if this field's value should be exported when the form is\n     * submitted. See [[PDFField.enableExporting]] and\n     * [[PDFField.disableExporting]].\n     * For example:\n     * ```js\n     * const field = form.getField('some.field')\n     * if (field.isExported()) console.log('Exporting is enabled')\n     * ```\n     * @returns Whether or not this field's value should be exported.\n     */\n    PDFField.prototype.isExported = function () {\n        return !this.acroField.hasFlag(AcroFieldFlags.NoExport);\n    };\n    /**\n     * Indicate that this field's value should be exported when the form is\n     * submitted in a PDF reader. For example:\n     * ```js\n     * const field = form.getField('some.field')\n     * field.enableExporting()\n     * ```\n     */\n    PDFField.prototype.enableExporting = function () {\n        this.acroField.setFlagTo(AcroFieldFlags.NoExport, false);\n    };\n    /**\n     * Indicate that this field's value should **not** be exported when the form\n     * is submitted in a PDF reader. For example:\n     * ```js\n     * const field = form.getField('some.field')\n     * field.disableExporting()\n     * ```\n     */\n    PDFField.prototype.disableExporting = function () {\n        this.acroField.setFlagTo(AcroFieldFlags.NoExport, true);\n    };\n    /** @ignore */\n    PDFField.prototype.needsAppearancesUpdate = function () {\n        throw new MethodNotImplementedError(this.constructor.name, 'needsAppearancesUpdate');\n    };\n    /** @ignore */\n    PDFField.prototype.defaultUpdateAppearances = function (_font) {\n        throw new MethodNotImplementedError(this.constructor.name, 'defaultUpdateAppearances');\n    };\n    PDFField.prototype.markAsDirty = function () {\n        this.doc.getForm().markFieldAsDirty(this.ref);\n    };\n    PDFField.prototype.markAsClean = function () {\n        this.doc.getForm().markFieldAsClean(this.ref);\n    };\n    PDFField.prototype.isDirty = function () {\n        return this.doc.getForm().fieldIsDirty(this.ref);\n    };\n    PDFField.prototype.createWidget = function (options) {\n        var _a;\n        var textColor = options.textColor;\n        var backgroundColor = options.backgroundColor;\n        var borderColor = options.borderColor;\n        var borderWidth = options.borderWidth;\n        var degreesAngle = toDegrees(options.rotate);\n        var caption = options.caption;\n        var x = options.x;\n        var y = options.y;\n        var width = options.width + borderWidth;\n        var height = options.height + borderWidth;\n        var hidden = Boolean(options.hidden);\n        var pageRef = options.page;\n        assertMultiple(degreesAngle, 'degreesAngle', 90);\n        // Create a widget for this field\n        var widget = PDFWidgetAnnotation.create(this.doc.context, this.ref);\n        // Set widget properties\n        var rect = rotateRectangle({ x: x, y: y, width: width, height: height }, borderWidth, degreesAngle);\n        widget.setRectangle(rect);\n        if (pageRef)\n            widget.setP(pageRef);\n        var ac = widget.getOrCreateAppearanceCharacteristics();\n        if (backgroundColor) {\n            ac.setBackgroundColor(colorToComponents(backgroundColor));\n        }\n        ac.setRotation(degreesAngle);\n        if (caption)\n            ac.setCaptions({ normal: caption });\n        if (borderColor)\n            ac.setBorderColor(colorToComponents(borderColor));\n        var bs = widget.getOrCreateBorderStyle();\n        if (borderWidth !== undefined)\n            bs.setWidth(borderWidth);\n        widget.setFlagTo(AnnotationFlags.Print, true);\n        widget.setFlagTo(AnnotationFlags.Hidden, hidden);\n        widget.setFlagTo(AnnotationFlags.Invisible, false);\n        // Set acrofield properties\n        if (textColor) {\n            var da = (_a = this.acroField.getDefaultAppearance()) !== null && _a !== void 0 ? _a : '';\n            var newDa = da + '\\n' + setFillingColor(textColor).toString();\n            this.acroField.setDefaultAppearance(newDa);\n        }\n        return widget;\n    };\n    PDFField.prototype.updateWidgetAppearanceWithFont = function (widget, font, _a) {\n        var normal = _a.normal, rollover = _a.rollover, down = _a.down;\n        this.updateWidgetAppearances(widget, {\n            normal: this.createAppearanceStream(widget, normal, font),\n            rollover: rollover && this.createAppearanceStream(widget, rollover, font),\n            down: down && this.createAppearanceStream(widget, down, font),\n        });\n    };\n    PDFField.prototype.updateOnOffWidgetAppearance = function (widget, onValue, _a) {\n        var normal = _a.normal, rollover = _a.rollover, down = _a.down;\n        this.updateWidgetAppearances(widget, {\n            normal: this.createAppearanceDict(widget, normal, onValue),\n            rollover: rollover && this.createAppearanceDict(widget, rollover, onValue),\n            down: down && this.createAppearanceDict(widget, down, onValue),\n        });\n    };\n    PDFField.prototype.updateWidgetAppearances = function (widget, _a) {\n        var normal = _a.normal, rollover = _a.rollover, down = _a.down;\n        widget.setNormalAppearance(normal);\n        if (rollover) {\n            widget.setRolloverAppearance(rollover);\n        }\n        else {\n            widget.removeRolloverAppearance();\n        }\n        if (down) {\n            widget.setDownAppearance(down);\n        }\n        else {\n            widget.removeDownAppearance();\n        }\n    };\n    // // TODO: Do we need to do this...?\n    // private foo(font: PDFFont, dict: PDFDict) {\n    //   if (!dict.lookup(PDFName.of('DR'))) {\n    //     dict.set(PDFName.of('DR'), dict.context.obj({}));\n    //   }\n    //   const DR = dict.lookup(PDFName.of('DR'), PDFDict);\n    //   if (!DR.lookup(PDFName.of('Font'))) {\n    //     DR.set(PDFName.of('Font'), dict.context.obj({}));\n    //   }\n    //   const Font = DR.lookup(PDFName.of('Font'), PDFDict);\n    //   Font.set(PDFName.of(font.name), font.ref);\n    // }\n    PDFField.prototype.createAppearanceStream = function (widget, appearance, font) {\n        var _a;\n        var context = this.acroField.dict.context;\n        var _b = widget.getRectangle(), width = _b.width, height = _b.height;\n        // TODO: Do we need to do this...?\n        // if (font) {\n        //   this.foo(font, widget.dict);\n        //   this.foo(font, this.doc.getForm().acroForm.dict);\n        // }\n        // END TODO\n        var Resources = font && { Font: (_a = {}, _a[font.name] = font.ref, _a) };\n        var stream = context.formXObject(appearance, {\n            Resources: Resources,\n            BBox: context.obj([0, 0, width, height]),\n            Matrix: context.obj([1, 0, 0, 1, 0, 0]),\n        });\n        var streamRef = context.register(stream);\n        return streamRef;\n    };\n    /**\n     * Create a FormXObject of the supplied image and add it to context.\n     * The FormXObject size is calculated based on the widget (including\n     * the alignment).\n     * @param widget The widget that should display the image.\n     * @param alignment The alignment of the image.\n     * @param image The image that should be displayed.\n     * @returns The ref for the FormXObject that was added to the context.\n     */\n    PDFField.prototype.createImageAppearanceStream = function (widget, image, alignment) {\n        // NOTE: This implementation doesn't handle image borders.\n        // NOTE: Acrobat seems to resize the image (maybe even skewing its aspect\n        //       ratio) to fit perfectly within the widget's rectangle. This method\n        //       does not currently do that. Should there be an option for that?\n        var _a;\n        var _b;\n        var context = this.acroField.dict.context;\n        var rectangle = widget.getRectangle();\n        var ap = widget.getAppearanceCharacteristics();\n        var bs = widget.getBorderStyle();\n        var borderWidth = (_b = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _b !== void 0 ? _b : 0;\n        var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n        var rotate = rotateInPlace(__assign(__assign({}, rectangle), { rotation: rotation }));\n        var adj = adjustDimsForRotation(rectangle, rotation);\n        var imageDims = image.scaleToFit(adj.width - borderWidth * 2, adj.height - borderWidth * 2);\n        // Support borders on images and maybe other properties\n        var options = {\n            x: borderWidth,\n            y: borderWidth,\n            width: imageDims.width,\n            height: imageDims.height,\n            //\n            rotate: degrees(0),\n            xSkew: degrees(0),\n            ySkew: degrees(0),\n        };\n        if (alignment === ImageAlignment.Center) {\n            options.x += (adj.width - borderWidth * 2) / 2 - imageDims.width / 2;\n            options.y += (adj.height - borderWidth * 2) / 2 - imageDims.height / 2;\n        }\n        else if (alignment === ImageAlignment.Right) {\n            options.x = adj.width - borderWidth - imageDims.width;\n            options.y = adj.height - borderWidth - imageDims.height;\n        }\n        var imageName = this.doc.context.addRandomSuffix('Image', 10);\n        var appearance = __spreadArrays(rotate, drawImage(imageName, options));\n        ////////////\n        var Resources = { XObject: (_a = {}, _a[imageName] = image.ref, _a) };\n        var stream = context.formXObject(appearance, {\n            Resources: Resources,\n            BBox: context.obj([0, 0, rectangle.width, rectangle.height]),\n            Matrix: context.obj([1, 0, 0, 1, 0, 0]),\n        });\n        return context.register(stream);\n    };\n    PDFField.prototype.createAppearanceDict = function (widget, appearance, onValue) {\n        var context = this.acroField.dict.context;\n        var onStreamRef = this.createAppearanceStream(widget, appearance.on);\n        var offStreamRef = this.createAppearanceStream(widget, appearance.off);\n        var appearanceDict = context.obj({});\n        appearanceDict.set(onValue, onStreamRef);\n        appearanceDict.set(PDFName.of('Off'), offStreamRef);\n        return appearanceDict;\n    };\n    return PDFField;\n}());\nexport default PDFField;\n//# sourceMappingURL=PDFField.js.map"]},"metadata":{},"sourceType":"module"}