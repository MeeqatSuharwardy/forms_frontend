{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport PDFHeader from \"../document/PDFHeader\";\nimport PDFTrailer from \"../document/PDFTrailer\";\nimport PDFInvalidObject from \"../objects/PDFInvalidObject\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFNumber from \"../objects/PDFNumber\";\nimport PDFRef from \"../objects/PDFRef\";\nimport PDFStream from \"../objects/PDFStream\";\nimport PDFCrossRefStream from \"../structures/PDFCrossRefStream\";\nimport PDFObjectStream from \"../structures/PDFObjectStream\";\nimport PDFWriter from \"./PDFWriter\";\nimport { last, waitForTick } from \"../../utils\";\nvar PDFStreamWriter = /** @class */function (_super) {\n  __extends(PDFStreamWriter, _super);\n  function PDFStreamWriter(context, objectsPerTick, encodeStreams, objectsPerStream) {\n    var _this = _super.call(this, context, objectsPerTick) || this;\n    _this.encodeStreams = encodeStreams;\n    _this.objectsPerStream = objectsPerStream;\n    return _this;\n  }\n  PDFStreamWriter.prototype.computeBufferSize = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var objectNumber, header, size, xrefStream, uncompressedObjects, compressedObjects, objectStreamRefs, indirectObjects, idx, len, indirectObject, ref, object, shouldNotCompress, chunk, objectStreamRef, idx, len, chunk, ref, objectStream, xrefStreamRef, xrefOffset, trailer;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            objectNumber = this.context.largestObjectNumber + 1;\n            header = PDFHeader.forVersion(1, 7);\n            size = header.sizeInBytes() + 2;\n            xrefStream = PDFCrossRefStream.create(this.createTrailerDict(), this.encodeStreams);\n            uncompressedObjects = [];\n            compressedObjects = [];\n            objectStreamRefs = [];\n            indirectObjects = this.context.enumerateIndirectObjects();\n            idx = 0, len = indirectObjects.length;\n            _a.label = 1;\n          case 1:\n            if (!(idx < len)) return [3 /*break*/, 6];\n            indirectObject = indirectObjects[idx];\n            ref = indirectObject[0], object = indirectObject[1];\n            shouldNotCompress = ref === this.context.trailerInfo.Encrypt || object instanceof PDFStream || object instanceof PDFInvalidObject || ref.generationNumber !== 0;\n            if (!shouldNotCompress) return [3 /*break*/, 4];\n            uncompressedObjects.push(indirectObject);\n            xrefStream.addUncompressedEntry(ref, size);\n            size += this.computeIndirectObjectSize(indirectObject);\n            if (!this.shouldWaitForTick(1)) return [3 /*break*/, 3];\n            return [4 /*yield*/, waitForTick()];\n          case 2:\n            _a.sent();\n            _a.label = 3;\n          case 3:\n            return [3 /*break*/, 5];\n          case 4:\n            chunk = last(compressedObjects);\n            objectStreamRef = last(objectStreamRefs);\n            if (!chunk || chunk.length % this.objectsPerStream === 0) {\n              chunk = [];\n              compressedObjects.push(chunk);\n              objectStreamRef = PDFRef.of(objectNumber++);\n              objectStreamRefs.push(objectStreamRef);\n            }\n            xrefStream.addCompressedEntry(ref, objectStreamRef, chunk.length);\n            chunk.push(indirectObject);\n            _a.label = 5;\n          case 5:\n            idx++;\n            return [3 /*break*/, 1];\n          case 6:\n            idx = 0, len = compressedObjects.length;\n            _a.label = 7;\n          case 7:\n            if (!(idx < len)) return [3 /*break*/, 10];\n            chunk = compressedObjects[idx];\n            ref = objectStreamRefs[idx];\n            objectStream = PDFObjectStream.withContextAndObjects(this.context, chunk, this.encodeStreams);\n            xrefStream.addUncompressedEntry(ref, size);\n            size += this.computeIndirectObjectSize([ref, objectStream]);\n            uncompressedObjects.push([ref, objectStream]);\n            if (!this.shouldWaitForTick(chunk.length)) return [3 /*break*/, 9];\n            return [4 /*yield*/, waitForTick()];\n          case 8:\n            _a.sent();\n            _a.label = 9;\n          case 9:\n            idx++;\n            return [3 /*break*/, 7];\n          case 10:\n            xrefStreamRef = PDFRef.of(objectNumber++);\n            xrefStream.dict.set(PDFName.of('Size'), PDFNumber.of(objectNumber));\n            xrefStream.addUncompressedEntry(xrefStreamRef, size);\n            xrefOffset = size;\n            size += this.computeIndirectObjectSize([xrefStreamRef, xrefStream]);\n            uncompressedObjects.push([xrefStreamRef, xrefStream]);\n            trailer = PDFTrailer.forLastCrossRefSectionOffset(xrefOffset);\n            size += trailer.sizeInBytes();\n            return [2 /*return*/, {\n              size: size,\n              header: header,\n              indirectObjects: uncompressedObjects,\n              trailer: trailer\n            }];\n        }\n      });\n    });\n  };\n  PDFStreamWriter.forContext = function (context, objectsPerTick, encodeStreams, objectsPerStream) {\n    if (encodeStreams === void 0) {\n      encodeStreams = true;\n    }\n    if (objectsPerStream === void 0) {\n      objectsPerStream = 50;\n    }\n    return new PDFStreamWriter(context, objectsPerTick, encodeStreams, objectsPerStream);\n  };\n  return PDFStreamWriter;\n}(PDFWriter);\nexport default PDFStreamWriter;","map":{"version":3,"sources":["../../../src/core/writers/PDFStreamWriter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter, __extends, __generator } from \"tslib\";\nimport PDFHeader from \"../document/PDFHeader\";\nimport PDFTrailer from \"../document/PDFTrailer\";\nimport PDFInvalidObject from \"../objects/PDFInvalidObject\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFNumber from \"../objects/PDFNumber\";\nimport PDFRef from \"../objects/PDFRef\";\nimport PDFStream from \"../objects/PDFStream\";\nimport PDFCrossRefStream from \"../structures/PDFCrossRefStream\";\nimport PDFObjectStream from \"../structures/PDFObjectStream\";\nimport PDFWriter from \"./PDFWriter\";\nimport { last, waitForTick } from \"../../utils\";\nvar PDFStreamWriter = /** @class */ (function (_super) {\n    __extends(PDFStreamWriter, _super);\n    function PDFStreamWriter(context, objectsPerTick, encodeStreams, objectsPerStream) {\n        var _this = _super.call(this, context, objectsPerTick) || this;\n        _this.encodeStreams = encodeStreams;\n        _this.objectsPerStream = objectsPerStream;\n        return _this;\n    }\n    PDFStreamWriter.prototype.computeBufferSize = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var objectNumber, header, size, xrefStream, uncompressedObjects, compressedObjects, objectStreamRefs, indirectObjects, idx, len, indirectObject, ref, object, shouldNotCompress, chunk, objectStreamRef, idx, len, chunk, ref, objectStream, xrefStreamRef, xrefOffset, trailer;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        objectNumber = this.context.largestObjectNumber + 1;\n                        header = PDFHeader.forVersion(1, 7);\n                        size = header.sizeInBytes() + 2;\n                        xrefStream = PDFCrossRefStream.create(this.createTrailerDict(), this.encodeStreams);\n                        uncompressedObjects = [];\n                        compressedObjects = [];\n                        objectStreamRefs = [];\n                        indirectObjects = this.context.enumerateIndirectObjects();\n                        idx = 0, len = indirectObjects.length;\n                        _a.label = 1;\n                    case 1:\n                        if (!(idx < len)) return [3 /*break*/, 6];\n                        indirectObject = indirectObjects[idx];\n                        ref = indirectObject[0], object = indirectObject[1];\n                        shouldNotCompress = ref === this.context.trailerInfo.Encrypt ||\n                            object instanceof PDFStream ||\n                            object instanceof PDFInvalidObject ||\n                            ref.generationNumber !== 0;\n                        if (!shouldNotCompress) return [3 /*break*/, 4];\n                        uncompressedObjects.push(indirectObject);\n                        xrefStream.addUncompressedEntry(ref, size);\n                        size += this.computeIndirectObjectSize(indirectObject);\n                        if (!this.shouldWaitForTick(1)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, waitForTick()];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3: return [3 /*break*/, 5];\n                    case 4:\n                        chunk = last(compressedObjects);\n                        objectStreamRef = last(objectStreamRefs);\n                        if (!chunk || chunk.length % this.objectsPerStream === 0) {\n                            chunk = [];\n                            compressedObjects.push(chunk);\n                            objectStreamRef = PDFRef.of(objectNumber++);\n                            objectStreamRefs.push(objectStreamRef);\n                        }\n                        xrefStream.addCompressedEntry(ref, objectStreamRef, chunk.length);\n                        chunk.push(indirectObject);\n                        _a.label = 5;\n                    case 5:\n                        idx++;\n                        return [3 /*break*/, 1];\n                    case 6:\n                        idx = 0, len = compressedObjects.length;\n                        _a.label = 7;\n                    case 7:\n                        if (!(idx < len)) return [3 /*break*/, 10];\n                        chunk = compressedObjects[idx];\n                        ref = objectStreamRefs[idx];\n                        objectStream = PDFObjectStream.withContextAndObjects(this.context, chunk, this.encodeStreams);\n                        xrefStream.addUncompressedEntry(ref, size);\n                        size += this.computeIndirectObjectSize([ref, objectStream]);\n                        uncompressedObjects.push([ref, objectStream]);\n                        if (!this.shouldWaitForTick(chunk.length)) return [3 /*break*/, 9];\n                        return [4 /*yield*/, waitForTick()];\n                    case 8:\n                        _a.sent();\n                        _a.label = 9;\n                    case 9:\n                        idx++;\n                        return [3 /*break*/, 7];\n                    case 10:\n                        xrefStreamRef = PDFRef.of(objectNumber++);\n                        xrefStream.dict.set(PDFName.of('Size'), PDFNumber.of(objectNumber));\n                        xrefStream.addUncompressedEntry(xrefStreamRef, size);\n                        xrefOffset = size;\n                        size += this.computeIndirectObjectSize([xrefStreamRef, xrefStream]);\n                        uncompressedObjects.push([xrefStreamRef, xrefStream]);\n                        trailer = PDFTrailer.forLastCrossRefSectionOffset(xrefOffset);\n                        size += trailer.sizeInBytes();\n                        return [2 /*return*/, { size: size, header: header, indirectObjects: uncompressedObjects, trailer: trailer }];\n                }\n            });\n        });\n    };\n    PDFStreamWriter.forContext = function (context, objectsPerTick, encodeStreams, objectsPerStream) {\n        if (encodeStreams === void 0) { encodeStreams = true; }\n        if (objectsPerStream === void 0) { objectsPerStream = 50; }\n        return new PDFStreamWriter(context, objectsPerTick, encodeStreams, objectsPerStream);\n    };\n    return PDFStreamWriter;\n}(PDFWriter));\nexport default PDFStreamWriter;\n//# sourceMappingURL=PDFStreamWriter.js.map"]},"metadata":{},"sourceType":"module"}