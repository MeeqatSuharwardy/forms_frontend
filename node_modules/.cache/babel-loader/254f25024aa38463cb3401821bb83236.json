{"ast":null,"code":"import CharCodes from \"../syntax/CharCodes\";\nimport { charFromCode, copyStringIntoBuffer } from \"../../utils\";\nvar PDFHeader = /** @class */function () {\n  function PDFHeader(major, minor) {\n    this.major = String(major);\n    this.minor = String(minor);\n  }\n  PDFHeader.prototype.toString = function () {\n    var bc = charFromCode(129);\n    return \"%PDF-\" + this.major + \".\" + this.minor + \"\\n%\" + bc + bc + bc + bc;\n  };\n  PDFHeader.prototype.sizeInBytes = function () {\n    return 12 + this.major.length + this.minor.length;\n  };\n  PDFHeader.prototype.copyBytesInto = function (buffer, offset) {\n    var initialOffset = offset;\n    buffer[offset++] = CharCodes.Percent;\n    buffer[offset++] = CharCodes.P;\n    buffer[offset++] = CharCodes.D;\n    buffer[offset++] = CharCodes.F;\n    buffer[offset++] = CharCodes.Dash;\n    offset += copyStringIntoBuffer(this.major, buffer, offset);\n    buffer[offset++] = CharCodes.Period;\n    offset += copyStringIntoBuffer(this.minor, buffer, offset);\n    buffer[offset++] = CharCodes.Newline;\n    buffer[offset++] = CharCodes.Percent;\n    buffer[offset++] = 129;\n    buffer[offset++] = 129;\n    buffer[offset++] = 129;\n    buffer[offset++] = 129;\n    return offset - initialOffset;\n  };\n  PDFHeader.forVersion = function (major, minor) {\n    return new PDFHeader(major, minor);\n  };\n  return PDFHeader;\n}();\nexport default PDFHeader;","map":{"version":3,"sources":["../../../src/core/document/PDFHeader.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAA,qBAAA;AAChB,SAAS,YAAY,EAAE,oBAAoB,QAAE,aAAA;AAE7C,IAAA,SAAA,GAAA,aAAA,YAAA;EAOE,SAAA,SAAA,CAAoB,KAAa,EAAE,KAAa,EAAA;IAC9C,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;IAC1B,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;EAC5B;EAEA,SAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,YAAA;IACE,IAAM,EAAE,GAAG,YAAY,CAAC,GAAG,CAAC;IAC5B,OAAO,OAAA,GAAQ,IAAI,CAAC,KAAK,GAAA,GAAA,GAAI,IAAI,CAAC,KAAK,GAAA,KAAA,GAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAI;EAClE,CAAC;EAED,SAAA,CAAA,SAAA,CAAA,WAAW,GAAX,YAAA;IACE,OAAO,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM;EACnD,CAAC;EAED,SAAA,CAAA,SAAA,CAAA,aAAa,GAAb,UAAc,MAAkB,EAAE,MAAc,EAAA;IAC9C,IAAM,aAAa,GAAG,MAAM;IAE5B,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,SAAS,CAAC,OAAO;IACpC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC;IAC9B,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC;IAC9B,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC;IAC9B,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,SAAS,CAAC,IAAI;IAEjC,MAAM,IAAI,oBAAoB,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC;IAC1D,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM;IACnC,MAAM,IAAI,oBAAoB,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC;IAC1D,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,SAAS,CAAC,OAAO;IAEpC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,SAAS,CAAC,OAAO;IACpC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG;IACtB,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG;IACtB,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG;IACtB,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG;IAEtB,OAAO,MAAM,GAAG,aAAa;EAC/B,CAAC;EAzCM,SAAA,CAAA,UAAU,GAAG,UAAC,KAAa,EAAE,KAAa,EAAA;IAC/C,OAAA,IAAI,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC;EAA3B,CAA2B;EAyC/B,OAAA,SAAC;CAAA,CAAA,CAAA;AAED,eAAe,SAAS","sourceRoot":"","sourcesContent":["import CharCodes from \"../syntax/CharCodes\";\nimport { charFromCode, copyStringIntoBuffer } from \"../../utils\";\nvar PDFHeader = /** @class */ (function () {\n    function PDFHeader(major, minor) {\n        this.major = String(major);\n        this.minor = String(minor);\n    }\n    PDFHeader.prototype.toString = function () {\n        var bc = charFromCode(129);\n        return \"%PDF-\" + this.major + \".\" + this.minor + \"\\n%\" + bc + bc + bc + bc;\n    };\n    PDFHeader.prototype.sizeInBytes = function () {\n        return 12 + this.major.length + this.minor.length;\n    };\n    PDFHeader.prototype.copyBytesInto = function (buffer, offset) {\n        var initialOffset = offset;\n        buffer[offset++] = CharCodes.Percent;\n        buffer[offset++] = CharCodes.P;\n        buffer[offset++] = CharCodes.D;\n        buffer[offset++] = CharCodes.F;\n        buffer[offset++] = CharCodes.Dash;\n        offset += copyStringIntoBuffer(this.major, buffer, offset);\n        buffer[offset++] = CharCodes.Period;\n        offset += copyStringIntoBuffer(this.minor, buffer, offset);\n        buffer[offset++] = CharCodes.Newline;\n        buffer[offset++] = CharCodes.Percent;\n        buffer[offset++] = 129;\n        buffer[offset++] = 129;\n        buffer[offset++] = 129;\n        buffer[offset++] = 129;\n        return offset - initialOffset;\n    };\n    PDFHeader.forVersion = function (major, minor) {\n        return new PDFHeader(major, minor);\n    };\n    return PDFHeader;\n}());\nexport default PDFHeader;\n//# sourceMappingURL=PDFHeader.js.map"]},"metadata":{},"sourceType":"module"}