{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport PDFDocument from \"../PDFDocument\";\nimport PDFButton from \"./PDFButton\";\nimport PDFCheckBox from \"./PDFCheckBox\";\nimport PDFDropdown from \"./PDFDropdown\";\nimport PDFOptionList from \"./PDFOptionList\";\nimport PDFRadioGroup from \"./PDFRadioGroup\";\nimport PDFSignature from \"./PDFSignature\";\nimport PDFTextField from \"./PDFTextField\";\nimport { NoSuchFieldError, UnexpectedFieldTypeError, FieldAlreadyExistsError, InvalidFieldNamePartError } from \"../errors\";\nimport PDFFont from \"../PDFFont\";\nimport { StandardFonts } from \"../StandardFonts\";\nimport { rotateInPlace } from \"../operations\";\nimport { drawObject, popGraphicsState, pushGraphicsState, translate } from \"../operators\";\nimport { PDFAcroForm, PDFAcroCheckBox, PDFAcroComboBox, PDFAcroListBox, PDFAcroRadioButton, PDFAcroSignature, PDFAcroText, PDFAcroPushButton, PDFAcroNonTerminal, PDFDict, PDFRef, createPDFAcroFields, PDFName } from \"../../core\";\nimport { assertIs, Cache, assertOrUndefined } from \"../../utils\";\n/**\n * Represents the interactive form of a [[PDFDocument]].\n *\n * Interactive forms (sometimes called _AcroForms_) are collections of fields\n * designed to gather information from a user. A PDF document may contains any\n * number of fields that appear on various pages, all of which make up a single,\n * global interactive form spanning the entire document. This means that\n * instances of [[PDFDocument]] shall contain at most one [[PDFForm]].\n *\n * The fields of an interactive form are represented by [[PDFField]] instances.\n */\nvar PDFForm = /** @class */function () {\n  function PDFForm(acroForm, doc) {\n    var _this = this;\n    this.embedDefaultFont = function () {\n      return _this.doc.embedStandardFont(StandardFonts.Helvetica);\n    };\n    assertIs(acroForm, 'acroForm', [[PDFAcroForm, 'PDFAcroForm']]);\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n    this.acroForm = acroForm;\n    this.doc = doc;\n    this.dirtyFields = new Set();\n    this.defaultFontCache = Cache.populatedBy(this.embedDefaultFont);\n  }\n  /**\n   * Returns `true` if this [[PDFForm]] has XFA data. Most PDFs with form\n   * fields do not use XFA as it is not widely supported by PDF readers.\n   *\n   * > `pdf-lib` does not support creation, modification, or reading of XFA\n   * > fields.\n   *\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * if (form.hasXFA()) console.log('PDF has XFA data')\n   * ```\n   * @returns Whether or not this form has XFA data.\n   */\n  PDFForm.prototype.hasXFA = function () {\n    return this.acroForm.dict.has(PDFName.of('XFA'));\n  };\n  /**\n   * Disconnect the XFA data from this [[PDFForm]] (if any exists). This will\n   * force readers to fallback to standard fields if the [[PDFDocument]]\n   * contains any. For example:\n   *\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * form.deleteXFA()\n   * ```\n   */\n  PDFForm.prototype.deleteXFA = function () {\n    this.acroForm.dict.delete(PDFName.of('XFA'));\n  };\n  /**\n   * Get all fields contained in this [[PDFForm]]. For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const fields = form.getFields()\n   * fields.forEach(field => {\n   *   const type = field.constructor.name\n   *   const name = field.getName()\n   *   console.log(`${type}: ${name}`)\n   * })\n   * ```\n   * @returns An array of all fields in this form.\n   */\n  PDFForm.prototype.getFields = function () {\n    var allFields = this.acroForm.getAllFields();\n    var fields = [];\n    for (var idx = 0, len = allFields.length; idx < len; idx++) {\n      var _a = allFields[idx],\n        acroField = _a[0],\n        ref = _a[1];\n      var field = convertToPDFField(acroField, ref, this.doc);\n      if (field) fields.push(field);\n    }\n    return fields;\n  };\n  /**\n   * Get the field in this [[PDFForm]] with the given name. For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const field = form.getFieldMaybe('Page1.Foo.Bar[0]')\n   * if (field) console.log('Field exists!')\n   * ```\n   * @param name A fully qualified field name.\n   * @returns The field with the specified name, if one exists.\n   */\n  PDFForm.prototype.getFieldMaybe = function (name) {\n    assertIs(name, 'name', ['string']);\n    var fields = this.getFields();\n    for (var idx = 0, len = fields.length; idx < len; idx++) {\n      var field = fields[idx];\n      if (field.getName() === name) return field;\n    }\n    return undefined;\n  };\n  /**\n   * Get the field in this [[PDFForm]] with the given name. For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const field = form.getField('Page1.Foo.Bar[0]')\n   * ```\n   * If no field exists with the provided name, an error will be thrown.\n   * @param name A fully qualified field name.\n   * @returns The field with the specified name.\n   */\n  PDFForm.prototype.getField = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getFieldMaybe(name);\n    if (field) return field;\n    throw new NoSuchFieldError(name);\n  };\n  /**\n   * Get the button field in this [[PDFForm]] with the given name. For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const button = form.getButton('Page1.Foo.Button[0]')\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a button.\n   * @param name A fully qualified button name.\n   * @returns The button with the specified name.\n   */\n  PDFForm.prototype.getButton = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFButton) return field;\n    throw new UnexpectedFieldTypeError(name, PDFButton, field);\n  };\n  /**\n   * Get the check box field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const checkBox = form.getCheckBox('Page1.Foo.CheckBox[0]')\n   * checkBox.check()\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a check box.\n   * @param name A fully qualified check box name.\n   * @returns The check box with the specified name.\n   */\n  PDFForm.prototype.getCheckBox = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFCheckBox) return field;\n    throw new UnexpectedFieldTypeError(name, PDFCheckBox, field);\n  };\n  /**\n   * Get the dropdown field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const dropdown = form.getDropdown('Page1.Foo.Dropdown[0]')\n   * const options = dropdown.getOptions()\n   * dropdown.select(options[0])\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a dropdown.\n   * @param name A fully qualified dropdown name.\n   * @returns The dropdown with the specified name.\n   */\n  PDFForm.prototype.getDropdown = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFDropdown) return field;\n    throw new UnexpectedFieldTypeError(name, PDFDropdown, field);\n  };\n  /**\n   * Get the option list field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const optionList = form.getOptionList('Page1.Foo.OptionList[0]')\n   * const options = optionList.getOptions()\n   * optionList.select(options[0])\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not an option list.\n   * @param name A fully qualified option list name.\n   * @returns The option list with the specified name.\n   */\n  PDFForm.prototype.getOptionList = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFOptionList) return field;\n    throw new UnexpectedFieldTypeError(name, PDFOptionList, field);\n  };\n  /**\n   * Get the radio group field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const radioGroup = form.getRadioGroup('Page1.Foo.RadioGroup[0]')\n   * const options = radioGroup.getOptions()\n   * radioGroup.select(options[0])\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a radio group.\n   * @param name A fully qualified radio group name.\n   * @returns The radio group with the specified name.\n   */\n  PDFForm.prototype.getRadioGroup = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFRadioGroup) return field;\n    throw new UnexpectedFieldTypeError(name, PDFRadioGroup, field);\n  };\n  /**\n   * Get the signature field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const signature = form.getSignature('Page1.Foo.Signature[0]')\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a signature.\n   * @param name A fully qualified signature name.\n   * @returns The signature with the specified name.\n   */\n  PDFForm.prototype.getSignature = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFSignature) return field;\n    throw new UnexpectedFieldTypeError(name, PDFSignature, field);\n  };\n  /**\n   * Get the text field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const textField = form.getTextField('Page1.Foo.TextField[0]')\n   * textField.setText('Are you designed to act or to be acted upon?')\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a text field.\n   * @param name A fully qualified text field name.\n   * @returns The text field with the specified name.\n   */\n  PDFForm.prototype.getTextField = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFTextField) return field;\n    throw new UnexpectedFieldTypeError(name, PDFTextField, field);\n  };\n  /**\n   * Create a new button field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const button = form.createButton('cool.new.button')\n   *\n   * button.addToPage('Do Stuff', font, page)\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new button.\n   * @returns The new button field.\n   */\n  PDFForm.prototype.createButton = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var button = PDFAcroPushButton.create(this.doc.context);\n    button.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [button, button.ref], nameParts.terminal);\n    return PDFButton.of(button, button.ref, this.doc);\n  };\n  /**\n   * Create a new check box field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const checkBox = form.createCheckBox('cool.new.checkBox')\n   *\n   * checkBox.addToPage(page)\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new check box.\n   * @returns The new check box field.\n   */\n  PDFForm.prototype.createCheckBox = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var checkBox = PDFAcroCheckBox.create(this.doc.context);\n    checkBox.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [checkBox, checkBox.ref], nameParts.terminal);\n    return PDFCheckBox.of(checkBox, checkBox.ref, this.doc);\n  };\n  /**\n   * Create a new dropdown field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const dropdown = form.createDropdown('cool.new.dropdown')\n   *\n   * dropdown.addToPage(font, page)\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new dropdown.\n   * @returns The new dropdown field.\n   */\n  PDFForm.prototype.createDropdown = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var comboBox = PDFAcroComboBox.create(this.doc.context);\n    comboBox.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [comboBox, comboBox.ref], nameParts.terminal);\n    return PDFDropdown.of(comboBox, comboBox.ref, this.doc);\n  };\n  /**\n   * Create a new option list field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const optionList = form.createOptionList('cool.new.optionList')\n   *\n   * optionList.addToPage(font, page)\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new option list.\n   * @returns The new option list field.\n   */\n  PDFForm.prototype.createOptionList = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var listBox = PDFAcroListBox.create(this.doc.context);\n    listBox.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [listBox, listBox.ref], nameParts.terminal);\n    return PDFOptionList.of(listBox, listBox.ref, this.doc);\n  };\n  /**\n   * Create a new radio group field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const radioGroup = form.createRadioGroup('cool.new.radioGroup')\n   *\n   * radioGroup.addOptionToPage('is-dog', page, { y: 0 })\n   * radioGroup.addOptionToPage('is-cat', page, { y: 75 })\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new radio group.\n   * @returns The new radio group field.\n   */\n  PDFForm.prototype.createRadioGroup = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var radioButton = PDFAcroRadioButton.create(this.doc.context);\n    radioButton.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [radioButton, radioButton.ref], nameParts.terminal);\n    return PDFRadioGroup.of(radioButton, radioButton.ref, this.doc);\n  };\n  /**\n   * Create a new text field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const textField = form.createTextField('cool.new.textField')\n   *\n   * textField.addToPage(font, page)\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new radio group.\n   * @returns The new radio group field.\n   */\n  PDFForm.prototype.createTextField = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var text = PDFAcroText.create(this.doc.context);\n    text.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [text, text.ref], nameParts.terminal);\n    return PDFTextField.of(text, text.ref, this.doc);\n  };\n  /**\n   * Flatten all fields in this [[PDFForm]].\n   *\n   * Flattening a form field will take the current appearance for each of that\n   * field's widgets and make them part of their page's content stream. All form\n   * fields and annotations associated are then removed. Note that once a form\n   * has been flattened its fields can no longer be accessed or edited.\n   *\n   * This operation is often used after filling form fields to ensure a\n   * consistent appearance across different PDF readers and/or printers.\n   * Another common use case is to copy a template document with form fields\n   * into another document. In this scenario you would load the template\n   * document, fill its fields, flatten it, and then copy its pages into the\n   * recipient document - the filled fields will be copied over.\n   *\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm();\n   * form.flatten();\n   * ```\n   */\n  PDFForm.prototype.flatten = function (options) {\n    if (options === void 0) {\n      options = {\n        updateFieldAppearances: true\n      };\n    }\n    if (options.updateFieldAppearances) {\n      this.updateFieldAppearances();\n    }\n    var fields = this.getFields();\n    for (var i = 0, lenFields = fields.length; i < lenFields; i++) {\n      var field = fields[i];\n      var widgets = field.acroField.getWidgets();\n      for (var j = 0, lenWidgets = widgets.length; j < lenWidgets; j++) {\n        var widget = widgets[j];\n        var page = this.findWidgetPage(widget);\n        var widgetRef = this.findWidgetAppearanceRef(field, widget);\n        var xObjectKey = page.node.newXObject('FlatWidget', widgetRef);\n        var rectangle = widget.getRectangle();\n        var operators = __spreadArrays([pushGraphicsState(), translate(rectangle.x, rectangle.y)], rotateInPlace(__assign(__assign({}, rectangle), {\n          rotation: 0\n        })), [drawObject(xObjectKey), popGraphicsState()]).filter(Boolean);\n        page.pushOperators.apply(page, operators);\n      }\n      this.removeField(field);\n    }\n  };\n  /**\n   * Remove a field from this [[PDFForm]].\n   *\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm();\n   * const ageField = form.getFields().find(x => x.getName() === 'Age');\n   * form.removeField(ageField);\n   * ```\n   */\n  PDFForm.prototype.removeField = function (field) {\n    var widgets = field.acroField.getWidgets();\n    var pages = new Set();\n    for (var i = 0, len = widgets.length; i < len; i++) {\n      var widget = widgets[i];\n      var widgetRef = this.findWidgetAppearanceRef(field, widget);\n      var page = this.findWidgetPage(widget);\n      pages.add(page);\n      page.node.removeAnnot(widgetRef);\n    }\n    pages.forEach(function (page) {\n      return page.node.removeAnnot(field.ref);\n    });\n    this.acroForm.removeField(field.acroField);\n    var fieldKids = field.acroField.normalizedEntries().Kids;\n    var kidsCount = fieldKids.size();\n    for (var childIndex = 0; childIndex < kidsCount; childIndex++) {\n      var child = fieldKids.get(childIndex);\n      if (child instanceof PDFRef) {\n        this.doc.context.delete(child);\n      }\n    }\n    this.doc.context.delete(field.ref);\n  };\n  /**\n   * Update the appearance streams for all widgets of all fields in this\n   * [[PDFForm]]. Appearance streams will only be created for a widget if it\n   * does not have any existing appearance streams, or the field's value has\n   * changed (e.g. by calling [[PDFTextField.setText]] or\n   * [[PDFDropdown.select]]).\n   *\n   * For example:\n   * ```js\n   * const courier = await pdfDoc.embedFont(StandardFonts.Courier)\n   * const form = pdfDoc.getForm()\n   * form.updateFieldAppearances(courier)\n   * ```\n   *\n   * **IMPORTANT:** The default value for the `font` parameter is\n   * [[StandardFonts.Helvetica]]. Note that this is a WinAnsi font. This means\n   * that encoding errors will be thrown if any fields contain text with\n   * characters outside the WinAnsi character set (the latin alphabet).\n   *\n   * Embedding a custom font and passing that as the `font`\n   * parameter allows you to generate appearance streams with non WinAnsi\n   * characters (assuming your custom font supports them).\n   *\n   * > **NOTE:** The [[PDFDocument.save]] method will call this method to\n   * > update appearances automatically if a form was accessed via the\n   * > [[PDFDocument.getForm]] method prior to saving.\n   *\n   * @param font Optionally, the font to use when creating new appearances.\n   */\n  PDFForm.prototype.updateFieldAppearances = function (font) {\n    assertOrUndefined(font, 'font', [[PDFFont, 'PDFFont']]);\n    font = font !== null && font !== void 0 ? font : this.getDefaultFont();\n    var fields = this.getFields();\n    for (var idx = 0, len = fields.length; idx < len; idx++) {\n      var field = fields[idx];\n      if (field.needsAppearancesUpdate()) {\n        field.defaultUpdateAppearances(font);\n      }\n    }\n  };\n  /**\n   * Mark a field as dirty. This will cause its appearance streams to be\n   * updated by [[PDFForm.updateFieldAppearances]].\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const field = form.getField('foo.bar')\n   * form.markFieldAsDirty(field.ref)\n   * ```\n   * @param fieldRef The reference to the field that should be marked.\n   */\n  PDFForm.prototype.markFieldAsDirty = function (fieldRef) {\n    assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n    this.dirtyFields.add(fieldRef);\n  };\n  /**\n   * Mark a field as dirty. This will cause its appearance streams to not be\n   * updated by [[PDFForm.updateFieldAppearances]].\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const field = form.getField('foo.bar')\n   * form.markFieldAsClean(field.ref)\n   * ```\n   * @param fieldRef The reference to the field that should be marked.\n   */\n  PDFForm.prototype.markFieldAsClean = function (fieldRef) {\n    assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n    this.dirtyFields.delete(fieldRef);\n  };\n  /**\n   * Returns `true` is the specified field has been marked as dirty.\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const field = form.getField('foo.bar')\n   * if (form.fieldIsDirty(field.ref)) console.log('Field is dirty')\n   * ```\n   * @param fieldRef The reference to the field that should be checked.\n   * @returns Whether or not the specified field is dirty.\n   */\n  PDFForm.prototype.fieldIsDirty = function (fieldRef) {\n    assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n    return this.dirtyFields.has(fieldRef);\n  };\n  PDFForm.prototype.getDefaultFont = function () {\n    return this.defaultFontCache.access();\n  };\n  PDFForm.prototype.findWidgetPage = function (widget) {\n    var pageRef = widget.P();\n    var page = this.doc.getPages().find(function (x) {\n      return x.ref === pageRef;\n    });\n    if (page === undefined) {\n      var widgetRef = this.doc.context.getObjectRef(widget.dict);\n      if (widgetRef === undefined) {\n        throw new Error('Could not find PDFRef for PDFObject');\n      }\n      page = this.doc.findPageForAnnotationRef(widgetRef);\n      if (page === undefined) {\n        throw new Error(\"Could not find page for PDFRef \" + widgetRef);\n      }\n    }\n    return page;\n  };\n  PDFForm.prototype.findWidgetAppearanceRef = function (field, widget) {\n    var _a;\n    var refOrDict = widget.getNormalAppearance();\n    if (refOrDict instanceof PDFDict && (field instanceof PDFCheckBox || field instanceof PDFRadioGroup)) {\n      var value = field.acroField.getValue();\n      var ref = (_a = refOrDict.get(value)) !== null && _a !== void 0 ? _a : refOrDict.get(PDFName.of('Off'));\n      if (ref instanceof PDFRef) {\n        refOrDict = ref;\n      }\n    }\n    if (!(refOrDict instanceof PDFRef)) {\n      var name_1 = field.getName();\n      throw new Error(\"Failed to extract appearance ref for: \" + name_1);\n    }\n    return refOrDict;\n  };\n  PDFForm.prototype.findOrCreateNonTerminals = function (partialNames) {\n    var nonTerminal = [this.acroForm];\n    for (var idx = 0, len = partialNames.length; idx < len; idx++) {\n      var namePart = partialNames[idx];\n      if (!namePart) throw new InvalidFieldNamePartError(namePart);\n      var parent_1 = nonTerminal[0],\n        parentRef = nonTerminal[1];\n      var res = this.findNonTerminal(namePart, parent_1);\n      if (res) {\n        nonTerminal = res;\n      } else {\n        var node = PDFAcroNonTerminal.create(this.doc.context);\n        node.setPartialName(namePart);\n        node.setParent(parentRef);\n        var nodeRef = this.doc.context.register(node.dict);\n        parent_1.addField(nodeRef);\n        nonTerminal = [node, nodeRef];\n      }\n    }\n    return nonTerminal;\n  };\n  PDFForm.prototype.findNonTerminal = function (partialName, parent) {\n    var fields = parent instanceof PDFAcroForm ? this.acroForm.getFields() : createPDFAcroFields(parent.Kids());\n    for (var idx = 0, len = fields.length; idx < len; idx++) {\n      var _a = fields[idx],\n        field = _a[0],\n        ref = _a[1];\n      if (field.getPartialName() === partialName) {\n        if (field instanceof PDFAcroNonTerminal) return [field, ref];\n        throw new FieldAlreadyExistsError(partialName);\n      }\n    }\n    return undefined;\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.getForm]] method, which will create an\n   * > instance of [[PDFForm]] for you.\n   *\n   * Create an instance of [[PDFForm]] from an existing acroForm and embedder\n   *\n   * @param acroForm The underlying `PDFAcroForm` for this form.\n   * @param doc The document to which the form will belong.\n   */\n  PDFForm.of = function (acroForm, doc) {\n    return new PDFForm(acroForm, doc);\n  };\n  return PDFForm;\n}();\nexport default PDFForm;\nvar convertToPDFField = function (field, ref, doc) {\n  if (field instanceof PDFAcroPushButton) return PDFButton.of(field, ref, doc);\n  if (field instanceof PDFAcroCheckBox) return PDFCheckBox.of(field, ref, doc);\n  if (field instanceof PDFAcroComboBox) return PDFDropdown.of(field, ref, doc);\n  if (field instanceof PDFAcroListBox) return PDFOptionList.of(field, ref, doc);\n  if (field instanceof PDFAcroText) return PDFTextField.of(field, ref, doc);\n  if (field instanceof PDFAcroRadioButton) {\n    return PDFRadioGroup.of(field, ref, doc);\n  }\n  if (field instanceof PDFAcroSignature) {\n    return PDFSignature.of(field, ref, doc);\n  }\n  return undefined;\n};\nvar splitFieldName = function (fullyQualifiedName) {\n  if (fullyQualifiedName.length === 0) {\n    throw new Error('PDF field names must not be empty strings');\n  }\n  var parts = fullyQualifiedName.split('.');\n  for (var idx = 0, len = parts.length; idx < len; idx++) {\n    if (parts[idx] === '') {\n      throw new Error(\"Periods in PDF field names must be separated by at least one character: \\\"\" + fullyQualifiedName + \"\\\"\");\n    }\n  }\n  if (parts.length === 1) return {\n    nonTerminal: [],\n    terminal: parts[0]\n  };\n  return {\n    nonTerminal: parts.slice(0, parts.length - 1),\n    terminal: parts[parts.length - 1]\n  };\n};\nvar addFieldToParent = function (_a, _b, partialName) {\n  var parent = _a[0],\n    parentRef = _a[1];\n  var field = _b[0],\n    fieldRef = _b[1];\n  var entries = parent.normalizedEntries();\n  var fields = createPDFAcroFields('Kids' in entries ? entries.Kids : entries.Fields);\n  for (var idx = 0, len = fields.length; idx < len; idx++) {\n    if (fields[idx][0].getPartialName() === partialName) {\n      throw new FieldAlreadyExistsError(partialName);\n    }\n  }\n  parent.addField(fieldRef);\n  field.setParent(parentRef);\n};","map":{"version":3,"sources":["../../../src/api/form/PDFForm.ts"],"names":[],"mappings":";AAAA,OAAO,WAAW,MAAA,gBAAA;AAGlB,OAAO,SAAS,MAAA,aAAA;AAChB,OAAO,WAAW,MAAA,eAAA;AAClB,OAAO,WAAW,MAAA,eAAA;AAClB,OAAO,aAAa,MAAA,iBAAA;AACpB,OAAO,aAAa,MAAA,iBAAA;AACpB,OAAO,YAAY,MAAA,gBAAA;AACnB,OAAO,YAAY,MAAA,gBAAA;AACnB,SACE,gBAAgB,EAChB,wBAAwB,EACxB,uBAAuB,EACvB,yBAAyB,QAC1B,WAAA;AACD,OAAO,OAAO,MAAA,YAAA;AACd,SAAS,aAAa,QAAE,kBAAA;AACxB,SAAS,aAAa,QAAE,eAAA;AACxB,SACE,UAAU,EACV,gBAAgB,EAChB,iBAAiB,EACjB,SAAS,QACV,cAAA;AACD,SACE,WAAW,EAEX,eAAe,EACf,eAAe,EACf,cAAc,EACd,kBAAkB,EAClB,gBAAgB,EAChB,WAAW,EACX,iBAAiB,EACjB,kBAAkB,EAClB,OAAO,EAEP,MAAM,EACN,mBAAmB,EACnB,OAAO,QAER,YAAA;AACD,SAAS,QAAQ,EAAE,KAAK,EAAE,iBAAiB,QAAE,aAAA;AAM7C;;;;;;;;;;AAUG;AACH,IAAA,OAAA,GAAA,aAAA,YAAA;EAuBE,SAAA,OAAA,CAAoB,QAAqB,EAAE,GAAgB,EAAA;IAA3D,IAAA,KAAA,GAAA,IAAA;IAksBQ,IAAA,CAAA,gBAAgB,GAAG,YAAA;MACzB,OAAA,KAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,aAAa,CAAC,SAAS,CAAC;IAAnD,CAAmD;IAlsBnD,QAAQ,CAAC,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC,CAAC;IAC9D,QAAQ,CAAC,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC,CAAC;IAEpD,IAAI,CAAC,QAAQ,GAAG,QAAQ;IACxB,IAAI,CAAC,GAAG,GAAG,GAAG;IAEd,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,CAAA,CAAE;IAC5B,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC;EAClE;EAEA;;;;;;;;;;;;;AAaG;EACH,OAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACE,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;EAClD,CAAC;EAED;;;;;;;;;;AAUG;EACH,OAAA,CAAA,SAAA,CAAA,SAAS,GAAT,YAAA;IACE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;EAC9C,CAAC;EAED;;;;;;;;;;;;AAYG;EACH,OAAA,CAAA,SAAA,CAAA,SAAS,GAAT,YAAA;IACE,IAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAA,CAAE;IAE9C,IAAM,MAAM,GAAe,EAAE;IAC7B,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,SAAS,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE;MACpD,IAAA,EAAA,GAAmB,SAAS,CAAC,GAAG,CAAC;QAAhC,SAAS,GAAA,EAAA,CAAA,CAAA,CAAA;QAAE,GAAG,GAAA,EAAA,CAAA,CAAA,CAAkB;MACvC,IAAM,KAAK,GAAG,iBAAiB,CAAC,SAAS,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC;MACzD,IAAI,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IAC9B;IAED,OAAO,MAAM;EACf,CAAC;EAED;;;;;;;;;AASG;EACH,OAAA,CAAA,SAAA,CAAA,aAAa,GAAb,UAAc,IAAY,EAAA;IACxB,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,QAAQ,CAAC,CAAC;IAClC,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAA,CAAE;IAC/B,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE;MACvD,IAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC;MACzB,IAAI,KAAK,CAAC,OAAO,CAAA,CAAE,KAAK,IAAI,EAAE,OAAO,KAAK;IAC3C;IACD,OAAO,SAAS;EAClB,CAAC;EAED;;;;;;;;;AASG;EACH,OAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,UAAS,IAAY,EAAA;IACnB,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,QAAQ,CAAC,CAAC;IAClC,IAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;IACtC,IAAI,KAAK,EAAE,OAAO,KAAK;IACvB,MAAM,IAAI,gBAAgB,CAAC,IAAI,CAAC;EAClC,CAAC;EAED;;;;;;;;;;AAUG;EACH,OAAA,CAAA,SAAA,CAAA,SAAS,GAAT,UAAU,IAAY,EAAA;IACpB,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,QAAQ,CAAC,CAAC;IAClC,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;IACjC,IAAI,KAAK,YAAY,SAAS,EAAE,OAAO,KAAK;IAC5C,MAAM,IAAI,wBAAwB,CAAC,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC;EAC5D,CAAC;EAED;;;;;;;;;;;;AAYG;EACH,OAAA,CAAA,SAAA,CAAA,WAAW,GAAX,UAAY,IAAY,EAAA;IACtB,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,QAAQ,CAAC,CAAC;IAClC,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;IACjC,IAAI,KAAK,YAAY,WAAW,EAAE,OAAO,KAAK;IAC9C,MAAM,IAAI,wBAAwB,CAAC,IAAI,EAAE,WAAW,EAAE,KAAK,CAAC;EAC9D,CAAC;EAED;;;;;;;;;;;;;AAaG;EACH,OAAA,CAAA,SAAA,CAAA,WAAW,GAAX,UAAY,IAAY,EAAA;IACtB,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,QAAQ,CAAC,CAAC;IAClC,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;IACjC,IAAI,KAAK,YAAY,WAAW,EAAE,OAAO,KAAK;IAC9C,MAAM,IAAI,wBAAwB,CAAC,IAAI,EAAE,WAAW,EAAE,KAAK,CAAC;EAC9D,CAAC;EAED;;;;;;;;;;;;;AAaG;EACH,OAAA,CAAA,SAAA,CAAA,aAAa,GAAb,UAAc,IAAY,EAAA;IACxB,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,QAAQ,CAAC,CAAC;IAClC,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;IACjC,IAAI,KAAK,YAAY,aAAa,EAAE,OAAO,KAAK;IAChD,MAAM,IAAI,wBAAwB,CAAC,IAAI,EAAE,aAAa,EAAE,KAAK,CAAC;EAChE,CAAC;EAED;;;;;;;;;;;;;AAaG;EACH,OAAA,CAAA,SAAA,CAAA,aAAa,GAAb,UAAc,IAAY,EAAA;IACxB,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,QAAQ,CAAC,CAAC;IAClC,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;IACjC,IAAI,KAAK,YAAY,aAAa,EAAE,OAAO,KAAK;IAChD,MAAM,IAAI,wBAAwB,CAAC,IAAI,EAAE,aAAa,EAAE,KAAK,CAAC;EAChE,CAAC;EAED;;;;;;;;;;;AAWG;EACH,OAAA,CAAA,SAAA,CAAA,YAAY,GAAZ,UAAa,IAAY,EAAA;IACvB,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,QAAQ,CAAC,CAAC;IAClC,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;IACjC,IAAI,KAAK,YAAY,YAAY,EAAE,OAAO,KAAK;IAC/C,MAAM,IAAI,wBAAwB,CAAC,IAAI,EAAE,YAAY,EAAE,KAAK,CAAC;EAC/D,CAAC;EAED;;;;;;;;;;;;AAYG;EACH,OAAA,CAAA,SAAA,CAAA,YAAY,GAAZ,UAAa,IAAY,EAAA;IACvB,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,QAAQ,CAAC,CAAC;IAClC,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;IACjC,IAAI,KAAK,YAAY,YAAY,EAAE,OAAO,KAAK;IAC/C,MAAM,IAAI,wBAAwB,CAAC,IAAI,EAAE,YAAY,EAAE,KAAK,CAAC;EAC/D,CAAC;EAED;;;;;;;;;;;;;;;AAeG;EACH,OAAA,CAAA,SAAA,CAAA,YAAY,GAAZ,UAAa,IAAY,EAAA;IACvB,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,QAAQ,CAAC,CAAC;IAElC,IAAM,SAAS,GAAG,cAAc,CAAC,IAAI,CAAC;IACtC,IAAM,MAAM,GAAG,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,WAAW,CAAC;IAEnE,IAAM,MAAM,GAAG,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;IACzD,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC;IAEzC,gBAAgB,CAAC,MAAM,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,QAAQ,CAAC;IAElE,OAAO,SAAS,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC;EACnD,CAAC;EAED;;;;;;;;;;;;;;;AAeG;EACH,OAAA,CAAA,SAAA,CAAA,cAAc,GAAd,UAAe,IAAY,EAAA;IACzB,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,QAAQ,CAAC,CAAC;IAElC,IAAM,SAAS,GAAG,cAAc,CAAC,IAAI,CAAC;IACtC,IAAM,MAAM,GAAG,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,WAAW,CAAC;IAEnE,IAAM,QAAQ,GAAG,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;IACzD,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC;IAE3C,gBAAgB,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,QAAQ,CAAC;IAEtE,OAAO,WAAW,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC;EACzD,CAAC;EAED;;;;;;;;;;;;;;;AAeG;EACH,OAAA,CAAA,SAAA,CAAA,cAAc,GAAd,UAAe,IAAY,EAAA;IACzB,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,QAAQ,CAAC,CAAC;IAElC,IAAM,SAAS,GAAG,cAAc,CAAC,IAAI,CAAC;IACtC,IAAM,MAAM,GAAG,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,WAAW,CAAC;IAEnE,IAAM,QAAQ,GAAG,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;IACzD,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC;IAE3C,gBAAgB,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,QAAQ,CAAC;IAEtE,OAAO,WAAW,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC;EACzD,CAAC;EAED;;;;;;;;;;;;;;;AAeG;EACH,OAAA,CAAA,SAAA,CAAA,gBAAgB,GAAhB,UAAiB,IAAY,EAAA;IAC3B,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,QAAQ,CAAC,CAAC;IAElC,IAAM,SAAS,GAAG,cAAc,CAAC,IAAI,CAAC;IACtC,IAAM,MAAM,GAAG,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,WAAW,CAAC;IAEnE,IAAM,OAAO,GAAG,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;IACvD,OAAO,CAAC,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC;IAE1C,gBAAgB,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,QAAQ,CAAC;IAEpE,OAAO,aAAa,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC;EACzD,CAAC;EAED;;;;;;;;;;;;;;;;AAgBG;EACH,OAAA,CAAA,SAAA,CAAA,gBAAgB,GAAhB,UAAiB,IAAY,EAAA;IAC3B,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,QAAQ,CAAC,CAAC;IAClC,IAAM,SAAS,GAAG,cAAc,CAAC,IAAI,CAAC;IAEtC,IAAM,MAAM,GAAG,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,WAAW,CAAC;IAEnE,IAAM,WAAW,GAAG,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;IAC/D,WAAW,CAAC,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC;IAE9C,gBAAgB,CACd,MAAM,EACN,CAAC,WAAW,EAAE,WAAW,CAAC,GAAG,CAAC,EAC9B,SAAS,CAAC,QAAQ,CACnB;IAED,OAAO,aAAa,CAAC,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC;EACjE,CAAC;EAED;;;;;;;;;;;;;;;AAeG;EACH,OAAA,CAAA,SAAA,CAAA,eAAe,GAAf,UAAgB,IAAY,EAAA;IAC1B,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,QAAQ,CAAC,CAAC;IAClC,IAAM,SAAS,GAAG,cAAc,CAAC,IAAI,CAAC;IAEtC,IAAM,MAAM,GAAG,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,WAAW,CAAC;IAEnE,IAAM,IAAI,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;IACjD,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC;IAEvC,gBAAgB,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,QAAQ,CAAC;IAE9D,OAAO,YAAY,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC;EAClD,CAAC;EAED;;;;;;;;;;;;;;;;;;;;AAoBG;EACH,OAAA,CAAA,SAAA,CAAA,OAAO,GAAP,UAAQ,OAA0D,EAAA;IAA1D,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA;MAAA,OAAA,GAAA;QAA4B,sBAAsB,EAAE;MAAI,CAAE;IAAA;IAChE,IAAI,OAAO,CAAC,sBAAsB,EAAE;MAClC,IAAI,CAAC,sBAAsB,CAAA,CAAE;IAC9B;IAED,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAA,CAAE;IAE/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,SAAS,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;MAC7D,IAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC;MACvB,IAAM,OAAO,GAAG,KAAK,CAAC,SAAS,CAAC,UAAU,CAAA,CAAE;MAE5C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,UAAU,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;QAChE,IAAM,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC;QACzB,IAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;QACxC,IAAM,SAAS,GAAG,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,MAAM,CAAC;QAE7D,IAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,SAAS,CAAC;QAEhE,IAAM,SAAS,GAAG,MAAM,CAAC,YAAY,CAAA,CAAE;QACvC,IAAM,SAAS,GAAG,cAAA,CAAA,CAChB,iBAAiB,CAAA,CAAE,EACnB,SAAS,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,C,EAChC,aAAa,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAM,SAAS,CAAA,EAAA;UAAE,QAAQ,EAAE;QAAC,CAAA,CAAA,CAAG,EAAA,CAC/C,UAAU,CAAC,UAAU,CAAC,EACtB,gBAAgB,CAAA,CAAE,C,EAClB,MAAM,CAAC,OAAO,CAAkB;QAElC,IAAI,CAAC,aAAa,CAAA,KAAA,CAAlB,IAAI,EAAkB,SAAS,CAAA;MAChC;MAED,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;IACxB;EACH,CAAC;EAED;;;;;;;;;AASG;EACH,OAAA,CAAA,SAAA,CAAA,WAAW,GAAX,UAAY,KAAe,EAAA;IACzB,IAAM,OAAO,GAAG,KAAK,CAAC,SAAS,CAAC,UAAU,CAAA,CAAE;IAC5C,IAAM,KAAK,GAAiB,IAAI,GAAG,CAAA,CAAE;IAErC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;MAClD,IAAM,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC;MACzB,IAAM,SAAS,GAAG,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,MAAM,CAAC;MAE7D,IAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;MACxC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC;MAEf,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;IACjC;IAED,KAAK,CAAC,OAAO,CAAC,UAAC,IAAI,EAAA;MAAK,OAAA,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC;IAAhC,CAAgC,CAAC;IACzD,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC;IAC1C,IAAM,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,iBAAiB,CAAA,CAAE,CAAC,IAAI;IAC1D,IAAM,SAAS,GAAG,SAAS,CAAC,IAAI,CAAA,CAAE;IAClC,KAAK,IAAI,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,SAAS,EAAE,UAAU,EAAE,EAAE;MAC7D,IAAM,KAAK,GAAG,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC;MACvC,IAAI,KAAK,YAAY,MAAM,EAAE;QAC3B,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC;MAC/B;IACF;IACD,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC;EACpC,CAAC;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BG;EACH,OAAA,CAAA,SAAA,CAAA,sBAAsB,GAAtB,UAAuB,IAAc,EAAA;IACnC,iBAAiB,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC;IAEvD,IAAI,GAAG,IAAI,KAAA,IAAA,IAAJ,IAAI,KAAA,KAAA,CAAA,GAAJ,IAAI,GAAI,IAAI,CAAC,cAAc,CAAA,CAAE;IAEpC,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAA,CAAE;IAE/B,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE;MACvD,IAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC;MACzB,IAAI,KAAK,CAAC,sBAAsB,CAAA,CAAE,EAAE;QAClC,KAAK,CAAC,wBAAwB,CAAC,IAAI,CAAC;MACrC;IACF;EACH,CAAC;EAED;;;;;;;;;AASG;EACH,OAAA,CAAA,SAAA,CAAA,gBAAgB,GAAhB,UAAiB,QAAgB,EAAA;IAC/B,iBAAiB,CAAC,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;IAC7D,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC;EAChC,CAAC;EAED;;;;;;;;;AASG;EACH,OAAA,CAAA,SAAA,CAAA,gBAAgB,GAAhB,UAAiB,QAAgB,EAAA;IAC/B,iBAAiB,CAAC,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;IAC7D,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC;EACnC,CAAC;EAED;;;;;;;;;AASG;EACH,OAAA,CAAA,SAAA,CAAA,YAAY,GAAZ,UAAa,QAAgB,EAAA;IAC3B,iBAAiB,CAAC,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;IAC7D,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC;EACvC,CAAC;EAED,OAAA,CAAA,SAAA,CAAA,cAAc,GAAd,YAAA;IACE,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAA,CAAE;EACvC,CAAC;EAEO,OAAA,CAAA,SAAA,CAAA,cAAc,GAAtB,UAAuB,MAA2B,EAAA;IAChD,IAAM,OAAO,GAAG,MAAM,CAAC,CAAC,CAAA,CAAE;IAC1B,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAA,CAAE,CAAC,IAAI,CAAC,UAAC,CAAC,EAAA;MAAK,OAAA,CAAC,CAAC,GAAG,KAAK,OAAO;IAAjB,CAAiB,CAAC;IAC7D,IAAI,IAAI,KAAK,SAAS,EAAE;MACtB,IAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC;MAC5D,IAAI,SAAS,KAAK,SAAS,EAAE;QAC3B,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC;MACvD;MAED,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,wBAAwB,CAAC,SAAS,CAAC;MAEnD,IAAI,IAAI,KAAK,SAAS,EAAE;QACtB,MAAM,IAAI,KAAK,CAAC,iCAAA,GAAkC,SAAW,CAAC;MAC/D;IACF;IAED,OAAO,IAAI;EACb,CAAC;EAEO,OAAA,CAAA,SAAA,CAAA,uBAAuB,GAA/B,UACE,KAAe,EACf,MAA2B,EAAA;;IAE3B,IAAI,SAAS,GAAG,MAAM,CAAC,mBAAmB,CAAA,CAAE;IAE5C,IACE,SAAS,YAAY,OAAO,KAC3B,KAAK,YAAY,WAAW,IAAI,KAAK,YAAY,aAAa,CAAC,EAChE;MACA,IAAM,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAA,CAAE;MACxC,IAAM,GAAG,GAAA,CAAA,EAAA,GAAG,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;MAEpE,IAAI,GAAG,YAAY,MAAM,EAAE;QACzB,SAAS,GAAG,GAAG;MAChB;IACF;IAED,IAAI,EAAE,SAAS,YAAY,MAAM,CAAC,EAAE;MAClC,IAAM,MAAI,GAAG,KAAK,CAAC,OAAO,CAAA,CAAE;MAC5B,MAAM,IAAI,KAAK,CAAC,wCAAA,GAAyC,MAAM,CAAC;IACjE;IAED,OAAO,SAAS;EAClB,CAAC;EAEO,OAAA,CAAA,SAAA,CAAA,wBAAwB,GAAhC,UAAiC,YAAsB,EAAA;IACrD,IAAI,WAAW,GAAiD,CAC9D,IAAI,CAAC,QAAQ,CACd;IACD,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,YAAY,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE;MAC7D,IAAM,QAAQ,GAAG,YAAY,CAAC,GAAG,CAAC;MAClC,IAAI,CAAC,QAAQ,EAAE,MAAM,IAAI,yBAAyB,CAAC,QAAQ,CAAC;MACrD,IAAA,QAAM,GAAe,WAAW,CAAA,CAAA,CAA1B;QAAE,SAAS,GAAI,WAAW,CAAA,CAAA,CAAf;MACxB,IAAM,GAAG,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,QAAM,CAAC;MAElD,IAAI,GAAG,EAAE;QACP,WAAW,GAAG,GAAG;OAClB,MAAM;QACL,IAAM,IAAI,GAAG,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;QACxD,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC;QAC7B,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;QACzB,IAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;QACpD,QAAM,CAAC,QAAQ,CAAC,OAAO,CAAC;QACxB,WAAW,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC;MAC9B;IACF;IACD,OAAO,WAAW;EACpB,CAAC;EAEO,OAAA,CAAA,SAAA,CAAA,eAAe,GAAvB,UACE,WAAmB,EACnB,MAAwC,EAAA;IAExC,IAAM,MAAM,GACV,MAAM,YAAY,WAAW,GACzB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAA,CAAE,GACzB,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAA,CAAE,CAAC;IAExC,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE;MACjD,IAAA,EAAA,GAAe,MAAM,CAAC,GAAG,CAAC;QAAzB,KAAK,GAAA,EAAA,CAAA,CAAA,CAAA;QAAE,GAAG,GAAA,EAAA,CAAA,CAAA,CAAe;MAChC,IAAI,KAAK,CAAC,cAAc,CAAA,CAAE,KAAK,WAAW,EAAE;QAC1C,IAAI,KAAK,YAAY,kBAAkB,EAAE,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;QAC5D,MAAM,IAAI,uBAAuB,CAAC,WAAW,CAAC;MAC/C;IACF;IAED,OAAO,SAAS;EAClB,CAAC;EAttBD;;;;;;;;;AASG;EACI,OAAA,CAAA,EAAE,GAAG,UAAC,QAAqB,EAAE,GAAgB,EAAA;IAClD,OAAA,IAAI,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC;EAA1B,CAA0B;EA+sB9B,OAAA,OAAC;CAAA,CAAA,CAAA;eA3tBoB,OAAO;AA6tB5B,IAAM,iBAAiB,GAAG,SAAA,CACxB,KAAmB,EACnB,GAAW,EACX,GAAgB,EAAA;EAEhB,IAAI,KAAK,YAAY,iBAAiB,EAAE,OAAO,SAAS,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC;EAC5E,IAAI,KAAK,YAAY,eAAe,EAAE,OAAO,WAAW,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC;EAC5E,IAAI,KAAK,YAAY,eAAe,EAAE,OAAO,WAAW,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC;EAC5E,IAAI,KAAK,YAAY,cAAc,EAAE,OAAO,aAAa,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC;EAC7E,IAAI,KAAK,YAAY,WAAW,EAAE,OAAO,YAAY,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC;EACzE,IAAI,KAAK,YAAY,kBAAkB,EAAE;IACvC,OAAO,aAAa,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC;EACzC;EACD,IAAI,KAAK,YAAY,gBAAgB,EAAE;IACrC,OAAO,YAAY,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC;EACxC;EACD,OAAO,SAAS;AAClB,CAAC;AAED,IAAM,cAAc,GAAG,SAAA,CAAC,kBAA0B,EAAA;EAChD,IAAI,kBAAkB,CAAC,MAAM,KAAK,CAAC,EAAE;IACnC,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC;EAC7D;EAED,IAAM,KAAK,GAAG,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC;EAE3C,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,KAAK,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE;IACtD,IAAI,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE;MACrB,MAAM,IAAI,KAAK,CACb,4EAAA,GAA4E,kBAAkB,GAAA,IAAG,CAClG;IACF;EACF;EAED,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,OAAO;IAAE,WAAW,EAAE,EAAE;IAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;EAAC,CAAE;EAEtE,OAAO;IACL,WAAW,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;IAC7C,QAAQ,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC;GACjC;AACH,CAAC;AAED,IAAM,gBAAgB,GAAG,SAAA,CACvB,EAAiE,EACjE,EAAyC,EACzC,WAAmB,EAAA;MAFlB,MAAM,GAAA,EAAA,CAAA,CAAA,CAAA;IAAE,SAAS,GAAA,EAAA,CAAA,CAAA,CAAA;MACjB,KAAK,GAAA,EAAA,CAAA,CAAA,CAAA;IAAE,QAAQ,GAAA,EAAA,CAAA,CAAA,CAAA;EAGhB,IAAM,OAAO,GAAG,MAAM,CAAC,iBAAiB,CAAA,CAAE;EAC1C,IAAM,MAAM,GAAG,mBAAmB,CAChC,MAAM,IAAI,OAAO,GAAG,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,MAAM,CAClD;EACD,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE;IACvD,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,CAAA,CAAE,KAAK,WAAW,EAAE;MACnD,MAAM,IAAI,uBAAuB,CAAC,WAAW,CAAC;IAC/C;EACF;EACD,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;EACzB,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC;AAC5B,CAAC","sourceRoot":"","sourcesContent":["import { __assign, __spreadArrays } from \"tslib\";\nimport PDFDocument from \"../PDFDocument\";\nimport PDFButton from \"./PDFButton\";\nimport PDFCheckBox from \"./PDFCheckBox\";\nimport PDFDropdown from \"./PDFDropdown\";\nimport PDFOptionList from \"./PDFOptionList\";\nimport PDFRadioGroup from \"./PDFRadioGroup\";\nimport PDFSignature from \"./PDFSignature\";\nimport PDFTextField from \"./PDFTextField\";\nimport { NoSuchFieldError, UnexpectedFieldTypeError, FieldAlreadyExistsError, InvalidFieldNamePartError, } from \"../errors\";\nimport PDFFont from \"../PDFFont\";\nimport { StandardFonts } from \"../StandardFonts\";\nimport { rotateInPlace } from \"../operations\";\nimport { drawObject, popGraphicsState, pushGraphicsState, translate, } from \"../operators\";\nimport { PDFAcroForm, PDFAcroCheckBox, PDFAcroComboBox, PDFAcroListBox, PDFAcroRadioButton, PDFAcroSignature, PDFAcroText, PDFAcroPushButton, PDFAcroNonTerminal, PDFDict, PDFRef, createPDFAcroFields, PDFName, } from \"../../core\";\nimport { assertIs, Cache, assertOrUndefined } from \"../../utils\";\n/**\n * Represents the interactive form of a [[PDFDocument]].\n *\n * Interactive forms (sometimes called _AcroForms_) are collections of fields\n * designed to gather information from a user. A PDF document may contains any\n * number of fields that appear on various pages, all of which make up a single,\n * global interactive form spanning the entire document. This means that\n * instances of [[PDFDocument]] shall contain at most one [[PDFForm]].\n *\n * The fields of an interactive form are represented by [[PDFField]] instances.\n */\nvar PDFForm = /** @class */ (function () {\n    function PDFForm(acroForm, doc) {\n        var _this = this;\n        this.embedDefaultFont = function () {\n            return _this.doc.embedStandardFont(StandardFonts.Helvetica);\n        };\n        assertIs(acroForm, 'acroForm', [[PDFAcroForm, 'PDFAcroForm']]);\n        assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n        this.acroForm = acroForm;\n        this.doc = doc;\n        this.dirtyFields = new Set();\n        this.defaultFontCache = Cache.populatedBy(this.embedDefaultFont);\n    }\n    /**\n     * Returns `true` if this [[PDFForm]] has XFA data. Most PDFs with form\n     * fields do not use XFA as it is not widely supported by PDF readers.\n     *\n     * > `pdf-lib` does not support creation, modification, or reading of XFA\n     * > fields.\n     *\n     * For example:\n     * ```js\n     * const form = pdfDoc.getForm()\n     * if (form.hasXFA()) console.log('PDF has XFA data')\n     * ```\n     * @returns Whether or not this form has XFA data.\n     */\n    PDFForm.prototype.hasXFA = function () {\n        return this.acroForm.dict.has(PDFName.of('XFA'));\n    };\n    /**\n     * Disconnect the XFA data from this [[PDFForm]] (if any exists). This will\n     * force readers to fallback to standard fields if the [[PDFDocument]]\n     * contains any. For example:\n     *\n     * For example:\n     * ```js\n     * const form = pdfDoc.getForm()\n     * form.deleteXFA()\n     * ```\n     */\n    PDFForm.prototype.deleteXFA = function () {\n        this.acroForm.dict.delete(PDFName.of('XFA'));\n    };\n    /**\n     * Get all fields contained in this [[PDFForm]]. For example:\n     * ```js\n     * const form = pdfDoc.getForm()\n     * const fields = form.getFields()\n     * fields.forEach(field => {\n     *   const type = field.constructor.name\n     *   const name = field.getName()\n     *   console.log(`${type}: ${name}`)\n     * })\n     * ```\n     * @returns An array of all fields in this form.\n     */\n    PDFForm.prototype.getFields = function () {\n        var allFields = this.acroForm.getAllFields();\n        var fields = [];\n        for (var idx = 0, len = allFields.length; idx < len; idx++) {\n            var _a = allFields[idx], acroField = _a[0], ref = _a[1];\n            var field = convertToPDFField(acroField, ref, this.doc);\n            if (field)\n                fields.push(field);\n        }\n        return fields;\n    };\n    /**\n     * Get the field in this [[PDFForm]] with the given name. For example:\n     * ```js\n     * const form = pdfDoc.getForm()\n     * const field = form.getFieldMaybe('Page1.Foo.Bar[0]')\n     * if (field) console.log('Field exists!')\n     * ```\n     * @param name A fully qualified field name.\n     * @returns The field with the specified name, if one exists.\n     */\n    PDFForm.prototype.getFieldMaybe = function (name) {\n        assertIs(name, 'name', ['string']);\n        var fields = this.getFields();\n        for (var idx = 0, len = fields.length; idx < len; idx++) {\n            var field = fields[idx];\n            if (field.getName() === name)\n                return field;\n        }\n        return undefined;\n    };\n    /**\n     * Get the field in this [[PDFForm]] with the given name. For example:\n     * ```js\n     * const form = pdfDoc.getForm()\n     * const field = form.getField('Page1.Foo.Bar[0]')\n     * ```\n     * If no field exists with the provided name, an error will be thrown.\n     * @param name A fully qualified field name.\n     * @returns The field with the specified name.\n     */\n    PDFForm.prototype.getField = function (name) {\n        assertIs(name, 'name', ['string']);\n        var field = this.getFieldMaybe(name);\n        if (field)\n            return field;\n        throw new NoSuchFieldError(name);\n    };\n    /**\n     * Get the button field in this [[PDFForm]] with the given name. For example:\n     * ```js\n     * const form = pdfDoc.getForm()\n     * const button = form.getButton('Page1.Foo.Button[0]')\n     * ```\n     * An error will be thrown if no field exists with the provided name, or if\n     * the field exists but is not a button.\n     * @param name A fully qualified button name.\n     * @returns The button with the specified name.\n     */\n    PDFForm.prototype.getButton = function (name) {\n        assertIs(name, 'name', ['string']);\n        var field = this.getField(name);\n        if (field instanceof PDFButton)\n            return field;\n        throw new UnexpectedFieldTypeError(name, PDFButton, field);\n    };\n    /**\n     * Get the check box field in this [[PDFForm]] with the given name.\n     * For example:\n     * ```js\n     * const form = pdfDoc.getForm()\n     * const checkBox = form.getCheckBox('Page1.Foo.CheckBox[0]')\n     * checkBox.check()\n     * ```\n     * An error will be thrown if no field exists with the provided name, or if\n     * the field exists but is not a check box.\n     * @param name A fully qualified check box name.\n     * @returns The check box with the specified name.\n     */\n    PDFForm.prototype.getCheckBox = function (name) {\n        assertIs(name, 'name', ['string']);\n        var field = this.getField(name);\n        if (field instanceof PDFCheckBox)\n            return field;\n        throw new UnexpectedFieldTypeError(name, PDFCheckBox, field);\n    };\n    /**\n     * Get the dropdown field in this [[PDFForm]] with the given name.\n     * For example:\n     * ```js\n     * const form = pdfDoc.getForm()\n     * const dropdown = form.getDropdown('Page1.Foo.Dropdown[0]')\n     * const options = dropdown.getOptions()\n     * dropdown.select(options[0])\n     * ```\n     * An error will be thrown if no field exists with the provided name, or if\n     * the field exists but is not a dropdown.\n     * @param name A fully qualified dropdown name.\n     * @returns The dropdown with the specified name.\n     */\n    PDFForm.prototype.getDropdown = function (name) {\n        assertIs(name, 'name', ['string']);\n        var field = this.getField(name);\n        if (field instanceof PDFDropdown)\n            return field;\n        throw new UnexpectedFieldTypeError(name, PDFDropdown, field);\n    };\n    /**\n     * Get the option list field in this [[PDFForm]] with the given name.\n     * For example:\n     * ```js\n     * const form = pdfDoc.getForm()\n     * const optionList = form.getOptionList('Page1.Foo.OptionList[0]')\n     * const options = optionList.getOptions()\n     * optionList.select(options[0])\n     * ```\n     * An error will be thrown if no field exists with the provided name, or if\n     * the field exists but is not an option list.\n     * @param name A fully qualified option list name.\n     * @returns The option list with the specified name.\n     */\n    PDFForm.prototype.getOptionList = function (name) {\n        assertIs(name, 'name', ['string']);\n        var field = this.getField(name);\n        if (field instanceof PDFOptionList)\n            return field;\n        throw new UnexpectedFieldTypeError(name, PDFOptionList, field);\n    };\n    /**\n     * Get the radio group field in this [[PDFForm]] with the given name.\n     * For example:\n     * ```js\n     * const form = pdfDoc.getForm()\n     * const radioGroup = form.getRadioGroup('Page1.Foo.RadioGroup[0]')\n     * const options = radioGroup.getOptions()\n     * radioGroup.select(options[0])\n     * ```\n     * An error will be thrown if no field exists with the provided name, or if\n     * the field exists but is not a radio group.\n     * @param name A fully qualified radio group name.\n     * @returns The radio group with the specified name.\n     */\n    PDFForm.prototype.getRadioGroup = function (name) {\n        assertIs(name, 'name', ['string']);\n        var field = this.getField(name);\n        if (field instanceof PDFRadioGroup)\n            return field;\n        throw new UnexpectedFieldTypeError(name, PDFRadioGroup, field);\n    };\n    /**\n     * Get the signature field in this [[PDFForm]] with the given name.\n     * For example:\n     * ```js\n     * const form = pdfDoc.getForm()\n     * const signature = form.getSignature('Page1.Foo.Signature[0]')\n     * ```\n     * An error will be thrown if no field exists with the provided name, or if\n     * the field exists but is not a signature.\n     * @param name A fully qualified signature name.\n     * @returns The signature with the specified name.\n     */\n    PDFForm.prototype.getSignature = function (name) {\n        assertIs(name, 'name', ['string']);\n        var field = this.getField(name);\n        if (field instanceof PDFSignature)\n            return field;\n        throw new UnexpectedFieldTypeError(name, PDFSignature, field);\n    };\n    /**\n     * Get the text field in this [[PDFForm]] with the given name.\n     * For example:\n     * ```js\n     * const form = pdfDoc.getForm()\n     * const textField = form.getTextField('Page1.Foo.TextField[0]')\n     * textField.setText('Are you designed to act or to be acted upon?')\n     * ```\n     * An error will be thrown if no field exists with the provided name, or if\n     * the field exists but is not a text field.\n     * @param name A fully qualified text field name.\n     * @returns The text field with the specified name.\n     */\n    PDFForm.prototype.getTextField = function (name) {\n        assertIs(name, 'name', ['string']);\n        var field = this.getField(name);\n        if (field instanceof PDFTextField)\n            return field;\n        throw new UnexpectedFieldTypeError(name, PDFTextField, field);\n    };\n    /**\n     * Create a new button field in this [[PDFForm]] with the given name.\n     * For example:\n     * ```js\n     * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n     * const page = pdfDoc.addPage()\n     *\n     * const form = pdfDoc.getForm()\n     * const button = form.createButton('cool.new.button')\n     *\n     * button.addToPage('Do Stuff', font, page)\n     * ```\n     * An error will be thrown if a field already exists with the provided name.\n     * @param name The fully qualified name for the new button.\n     * @returns The new button field.\n     */\n    PDFForm.prototype.createButton = function (name) {\n        assertIs(name, 'name', ['string']);\n        var nameParts = splitFieldName(name);\n        var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n        var button = PDFAcroPushButton.create(this.doc.context);\n        button.setPartialName(nameParts.terminal);\n        addFieldToParent(parent, [button, button.ref], nameParts.terminal);\n        return PDFButton.of(button, button.ref, this.doc);\n    };\n    /**\n     * Create a new check box field in this [[PDFForm]] with the given name.\n     * For example:\n     * ```js\n     * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n     * const page = pdfDoc.addPage()\n     *\n     * const form = pdfDoc.getForm()\n     * const checkBox = form.createCheckBox('cool.new.checkBox')\n     *\n     * checkBox.addToPage(page)\n     * ```\n     * An error will be thrown if a field already exists with the provided name.\n     * @param name The fully qualified name for the new check box.\n     * @returns The new check box field.\n     */\n    PDFForm.prototype.createCheckBox = function (name) {\n        assertIs(name, 'name', ['string']);\n        var nameParts = splitFieldName(name);\n        var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n        var checkBox = PDFAcroCheckBox.create(this.doc.context);\n        checkBox.setPartialName(nameParts.terminal);\n        addFieldToParent(parent, [checkBox, checkBox.ref], nameParts.terminal);\n        return PDFCheckBox.of(checkBox, checkBox.ref, this.doc);\n    };\n    /**\n     * Create a new dropdown field in this [[PDFForm]] with the given name.\n     * For example:\n     * ```js\n     * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n     * const page = pdfDoc.addPage()\n     *\n     * const form = pdfDoc.getForm()\n     * const dropdown = form.createDropdown('cool.new.dropdown')\n     *\n     * dropdown.addToPage(font, page)\n     * ```\n     * An error will be thrown if a field already exists with the provided name.\n     * @param name The fully qualified name for the new dropdown.\n     * @returns The new dropdown field.\n     */\n    PDFForm.prototype.createDropdown = function (name) {\n        assertIs(name, 'name', ['string']);\n        var nameParts = splitFieldName(name);\n        var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n        var comboBox = PDFAcroComboBox.create(this.doc.context);\n        comboBox.setPartialName(nameParts.terminal);\n        addFieldToParent(parent, [comboBox, comboBox.ref], nameParts.terminal);\n        return PDFDropdown.of(comboBox, comboBox.ref, this.doc);\n    };\n    /**\n     * Create a new option list field in this [[PDFForm]] with the given name.\n     * For example:\n     * ```js\n     * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n     * const page = pdfDoc.addPage()\n     *\n     * const form = pdfDoc.getForm()\n     * const optionList = form.createOptionList('cool.new.optionList')\n     *\n     * optionList.addToPage(font, page)\n     * ```\n     * An error will be thrown if a field already exists with the provided name.\n     * @param name The fully qualified name for the new option list.\n     * @returns The new option list field.\n     */\n    PDFForm.prototype.createOptionList = function (name) {\n        assertIs(name, 'name', ['string']);\n        var nameParts = splitFieldName(name);\n        var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n        var listBox = PDFAcroListBox.create(this.doc.context);\n        listBox.setPartialName(nameParts.terminal);\n        addFieldToParent(parent, [listBox, listBox.ref], nameParts.terminal);\n        return PDFOptionList.of(listBox, listBox.ref, this.doc);\n    };\n    /**\n     * Create a new radio group field in this [[PDFForm]] with the given name.\n     * For example:\n     * ```js\n     * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n     * const page = pdfDoc.addPage()\n     *\n     * const form = pdfDoc.getForm()\n     * const radioGroup = form.createRadioGroup('cool.new.radioGroup')\n     *\n     * radioGroup.addOptionToPage('is-dog', page, { y: 0 })\n     * radioGroup.addOptionToPage('is-cat', page, { y: 75 })\n     * ```\n     * An error will be thrown if a field already exists with the provided name.\n     * @param name The fully qualified name for the new radio group.\n     * @returns The new radio group field.\n     */\n    PDFForm.prototype.createRadioGroup = function (name) {\n        assertIs(name, 'name', ['string']);\n        var nameParts = splitFieldName(name);\n        var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n        var radioButton = PDFAcroRadioButton.create(this.doc.context);\n        radioButton.setPartialName(nameParts.terminal);\n        addFieldToParent(parent, [radioButton, radioButton.ref], nameParts.terminal);\n        return PDFRadioGroup.of(radioButton, radioButton.ref, this.doc);\n    };\n    /**\n     * Create a new text field in this [[PDFForm]] with the given name.\n     * For example:\n     * ```js\n     * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n     * const page = pdfDoc.addPage()\n     *\n     * const form = pdfDoc.getForm()\n     * const textField = form.createTextField('cool.new.textField')\n     *\n     * textField.addToPage(font, page)\n     * ```\n     * An error will be thrown if a field already exists with the provided name.\n     * @param name The fully qualified name for the new radio group.\n     * @returns The new radio group field.\n     */\n    PDFForm.prototype.createTextField = function (name) {\n        assertIs(name, 'name', ['string']);\n        var nameParts = splitFieldName(name);\n        var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n        var text = PDFAcroText.create(this.doc.context);\n        text.setPartialName(nameParts.terminal);\n        addFieldToParent(parent, [text, text.ref], nameParts.terminal);\n        return PDFTextField.of(text, text.ref, this.doc);\n    };\n    /**\n     * Flatten all fields in this [[PDFForm]].\n     *\n     * Flattening a form field will take the current appearance for each of that\n     * field's widgets and make them part of their page's content stream. All form\n     * fields and annotations associated are then removed. Note that once a form\n     * has been flattened its fields can no longer be accessed or edited.\n     *\n     * This operation is often used after filling form fields to ensure a\n     * consistent appearance across different PDF readers and/or printers.\n     * Another common use case is to copy a template document with form fields\n     * into another document. In this scenario you would load the template\n     * document, fill its fields, flatten it, and then copy its pages into the\n     * recipient document - the filled fields will be copied over.\n     *\n     * For example:\n     * ```js\n     * const form = pdfDoc.getForm();\n     * form.flatten();\n     * ```\n     */\n    PDFForm.prototype.flatten = function (options) {\n        if (options === void 0) { options = { updateFieldAppearances: true }; }\n        if (options.updateFieldAppearances) {\n            this.updateFieldAppearances();\n        }\n        var fields = this.getFields();\n        for (var i = 0, lenFields = fields.length; i < lenFields; i++) {\n            var field = fields[i];\n            var widgets = field.acroField.getWidgets();\n            for (var j = 0, lenWidgets = widgets.length; j < lenWidgets; j++) {\n                var widget = widgets[j];\n                var page = this.findWidgetPage(widget);\n                var widgetRef = this.findWidgetAppearanceRef(field, widget);\n                var xObjectKey = page.node.newXObject('FlatWidget', widgetRef);\n                var rectangle = widget.getRectangle();\n                var operators = __spreadArrays([\n                    pushGraphicsState(),\n                    translate(rectangle.x, rectangle.y)\n                ], rotateInPlace(__assign(__assign({}, rectangle), { rotation: 0 })), [\n                    drawObject(xObjectKey),\n                    popGraphicsState(),\n                ]).filter(Boolean);\n                page.pushOperators.apply(page, operators);\n            }\n            this.removeField(field);\n        }\n    };\n    /**\n     * Remove a field from this [[PDFForm]].\n     *\n     * For example:\n     * ```js\n     * const form = pdfDoc.getForm();\n     * const ageField = form.getFields().find(x => x.getName() === 'Age');\n     * form.removeField(ageField);\n     * ```\n     */\n    PDFForm.prototype.removeField = function (field) {\n        var widgets = field.acroField.getWidgets();\n        var pages = new Set();\n        for (var i = 0, len = widgets.length; i < len; i++) {\n            var widget = widgets[i];\n            var widgetRef = this.findWidgetAppearanceRef(field, widget);\n            var page = this.findWidgetPage(widget);\n            pages.add(page);\n            page.node.removeAnnot(widgetRef);\n        }\n        pages.forEach(function (page) { return page.node.removeAnnot(field.ref); });\n        this.acroForm.removeField(field.acroField);\n        var fieldKids = field.acroField.normalizedEntries().Kids;\n        var kidsCount = fieldKids.size();\n        for (var childIndex = 0; childIndex < kidsCount; childIndex++) {\n            var child = fieldKids.get(childIndex);\n            if (child instanceof PDFRef) {\n                this.doc.context.delete(child);\n            }\n        }\n        this.doc.context.delete(field.ref);\n    };\n    /**\n     * Update the appearance streams for all widgets of all fields in this\n     * [[PDFForm]]. Appearance streams will only be created for a widget if it\n     * does not have any existing appearance streams, or the field's value has\n     * changed (e.g. by calling [[PDFTextField.setText]] or\n     * [[PDFDropdown.select]]).\n     *\n     * For example:\n     * ```js\n     * const courier = await pdfDoc.embedFont(StandardFonts.Courier)\n     * const form = pdfDoc.getForm()\n     * form.updateFieldAppearances(courier)\n     * ```\n     *\n     * **IMPORTANT:** The default value for the `font` parameter is\n     * [[StandardFonts.Helvetica]]. Note that this is a WinAnsi font. This means\n     * that encoding errors will be thrown if any fields contain text with\n     * characters outside the WinAnsi character set (the latin alphabet).\n     *\n     * Embedding a custom font and passing that as the `font`\n     * parameter allows you to generate appearance streams with non WinAnsi\n     * characters (assuming your custom font supports them).\n     *\n     * > **NOTE:** The [[PDFDocument.save]] method will call this method to\n     * > update appearances automatically if a form was accessed via the\n     * > [[PDFDocument.getForm]] method prior to saving.\n     *\n     * @param font Optionally, the font to use when creating new appearances.\n     */\n    PDFForm.prototype.updateFieldAppearances = function (font) {\n        assertOrUndefined(font, 'font', [[PDFFont, 'PDFFont']]);\n        font = font !== null && font !== void 0 ? font : this.getDefaultFont();\n        var fields = this.getFields();\n        for (var idx = 0, len = fields.length; idx < len; idx++) {\n            var field = fields[idx];\n            if (field.needsAppearancesUpdate()) {\n                field.defaultUpdateAppearances(font);\n            }\n        }\n    };\n    /**\n     * Mark a field as dirty. This will cause its appearance streams to be\n     * updated by [[PDFForm.updateFieldAppearances]].\n     * ```js\n     * const form = pdfDoc.getForm()\n     * const field = form.getField('foo.bar')\n     * form.markFieldAsDirty(field.ref)\n     * ```\n     * @param fieldRef The reference to the field that should be marked.\n     */\n    PDFForm.prototype.markFieldAsDirty = function (fieldRef) {\n        assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n        this.dirtyFields.add(fieldRef);\n    };\n    /**\n     * Mark a field as dirty. This will cause its appearance streams to not be\n     * updated by [[PDFForm.updateFieldAppearances]].\n     * ```js\n     * const form = pdfDoc.getForm()\n     * const field = form.getField('foo.bar')\n     * form.markFieldAsClean(field.ref)\n     * ```\n     * @param fieldRef The reference to the field that should be marked.\n     */\n    PDFForm.prototype.markFieldAsClean = function (fieldRef) {\n        assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n        this.dirtyFields.delete(fieldRef);\n    };\n    /**\n     * Returns `true` is the specified field has been marked as dirty.\n     * ```js\n     * const form = pdfDoc.getForm()\n     * const field = form.getField('foo.bar')\n     * if (form.fieldIsDirty(field.ref)) console.log('Field is dirty')\n     * ```\n     * @param fieldRef The reference to the field that should be checked.\n     * @returns Whether or not the specified field is dirty.\n     */\n    PDFForm.prototype.fieldIsDirty = function (fieldRef) {\n        assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n        return this.dirtyFields.has(fieldRef);\n    };\n    PDFForm.prototype.getDefaultFont = function () {\n        return this.defaultFontCache.access();\n    };\n    PDFForm.prototype.findWidgetPage = function (widget) {\n        var pageRef = widget.P();\n        var page = this.doc.getPages().find(function (x) { return x.ref === pageRef; });\n        if (page === undefined) {\n            var widgetRef = this.doc.context.getObjectRef(widget.dict);\n            if (widgetRef === undefined) {\n                throw new Error('Could not find PDFRef for PDFObject');\n            }\n            page = this.doc.findPageForAnnotationRef(widgetRef);\n            if (page === undefined) {\n                throw new Error(\"Could not find page for PDFRef \" + widgetRef);\n            }\n        }\n        return page;\n    };\n    PDFForm.prototype.findWidgetAppearanceRef = function (field, widget) {\n        var _a;\n        var refOrDict = widget.getNormalAppearance();\n        if (refOrDict instanceof PDFDict &&\n            (field instanceof PDFCheckBox || field instanceof PDFRadioGroup)) {\n            var value = field.acroField.getValue();\n            var ref = (_a = refOrDict.get(value)) !== null && _a !== void 0 ? _a : refOrDict.get(PDFName.of('Off'));\n            if (ref instanceof PDFRef) {\n                refOrDict = ref;\n            }\n        }\n        if (!(refOrDict instanceof PDFRef)) {\n            var name_1 = field.getName();\n            throw new Error(\"Failed to extract appearance ref for: \" + name_1);\n        }\n        return refOrDict;\n    };\n    PDFForm.prototype.findOrCreateNonTerminals = function (partialNames) {\n        var nonTerminal = [\n            this.acroForm,\n        ];\n        for (var idx = 0, len = partialNames.length; idx < len; idx++) {\n            var namePart = partialNames[idx];\n            if (!namePart)\n                throw new InvalidFieldNamePartError(namePart);\n            var parent_1 = nonTerminal[0], parentRef = nonTerminal[1];\n            var res = this.findNonTerminal(namePart, parent_1);\n            if (res) {\n                nonTerminal = res;\n            }\n            else {\n                var node = PDFAcroNonTerminal.create(this.doc.context);\n                node.setPartialName(namePart);\n                node.setParent(parentRef);\n                var nodeRef = this.doc.context.register(node.dict);\n                parent_1.addField(nodeRef);\n                nonTerminal = [node, nodeRef];\n            }\n        }\n        return nonTerminal;\n    };\n    PDFForm.prototype.findNonTerminal = function (partialName, parent) {\n        var fields = parent instanceof PDFAcroForm\n            ? this.acroForm.getFields()\n            : createPDFAcroFields(parent.Kids());\n        for (var idx = 0, len = fields.length; idx < len; idx++) {\n            var _a = fields[idx], field = _a[0], ref = _a[1];\n            if (field.getPartialName() === partialName) {\n                if (field instanceof PDFAcroNonTerminal)\n                    return [field, ref];\n                throw new FieldAlreadyExistsError(partialName);\n            }\n        }\n        return undefined;\n    };\n    /**\n     * > **NOTE:** You probably don't want to call this method directly. Instead,\n     * > consider using the [[PDFDocument.getForm]] method, which will create an\n     * > instance of [[PDFForm]] for you.\n     *\n     * Create an instance of [[PDFForm]] from an existing acroForm and embedder\n     *\n     * @param acroForm The underlying `PDFAcroForm` for this form.\n     * @param doc The document to which the form will belong.\n     */\n    PDFForm.of = function (acroForm, doc) {\n        return new PDFForm(acroForm, doc);\n    };\n    return PDFForm;\n}());\nexport default PDFForm;\nvar convertToPDFField = function (field, ref, doc) {\n    if (field instanceof PDFAcroPushButton)\n        return PDFButton.of(field, ref, doc);\n    if (field instanceof PDFAcroCheckBox)\n        return PDFCheckBox.of(field, ref, doc);\n    if (field instanceof PDFAcroComboBox)\n        return PDFDropdown.of(field, ref, doc);\n    if (field instanceof PDFAcroListBox)\n        return PDFOptionList.of(field, ref, doc);\n    if (field instanceof PDFAcroText)\n        return PDFTextField.of(field, ref, doc);\n    if (field instanceof PDFAcroRadioButton) {\n        return PDFRadioGroup.of(field, ref, doc);\n    }\n    if (field instanceof PDFAcroSignature) {\n        return PDFSignature.of(field, ref, doc);\n    }\n    return undefined;\n};\nvar splitFieldName = function (fullyQualifiedName) {\n    if (fullyQualifiedName.length === 0) {\n        throw new Error('PDF field names must not be empty strings');\n    }\n    var parts = fullyQualifiedName.split('.');\n    for (var idx = 0, len = parts.length; idx < len; idx++) {\n        if (parts[idx] === '') {\n            throw new Error(\"Periods in PDF field names must be separated by at least one character: \\\"\" + fullyQualifiedName + \"\\\"\");\n        }\n    }\n    if (parts.length === 1)\n        return { nonTerminal: [], terminal: parts[0] };\n    return {\n        nonTerminal: parts.slice(0, parts.length - 1),\n        terminal: parts[parts.length - 1],\n    };\n};\nvar addFieldToParent = function (_a, _b, partialName) {\n    var parent = _a[0], parentRef = _a[1];\n    var field = _b[0], fieldRef = _b[1];\n    var entries = parent.normalizedEntries();\n    var fields = createPDFAcroFields('Kids' in entries ? entries.Kids : entries.Fields);\n    for (var idx = 0, len = fields.length; idx < len; idx++) {\n        if (fields[idx][0].getPartialName() === partialName) {\n            throw new FieldAlreadyExistsError(partialName);\n        }\n    }\n    parent.addField(fieldRef);\n    field.setParent(parentRef);\n};\n//# sourceMappingURL=PDFForm.js.map"]},"metadata":{},"sourceType":"module"}