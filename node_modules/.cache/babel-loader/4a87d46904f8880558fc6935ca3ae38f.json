{"ast":null,"code":"import UPNG from '@pdf-lib/upng';\nvar getImageType = function (ctype) {\n  if (ctype === 0) return PngType.Greyscale;\n  if (ctype === 2) return PngType.Truecolour;\n  if (ctype === 3) return PngType.IndexedColour;\n  if (ctype === 4) return PngType.GreyscaleWithAlpha;\n  if (ctype === 6) return PngType.TruecolourWithAlpha;\n  throw new Error(\"Unknown color type: \" + ctype);\n};\nvar splitAlphaChannel = function (rgbaChannel) {\n  var pixelCount = Math.floor(rgbaChannel.length / 4);\n  var rgbChannel = new Uint8Array(pixelCount * 3);\n  var alphaChannel = new Uint8Array(pixelCount * 1);\n  var rgbaOffset = 0;\n  var rgbOffset = 0;\n  var alphaOffset = 0;\n  while (rgbaOffset < rgbaChannel.length) {\n    rgbChannel[rgbOffset++] = rgbaChannel[rgbaOffset++];\n    rgbChannel[rgbOffset++] = rgbaChannel[rgbaOffset++];\n    rgbChannel[rgbOffset++] = rgbaChannel[rgbaOffset++];\n    alphaChannel[alphaOffset++] = rgbaChannel[rgbaOffset++];\n  }\n  return {\n    rgbChannel: rgbChannel,\n    alphaChannel: alphaChannel\n  };\n};\nexport var PngType;\n(function (PngType) {\n  PngType[\"Greyscale\"] = \"Greyscale\";\n  PngType[\"Truecolour\"] = \"Truecolour\";\n  PngType[\"IndexedColour\"] = \"IndexedColour\";\n  PngType[\"GreyscaleWithAlpha\"] = \"GreyscaleWithAlpha\";\n  PngType[\"TruecolourWithAlpha\"] = \"TruecolourWithAlpha\";\n})(PngType || (PngType = {}));\nvar PNG = /** @class */function () {\n  function PNG(pngData) {\n    var upng = UPNG.decode(pngData);\n    var frames = UPNG.toRGBA8(upng);\n    if (frames.length > 1) throw new Error(\"Animated PNGs are not supported\");\n    var frame = new Uint8Array(frames[0]);\n    var _a = splitAlphaChannel(frame),\n      rgbChannel = _a.rgbChannel,\n      alphaChannel = _a.alphaChannel;\n    this.rgbChannel = rgbChannel;\n    var hasAlphaValues = alphaChannel.some(function (a) {\n      return a < 255;\n    });\n    if (hasAlphaValues) this.alphaChannel = alphaChannel;\n    this.type = getImageType(upng.ctype);\n    this.width = upng.width;\n    this.height = upng.height;\n    this.bitsPerComponent = 8;\n  }\n  PNG.load = function (pngData) {\n    return new PNG(pngData);\n  };\n  return PNG;\n}();\nexport { PNG };","map":{"version":3,"sources":["../../src/utils/png.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import UPNG from '@pdf-lib/upng';\nvar getImageType = function (ctype) {\n    if (ctype === 0)\n        return PngType.Greyscale;\n    if (ctype === 2)\n        return PngType.Truecolour;\n    if (ctype === 3)\n        return PngType.IndexedColour;\n    if (ctype === 4)\n        return PngType.GreyscaleWithAlpha;\n    if (ctype === 6)\n        return PngType.TruecolourWithAlpha;\n    throw new Error(\"Unknown color type: \" + ctype);\n};\nvar splitAlphaChannel = function (rgbaChannel) {\n    var pixelCount = Math.floor(rgbaChannel.length / 4);\n    var rgbChannel = new Uint8Array(pixelCount * 3);\n    var alphaChannel = new Uint8Array(pixelCount * 1);\n    var rgbaOffset = 0;\n    var rgbOffset = 0;\n    var alphaOffset = 0;\n    while (rgbaOffset < rgbaChannel.length) {\n        rgbChannel[rgbOffset++] = rgbaChannel[rgbaOffset++];\n        rgbChannel[rgbOffset++] = rgbaChannel[rgbaOffset++];\n        rgbChannel[rgbOffset++] = rgbaChannel[rgbaOffset++];\n        alphaChannel[alphaOffset++] = rgbaChannel[rgbaOffset++];\n    }\n    return { rgbChannel: rgbChannel, alphaChannel: alphaChannel };\n};\nexport var PngType;\n(function (PngType) {\n    PngType[\"Greyscale\"] = \"Greyscale\";\n    PngType[\"Truecolour\"] = \"Truecolour\";\n    PngType[\"IndexedColour\"] = \"IndexedColour\";\n    PngType[\"GreyscaleWithAlpha\"] = \"GreyscaleWithAlpha\";\n    PngType[\"TruecolourWithAlpha\"] = \"TruecolourWithAlpha\";\n})(PngType || (PngType = {}));\nvar PNG = /** @class */ (function () {\n    function PNG(pngData) {\n        var upng = UPNG.decode(pngData);\n        var frames = UPNG.toRGBA8(upng);\n        if (frames.length > 1)\n            throw new Error(\"Animated PNGs are not supported\");\n        var frame = new Uint8Array(frames[0]);\n        var _a = splitAlphaChannel(frame), rgbChannel = _a.rgbChannel, alphaChannel = _a.alphaChannel;\n        this.rgbChannel = rgbChannel;\n        var hasAlphaValues = alphaChannel.some(function (a) { return a < 255; });\n        if (hasAlphaValues)\n            this.alphaChannel = alphaChannel;\n        this.type = getImageType(upng.ctype);\n        this.width = upng.width;\n        this.height = upng.height;\n        this.bitsPerComponent = 8;\n    }\n    PNG.load = function (pngData) { return new PNG(pngData); };\n    return PNG;\n}());\nexport { PNG };\n//# sourceMappingURL=png.js.map"]},"metadata":{},"sourceType":"module"}