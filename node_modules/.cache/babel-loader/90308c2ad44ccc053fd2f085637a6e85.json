{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport PDFString from \"../objects/PDFString\";\nimport PDFHexString from \"../objects/PDFHexString\";\n/**\n * From the PDF-A3 specification, section **3.1. Requirements - General**.\n * See:\n * * https://www.pdfa.org/wp-content/uploads/2018/10/PDF20_AN002-AF.pdf\n */\nexport var AFRelationship;\n(function (AFRelationship) {\n  AFRelationship[\"Source\"] = \"Source\";\n  AFRelationship[\"Data\"] = \"Data\";\n  AFRelationship[\"Alternative\"] = \"Alternative\";\n  AFRelationship[\"Supplement\"] = \"Supplement\";\n  AFRelationship[\"EncryptedPayload\"] = \"EncryptedPayload\";\n  AFRelationship[\"FormData\"] = \"EncryptedPayload\";\n  AFRelationship[\"Schema\"] = \"Schema\";\n  AFRelationship[\"Unspecified\"] = \"Unspecified\";\n})(AFRelationship || (AFRelationship = {}));\nvar FileEmbedder = /** @class */function () {\n  function FileEmbedder(fileData, fileName, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this.fileData = fileData;\n    this.fileName = fileName;\n    this.options = options;\n  }\n  FileEmbedder.for = function (bytes, fileName, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    return new FileEmbedder(bytes, fileName, options);\n  };\n  FileEmbedder.prototype.embedIntoContext = function (context, ref) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, mimeType, description, creationDate, modificationDate, afRelationship, embeddedFileStream, embeddedFileStreamRef, fileSpecDict;\n      return __generator(this, function (_b) {\n        _a = this.options, mimeType = _a.mimeType, description = _a.description, creationDate = _a.creationDate, modificationDate = _a.modificationDate, afRelationship = _a.afRelationship;\n        embeddedFileStream = context.flateStream(this.fileData, {\n          Type: 'EmbeddedFile',\n          Subtype: mimeType !== null && mimeType !== void 0 ? mimeType : undefined,\n          Params: {\n            Size: this.fileData.length,\n            CreationDate: creationDate ? PDFString.fromDate(creationDate) : undefined,\n            ModDate: modificationDate ? PDFString.fromDate(modificationDate) : undefined\n          }\n        });\n        embeddedFileStreamRef = context.register(embeddedFileStream);\n        fileSpecDict = context.obj({\n          Type: 'Filespec',\n          F: PDFString.of(this.fileName),\n          UF: PDFHexString.fromText(this.fileName),\n          EF: {\n            F: embeddedFileStreamRef\n          },\n          Desc: description ? PDFHexString.fromText(description) : undefined,\n          AFRelationship: afRelationship !== null && afRelationship !== void 0 ? afRelationship : undefined\n        });\n        if (ref) {\n          context.assign(ref, fileSpecDict);\n          return [2 /*return*/, ref];\n        } else {\n          return [2 /*return*/, context.register(fileSpecDict)];\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n  return FileEmbedder;\n}();\nexport default FileEmbedder;","map":{"version":3,"sources":["../../../src/core/embedders/FileEmbedder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport PDFString from \"../objects/PDFString\";\nimport PDFHexString from \"../objects/PDFHexString\";\n/**\n * From the PDF-A3 specification, section **3.1. Requirements - General**.\n * See:\n * * https://www.pdfa.org/wp-content/uploads/2018/10/PDF20_AN002-AF.pdf\n */\nexport var AFRelationship;\n(function (AFRelationship) {\n    AFRelationship[\"Source\"] = \"Source\";\n    AFRelationship[\"Data\"] = \"Data\";\n    AFRelationship[\"Alternative\"] = \"Alternative\";\n    AFRelationship[\"Supplement\"] = \"Supplement\";\n    AFRelationship[\"EncryptedPayload\"] = \"EncryptedPayload\";\n    AFRelationship[\"FormData\"] = \"EncryptedPayload\";\n    AFRelationship[\"Schema\"] = \"Schema\";\n    AFRelationship[\"Unspecified\"] = \"Unspecified\";\n})(AFRelationship || (AFRelationship = {}));\nvar FileEmbedder = /** @class */ (function () {\n    function FileEmbedder(fileData, fileName, options) {\n        if (options === void 0) { options = {}; }\n        this.fileData = fileData;\n        this.fileName = fileName;\n        this.options = options;\n    }\n    FileEmbedder.for = function (bytes, fileName, options) {\n        if (options === void 0) { options = {}; }\n        return new FileEmbedder(bytes, fileName, options);\n    };\n    FileEmbedder.prototype.embedIntoContext = function (context, ref) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, mimeType, description, creationDate, modificationDate, afRelationship, embeddedFileStream, embeddedFileStreamRef, fileSpecDict;\n            return __generator(this, function (_b) {\n                _a = this.options, mimeType = _a.mimeType, description = _a.description, creationDate = _a.creationDate, modificationDate = _a.modificationDate, afRelationship = _a.afRelationship;\n                embeddedFileStream = context.flateStream(this.fileData, {\n                    Type: 'EmbeddedFile',\n                    Subtype: mimeType !== null && mimeType !== void 0 ? mimeType : undefined,\n                    Params: {\n                        Size: this.fileData.length,\n                        CreationDate: creationDate\n                            ? PDFString.fromDate(creationDate)\n                            : undefined,\n                        ModDate: modificationDate\n                            ? PDFString.fromDate(modificationDate)\n                            : undefined,\n                    },\n                });\n                embeddedFileStreamRef = context.register(embeddedFileStream);\n                fileSpecDict = context.obj({\n                    Type: 'Filespec',\n                    F: PDFString.of(this.fileName),\n                    UF: PDFHexString.fromText(this.fileName),\n                    EF: { F: embeddedFileStreamRef },\n                    Desc: description ? PDFHexString.fromText(description) : undefined,\n                    AFRelationship: afRelationship !== null && afRelationship !== void 0 ? afRelationship : undefined,\n                });\n                if (ref) {\n                    context.assign(ref, fileSpecDict);\n                    return [2 /*return*/, ref];\n                }\n                else {\n                    return [2 /*return*/, context.register(fileSpecDict)];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    return FileEmbedder;\n}());\nexport default FileEmbedder;\n//# sourceMappingURL=FileEmbedder.js.map"]},"metadata":{},"sourceType":"module"}