{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { PNG } from \"../../utils/png\";\n/**\n * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\n * this class borrows from:\n *   https://github.com/devongovett/pdfkit/blob/e71edab0dd4657b5a767804ba86c94c58d01fbca/lib/image/png.coffee\n */\nvar PngEmbedder = /** @class */function () {\n  function PngEmbedder(png) {\n    this.image = png;\n    this.bitsPerComponent = png.bitsPerComponent;\n    this.width = png.width;\n    this.height = png.height;\n    this.colorSpace = 'DeviceRGB';\n  }\n  PngEmbedder.for = function (imageData) {\n    return __awaiter(this, void 0, void 0, function () {\n      var png;\n      return __generator(this, function (_a) {\n        png = PNG.load(imageData);\n        return [2 /*return*/, new PngEmbedder(png)];\n      });\n    });\n  };\n  PngEmbedder.prototype.embedIntoContext = function (context, ref) {\n    return __awaiter(this, void 0, void 0, function () {\n      var SMask, xObject;\n      return __generator(this, function (_a) {\n        SMask = this.embedAlphaChannel(context);\n        xObject = context.flateStream(this.image.rgbChannel, {\n          Type: 'XObject',\n          Subtype: 'Image',\n          BitsPerComponent: this.image.bitsPerComponent,\n          Width: this.image.width,\n          Height: this.image.height,\n          ColorSpace: this.colorSpace,\n          SMask: SMask\n        });\n        if (ref) {\n          context.assign(ref, xObject);\n          return [2 /*return*/, ref];\n        } else {\n          return [2 /*return*/, context.register(xObject)];\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n  PngEmbedder.prototype.embedAlphaChannel = function (context) {\n    if (!this.image.alphaChannel) return undefined;\n    var xObject = context.flateStream(this.image.alphaChannel, {\n      Type: 'XObject',\n      Subtype: 'Image',\n      Height: this.image.height,\n      Width: this.image.width,\n      BitsPerComponent: this.image.bitsPerComponent,\n      ColorSpace: 'DeviceGray',\n      Decode: [0, 1]\n    });\n    return context.register(xObject);\n  };\n  return PngEmbedder;\n}();\nexport default PngEmbedder;","map":{"version":3,"sources":["../../../src/core/embedders/PngEmbedder.ts"],"names":[],"mappings":";AAEA,SAAS,GAAG,QAAE,iBAAA;AAEd;;;;AAIG;AACH,IAAA,WAAA,GAAA,aAAA,YAAA;EAaE,SAAA,WAAA,CAAoB,GAAQ,EAAA;IAC1B,IAAI,CAAC,KAAK,GAAG,GAAG;IAChB,IAAI,CAAC,gBAAgB,GAAG,GAAG,CAAC,gBAAgB;IAC5C,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK;IACtB,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM;IACxB,IAAI,CAAC,UAAU,GAAG,WAAW;EAC/B;EAlBa,WAAA,CAAA,GAAG,GAAhB,UAAiB,SAAqB,EAAA;;;;QAC9B,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;QAC/B,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,WAAW,CAAC,GAAG,CAAC,CAAA;;;GAC5B;EAiBK,WAAA,CAAA,SAAA,CAAA,gBAAgB,GAAtB,UAAuB,OAAmB,EAAE,GAAY,EAAA;;;;QAChD,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC;QAEvC,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE;UACzD,IAAI,EAAE,SAAS;UACf,OAAO,EAAE,OAAO;UAChB,gBAAgB,EAAE,IAAI,CAAC,KAAK,CAAC,gBAAgB;UAC7C,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK;UACvB,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM;UACzB,UAAU,EAAE,IAAI,CAAC,UAAU;UAC3B,KAAK,EAAA;SACN,CAAC;QAEF,IAAI,GAAG,EAAE;UACP,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC;UAC5B,OAAA,CAAA,CAAA,CAAA,YAAO,GAAG,CAAA;SACX,MAAM;UACL,OAAA,CAAA,CAAA,CAAA,YAAO,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACjC;;;;GACF;EAEO,WAAA,CAAA,SAAA,CAAA,iBAAiB,GAAzB,UAA0B,OAAmB,EAAA;IAC3C,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,OAAO,SAAS;IAE9C,IAAM,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE;MAC3D,IAAI,EAAE,SAAS;MACf,OAAO,EAAE,OAAO;MAChB,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM;MACzB,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK;MACvB,gBAAgB,EAAE,IAAI,CAAC,KAAK,CAAC,gBAAgB;MAC7C,UAAU,EAAE,YAAY;MACxB,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC;KACd,CAAC;IAEF,OAAO,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC;EAClC,CAAC;EACH,OAAA,WAAC;AAAD,CAAC,CAAA,CAAA;AAED,eAAe,WAAW","sourceRoot":"","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport { PNG } from \"../../utils/png\";\n/**\n * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\n * this class borrows from:\n *   https://github.com/devongovett/pdfkit/blob/e71edab0dd4657b5a767804ba86c94c58d01fbca/lib/image/png.coffee\n */\nvar PngEmbedder = /** @class */ (function () {\n    function PngEmbedder(png) {\n        this.image = png;\n        this.bitsPerComponent = png.bitsPerComponent;\n        this.width = png.width;\n        this.height = png.height;\n        this.colorSpace = 'DeviceRGB';\n    }\n    PngEmbedder.for = function (imageData) {\n        return __awaiter(this, void 0, void 0, function () {\n            var png;\n            return __generator(this, function (_a) {\n                png = PNG.load(imageData);\n                return [2 /*return*/, new PngEmbedder(png)];\n            });\n        });\n    };\n    PngEmbedder.prototype.embedIntoContext = function (context, ref) {\n        return __awaiter(this, void 0, void 0, function () {\n            var SMask, xObject;\n            return __generator(this, function (_a) {\n                SMask = this.embedAlphaChannel(context);\n                xObject = context.flateStream(this.image.rgbChannel, {\n                    Type: 'XObject',\n                    Subtype: 'Image',\n                    BitsPerComponent: this.image.bitsPerComponent,\n                    Width: this.image.width,\n                    Height: this.image.height,\n                    ColorSpace: this.colorSpace,\n                    SMask: SMask,\n                });\n                if (ref) {\n                    context.assign(ref, xObject);\n                    return [2 /*return*/, ref];\n                }\n                else {\n                    return [2 /*return*/, context.register(xObject)];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    PngEmbedder.prototype.embedAlphaChannel = function (context) {\n        if (!this.image.alphaChannel)\n            return undefined;\n        var xObject = context.flateStream(this.image.alphaChannel, {\n            Type: 'XObject',\n            Subtype: 'Image',\n            Height: this.image.height,\n            Width: this.image.width,\n            BitsPerComponent: this.image.bitsPerComponent,\n            ColorSpace: 'DeviceGray',\n            Decode: [0, 1],\n        });\n        return context.register(xObject);\n    };\n    return PngEmbedder;\n}());\nexport default PngEmbedder;\n//# sourceMappingURL=PngEmbedder.js.map"]},"metadata":{},"sourceType":"module"}